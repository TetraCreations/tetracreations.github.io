### YamlMime:ManagedReference
items:
- uid: TetraCreations.Core.GameObjectExtensions
  commentId: T:TetraCreations.Core.GameObjectExtensions
  id: GameObjectExtensions
  parent: TetraCreations.Core
  children:
  - TetraCreations.Core.GameObjectExtensions.DoesInstanceExist``1
  - TetraCreations.Core.GameObjectExtensions.GetChildOrDefault(GameObject,System.Int32)
  - TetraCreations.Core.GameObjectExtensions.GetChildren(GameObject,List{GameObject})
  - TetraCreations.Core.GameObjectExtensions.GetComponentInChildren``1(GameObject,``0@)
  - TetraCreations.Core.GameObjectExtensions.GetComponentInChildren``1(GameObject,System.Int32)
  - TetraCreations.Core.GameObjectExtensions.GetComponentInParent``1(GameObject,``0@)
  - TetraCreations.Core.GameObjectExtensions.GetComponentInParentOrChildren``1(GameObject,``0@)
  - TetraCreations.Core.GameObjectExtensions.GetFirstChildren(GameObject)
  - TetraCreations.Core.GameObjectExtensions.GetOrAddComponent``1(GameObject)
  - TetraCreations.Core.GameObjectExtensions.HasComponent``1(GameObject)
  - TetraCreations.Core.GameObjectExtensions.IsActive(GameObject)
  - TetraCreations.Core.GameObjectExtensions.Log(GameObject,System.String,System.String)
  langs:
  - csharp
  - vb
  name: GameObjectExtensions
  nameWithType: GameObjectExtensions
  fullName: TetraCreations.Core.GameObjectExtensions
  type: Class
  source:
    id: GameObjectExtensions
    path: ''
    startLine: 37133
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  syntax:
    content: public static class GameObjectExtensions
    content.vb: Public Module GameObjectExtensions
  inheritance:
  - System.Object
- uid: TetraCreations.Core.GameObjectExtensions.GetOrAddComponent``1(GameObject)
  commentId: M:TetraCreations.Core.GameObjectExtensions.GetOrAddComponent``1(GameObject)
  id: GetOrAddComponent``1(GameObject)
  isExtensionMethod: true
  parent: TetraCreations.Core.GameObjectExtensions
  langs:
  - csharp
  - vb
  name: GetOrAddComponent<T>(GameObject)
  nameWithType: GameObjectExtensions.GetOrAddComponent<T>(GameObject)
  fullName: TetraCreations.Core.GameObjectExtensions.GetOrAddComponent<T>(GameObject)
  type: Method
  source:
    id: GetOrAddComponent
    path: ''
    startLine: 37141
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturns a component if it exist otherwise add it.\n"
  example: []
  syntax:
    content: 'public static T GetOrAddComponent<T>(this GameObject gameObject) where T : Component'
    parameters:
    - id: gameObject
      type: Global.GameObject
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Shared Function GetOrAddComponent(Of T As Component)(gameObject As GameObject) As T
  overload: TetraCreations.Core.GameObjectExtensions.GetOrAddComponent*
  nameWithType.vb: GameObjectExtensions.GetOrAddComponent(Of T)(GameObject)
  fullName.vb: TetraCreations.Core.GameObjectExtensions.GetOrAddComponent(Of T)(GameObject)
  name.vb: GetOrAddComponent(Of T)(GameObject)
- uid: TetraCreations.Core.GameObjectExtensions.HasComponent``1(GameObject)
  commentId: M:TetraCreations.Core.GameObjectExtensions.HasComponent``1(GameObject)
  id: HasComponent``1(GameObject)
  isExtensionMethod: true
  parent: TetraCreations.Core.GameObjectExtensions
  langs:
  - csharp
  - vb
  name: HasComponent<T>(GameObject)
  nameWithType: GameObjectExtensions.HasComponent<T>(GameObject)
  fullName: TetraCreations.Core.GameObjectExtensions.HasComponent<T>(GameObject)
  type: Method
  source:
    id: HasComponent
    path: ''
    startLine: 37154
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines whether the game object has the component\n"
  example: []
  syntax:
    content: 'public static bool HasComponent<T>(this GameObject gameObject) where T : Component'
    parameters:
    - id: gameObject
      type: Global.GameObject
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function HasComponent(Of T As Component)(gameObject As GameObject) As Boolean
  overload: TetraCreations.Core.GameObjectExtensions.HasComponent*
  nameWithType.vb: GameObjectExtensions.HasComponent(Of T)(GameObject)
  fullName.vb: TetraCreations.Core.GameObjectExtensions.HasComponent(Of T)(GameObject)
  name.vb: HasComponent(Of T)(GameObject)
- uid: TetraCreations.Core.GameObjectExtensions.GetFirstChildren(GameObject)
  commentId: M:TetraCreations.Core.GameObjectExtensions.GetFirstChildren(GameObject)
  id: GetFirstChildren(GameObject)
  isExtensionMethod: true
  parent: TetraCreations.Core.GameObjectExtensions
  langs:
  - csharp
  - vb
  name: GetFirstChildren(GameObject)
  nameWithType: GameObjectExtensions.GetFirstChildren(GameObject)
  fullName: TetraCreations.Core.GameObjectExtensions.GetFirstChildren(GameObject)
  type: Method
  source:
    id: GetFirstChildren
    path: ''
    startLine: 37163
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturns children gameObject at the fist level in the hierarchy.\n"
  example: []
  syntax:
    content: public static List<GameObject> GetFirstChildren(this GameObject parent)
    parameters:
    - id: parent
      type: Global.GameObject
      description: ''
    return:
      type: Global.List{GameObject}
    content.vb: Public Shared Function GetFirstChildren(parent As GameObject) As List(Of GameObject)
  overload: TetraCreations.Core.GameObjectExtensions.GetFirstChildren*
- uid: TetraCreations.Core.GameObjectExtensions.GetChildren(GameObject,List{GameObject})
  commentId: M:TetraCreations.Core.GameObjectExtensions.GetChildren(GameObject,List{GameObject})
  id: GetChildren(GameObject,List{GameObject})
  isExtensionMethod: true
  parent: TetraCreations.Core.GameObjectExtensions
  langs:
  - csharp
  - vb
  name: GetChildren(GameObject, List<GameObject>)
  nameWithType: GameObjectExtensions.GetChildren(GameObject, List<GameObject>)
  fullName: TetraCreations.Core.GameObjectExtensions.GetChildren(GameObject, List<GameObject>)
  type: Method
  source:
    id: GetChildren
    path: ''
    startLine: 37180
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nAdd children to a list from a gameObject recursively\n"
  example: []
  syntax:
    content: public static void GetChildren(this GameObject parent, List<GameObject> children)
    parameters:
    - id: parent
      type: Global.GameObject
      description: ''
    - id: children
      type: Global.List{GameObject}
      description: ''
    content.vb: Public Shared Sub GetChildren(parent As GameObject, children As List(Of GameObject))
  overload: TetraCreations.Core.GameObjectExtensions.GetChildren*
  nameWithType.vb: GameObjectExtensions.GetChildren(GameObject, List(Of GameObject))
  fullName.vb: TetraCreations.Core.GameObjectExtensions.GetChildren(GameObject, List(Of GameObject))
  name.vb: GetChildren(GameObject, List(Of GameObject))
- uid: TetraCreations.Core.GameObjectExtensions.GetComponentInChildren``1(GameObject,System.Int32)
  commentId: M:TetraCreations.Core.GameObjectExtensions.GetComponentInChildren``1(GameObject,System.Int32)
  id: GetComponentInChildren``1(GameObject,System.Int32)
  isExtensionMethod: true
  parent: TetraCreations.Core.GameObjectExtensions
  langs:
  - csharp
  - vb
  name: GetComponentInChildren<T>(GameObject, int)
  nameWithType: GameObjectExtensions.GetComponentInChildren<T>(GameObject, int)
  fullName: TetraCreations.Core.GameObjectExtensions.GetComponentInChildren<T>(GameObject, int)
  type: Method
  source:
    id: GetComponentInChildren
    path: ''
    startLine: 37196
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  syntax:
    content: 'public static T GetComponentInChildren<T>(this GameObject gameObject, int index) where T : Component'
    parameters:
    - id: gameObject
      type: Global.GameObject
    - id: index
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function GetComponentInChildren(Of T As Component)(gameObject As GameObject, index As Integer) As T
  overload: TetraCreations.Core.GameObjectExtensions.GetComponentInChildren*
  nameWithType.vb: GameObjectExtensions.GetComponentInChildren(Of T)(GameObject, Integer)
  fullName.vb: TetraCreations.Core.GameObjectExtensions.GetComponentInChildren(Of T)(GameObject, Integer)
  name.vb: GetComponentInChildren(Of T)(GameObject, Integer)
- uid: TetraCreations.Core.GameObjectExtensions.GetChildOrDefault(GameObject,System.Int32)
  commentId: M:TetraCreations.Core.GameObjectExtensions.GetChildOrDefault(GameObject,System.Int32)
  id: GetChildOrDefault(GameObject,System.Int32)
  isExtensionMethod: true
  parent: TetraCreations.Core.GameObjectExtensions
  langs:
  - csharp
  - vb
  name: GetChildOrDefault(GameObject, int)
  nameWithType: GameObjectExtensions.GetChildOrDefault(GameObject, int)
  fullName: TetraCreations.Core.GameObjectExtensions.GetChildOrDefault(GameObject, int)
  type: Method
  source:
    id: GetChildOrDefault
    path: ''
    startLine: 37207
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nTry to get the Transform at a specific index from the GameObject childs\n"
  example: []
  syntax:
    content: public static Transform GetChildOrDefault(this GameObject gameObject, int index)
    parameters:
    - id: gameObject
      type: Global.GameObject
      description: ''
    - id: index
      type: System.Int32
      description: ''
    return:
      type: Global.Transform
      description: ''
    content.vb: Public Shared Function GetChildOrDefault(gameObject As GameObject, index As Integer) As Transform
  overload: TetraCreations.Core.GameObjectExtensions.GetChildOrDefault*
  nameWithType.vb: GameObjectExtensions.GetChildOrDefault(GameObject, Integer)
  fullName.vb: TetraCreations.Core.GameObjectExtensions.GetChildOrDefault(GameObject, Integer)
  name.vb: GetChildOrDefault(GameObject, Integer)
- uid: TetraCreations.Core.GameObjectExtensions.GetComponentInParentOrChildren``1(GameObject,``0@)
  commentId: M:TetraCreations.Core.GameObjectExtensions.GetComponentInParentOrChildren``1(GameObject,``0@)
  id: GetComponentInParentOrChildren``1(GameObject,``0@)
  isExtensionMethod: true
  parent: TetraCreations.Core.GameObjectExtensions
  langs:
  - csharp
  - vb
  name: GetComponentInParentOrChildren<T>(GameObject, ref T)
  nameWithType: GameObjectExtensions.GetComponentInParentOrChildren<T>(GameObject, ref T)
  fullName: TetraCreations.Core.GameObjectExtensions.GetComponentInParentOrChildren<T>(GameObject, ref T)
  type: Method
  source:
    id: GetComponentInParentOrChildren
    path: ''
    startLine: 37223
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nTrie to get a component from the parent then from children if it wasn&apos;t found.\n"
  example: []
  syntax:
    content: 'public static void GetComponentInParentOrChildren<T>(this GameObject gameObject, ref T component) where T : Component'
    parameters:
    - id: gameObject
      type: Global.GameObject
      description: ''
    - id: component
      type: '{T}'
      description: ''
    typeParameters:
    - id: T
      description: ''
    content.vb: Public Shared Sub GetComponentInParentOrChildren(Of T As Component)(gameObject As GameObject, component As T)
  overload: TetraCreations.Core.GameObjectExtensions.GetComponentInParentOrChildren*
  nameWithType.vb: GameObjectExtensions.GetComponentInParentOrChildren(Of T)(GameObject, T)
  fullName.vb: TetraCreations.Core.GameObjectExtensions.GetComponentInParentOrChildren(Of T)(GameObject, T)
  name.vb: GetComponentInParentOrChildren(Of T)(GameObject, T)
- uid: TetraCreations.Core.GameObjectExtensions.GetComponentInParent``1(GameObject,``0@)
  commentId: M:TetraCreations.Core.GameObjectExtensions.GetComponentInParent``1(GameObject,``0@)
  id: GetComponentInParent``1(GameObject,``0@)
  isExtensionMethod: true
  parent: TetraCreations.Core.GameObjectExtensions
  langs:
  - csharp
  - vb
  name: GetComponentInParent<T>(GameObject, ref T)
  nameWithType: GameObjectExtensions.GetComponentInParent<T>(GameObject, ref T)
  fullName: TetraCreations.Core.GameObjectExtensions.GetComponentInParent<T>(GameObject, ref T)
  type: Method
  source:
    id: GetComponentInParent
    path: ''
    startLine: 37240
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nTry to get a component from the GameObject parent\n"
  example: []
  syntax:
    content: 'public static void GetComponentInParent<T>(this GameObject gameObject, ref T component) where T : Component'
    parameters:
    - id: gameObject
      type: Global.GameObject
      description: ''
    - id: component
      type: '{T}'
      description: ''
    typeParameters:
    - id: T
      description: ''
    content.vb: Public Shared Sub GetComponentInParent(Of T As Component)(gameObject As GameObject, component As T)
  overload: TetraCreations.Core.GameObjectExtensions.GetComponentInParent*
  nameWithType.vb: GameObjectExtensions.GetComponentInParent(Of T)(GameObject, T)
  fullName.vb: TetraCreations.Core.GameObjectExtensions.GetComponentInParent(Of T)(GameObject, T)
  name.vb: GetComponentInParent(Of T)(GameObject, T)
- uid: TetraCreations.Core.GameObjectExtensions.GetComponentInChildren``1(GameObject,``0@)
  commentId: M:TetraCreations.Core.GameObjectExtensions.GetComponentInChildren``1(GameObject,``0@)
  id: GetComponentInChildren``1(GameObject,``0@)
  isExtensionMethod: true
  parent: TetraCreations.Core.GameObjectExtensions
  langs:
  - csharp
  - vb
  name: GetComponentInChildren<T>(GameObject, ref T)
  nameWithType: GameObjectExtensions.GetComponentInChildren<T>(GameObject, ref T)
  fullName: TetraCreations.Core.GameObjectExtensions.GetComponentInChildren<T>(GameObject, ref T)
  type: Method
  source:
    id: GetComponentInChildren
    path: ''
    startLine: 37253
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nTry to get a component from the GameObject children\n"
  example: []
  syntax:
    content: 'public static void GetComponentInChildren<T>(this GameObject gameObject, ref T component) where T : Component'
    parameters:
    - id: gameObject
      type: Global.GameObject
      description: ''
    - id: component
      type: '{T}'
      description: ''
    typeParameters:
    - id: T
      description: ''
    content.vb: Public Shared Sub GetComponentInChildren(Of T As Component)(gameObject As GameObject, component As T)
  overload: TetraCreations.Core.GameObjectExtensions.GetComponentInChildren*
  nameWithType.vb: GameObjectExtensions.GetComponentInChildren(Of T)(GameObject, T)
  fullName.vb: TetraCreations.Core.GameObjectExtensions.GetComponentInChildren(Of T)(GameObject, T)
  name.vb: GetComponentInChildren(Of T)(GameObject, T)
- uid: TetraCreations.Core.GameObjectExtensions.IsActive(GameObject)
  commentId: M:TetraCreations.Core.GameObjectExtensions.IsActive(GameObject)
  id: IsActive(GameObject)
  isExtensionMethod: true
  parent: TetraCreations.Core.GameObjectExtensions
  langs:
  - csharp
  - vb
  name: IsActive(GameObject)
  nameWithType: GameObjectExtensions.IsActive(GameObject)
  fullName: TetraCreations.Core.GameObjectExtensions.IsActive(GameObject)
  type: Method
  source:
    id: IsActive
    path: ''
    startLine: 37265
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermine if the GameObject is active in the hierarchy\n"
  example: []
  syntax:
    content: public static bool IsActive(this GameObject gameObject)
    parameters:
    - id: gameObject
      type: Global.GameObject
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsActive(gameObject As GameObject) As Boolean
  overload: TetraCreations.Core.GameObjectExtensions.IsActive*
- uid: TetraCreations.Core.GameObjectExtensions.Log(GameObject,System.String,System.String)
  commentId: M:TetraCreations.Core.GameObjectExtensions.Log(GameObject,System.String,System.String)
  id: Log(GameObject,System.String,System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.GameObjectExtensions
  langs:
  - csharp
  - vb
  name: Log(GameObject, string, string)
  nameWithType: GameObjectExtensions.Log(GameObject, string, string)
  fullName: TetraCreations.Core.GameObjectExtensions.Log(GameObject, string, string)
  type: Method
  source:
    id: Log
    path: ''
    startLine: 37276
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDebug.Log the name of the GameObject followed by a message.\n"
  example: []
  syntax:
    content: 'public static void Log(this GameObject gameObject, string message, string separator = " : ")'
    parameters:
    - id: gameObject
      type: Global.GameObject
      description: ''
    - id: message
      type: System.String
      description: ''
    - id: separator
      type: System.String
      description: ''
    content.vb: 'Public Shared Sub Log(gameObject As GameObject, message As String, separator As String = " : ")'
  overload: TetraCreations.Core.GameObjectExtensions.Log*
  nameWithType.vb: GameObjectExtensions.Log(GameObject, String, String)
  fullName.vb: TetraCreations.Core.GameObjectExtensions.Log(GameObject, String, String)
  name.vb: Log(GameObject, String, String)
- uid: TetraCreations.Core.GameObjectExtensions.DoesInstanceExist``1
  commentId: M:TetraCreations.Core.GameObjectExtensions.DoesInstanceExist``1
  id: DoesInstanceExist``1
  parent: TetraCreations.Core.GameObjectExtensions
  langs:
  - csharp
  - vb
  name: DoesInstanceExist<T>()
  nameWithType: GameObjectExtensions.DoesInstanceExist<T>()
  fullName: TetraCreations.Core.GameObjectExtensions.DoesInstanceExist<T>()
  type: Method
  source:
    id: DoesInstanceExist
    path: ''
    startLine: 37286
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermine if any instance of a specific game object type exist in the current scene\n"
  example: []
  syntax:
    content: public static bool DoesInstanceExist<T>()
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function DoesInstanceExist(Of T)() As Boolean
  overload: TetraCreations.Core.GameObjectExtensions.DoesInstanceExist*
  nameWithType.vb: GameObjectExtensions.DoesInstanceExist(Of T)()
  fullName.vb: TetraCreations.Core.GameObjectExtensions.DoesInstanceExist(Of T)()
  name.vb: DoesInstanceExist(Of T)()
references:
- uid: TetraCreations.Core
  commentId: N:TetraCreations.Core
  name: TetraCreations.Core
  nameWithType: TetraCreations.Core
  fullName: TetraCreations.Core
  spec.csharp:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  spec.vb:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TetraCreations.Core.GameObjectExtensions.GetOrAddComponent*
  commentId: Overload:TetraCreations.Core.GameObjectExtensions.GetOrAddComponent
  name: GetOrAddComponent
  nameWithType: GameObjectExtensions.GetOrAddComponent
  fullName: TetraCreations.Core.GameObjectExtensions.GetOrAddComponent
- uid: Global.GameObject
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: GameObject
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TetraCreations.Core.GameObjectExtensions.HasComponent*
  commentId: Overload:TetraCreations.Core.GameObjectExtensions.HasComponent
  name: HasComponent
  nameWithType: GameObjectExtensions.HasComponent
  fullName: TetraCreations.Core.GameObjectExtensions.HasComponent
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TetraCreations.Core.GameObjectExtensions.GetFirstChildren*
  commentId: Overload:TetraCreations.Core.GameObjectExtensions.GetFirstChildren
  name: GetFirstChildren
  nameWithType: GameObjectExtensions.GetFirstChildren
  fullName: TetraCreations.Core.GameObjectExtensions.GetFirstChildren
- uid: Global.List{GameObject}
  commentId: '!:Global.List{GameObject}'
  definition: Global.List`1
  name: List<GameObject>
  nameWithType: List<GameObject>
  fullName: List<GameObject>
  nameWithType.vb: List(Of GameObject)
  fullName.vb: List(Of GameObject)
  name.vb: List(Of GameObject)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.GameObject
    name: GameObject
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.GameObject
    name: GameObject
    isExternal: true
  - name: )
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.GameObjectExtensions.GetChildren*
  commentId: Overload:TetraCreations.Core.GameObjectExtensions.GetChildren
  name: GetChildren
  nameWithType: GameObjectExtensions.GetChildren
  fullName: TetraCreations.Core.GameObjectExtensions.GetChildren
- uid: TetraCreations.Core.GameObjectExtensions.GetComponentInChildren*
  commentId: Overload:TetraCreations.Core.GameObjectExtensions.GetComponentInChildren
  name: GetComponentInChildren
  nameWithType: GameObjectExtensions.GetComponentInChildren
  fullName: TetraCreations.Core.GameObjectExtensions.GetComponentInChildren
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TetraCreations.Core.GameObjectExtensions.GetChildOrDefault*
  commentId: Overload:TetraCreations.Core.GameObjectExtensions.GetChildOrDefault
  name: GetChildOrDefault
  nameWithType: GameObjectExtensions.GetChildOrDefault
  fullName: TetraCreations.Core.GameObjectExtensions.GetChildOrDefault
- uid: Global.Transform
  isExternal: true
  name: Transform
  nameWithType: Transform
  fullName: Transform
- uid: TetraCreations.Core.GameObjectExtensions.GetComponentInParentOrChildren*
  commentId: Overload:TetraCreations.Core.GameObjectExtensions.GetComponentInParentOrChildren
  name: GetComponentInParentOrChildren
  nameWithType: GameObjectExtensions.GetComponentInParentOrChildren
  fullName: TetraCreations.Core.GameObjectExtensions.GetComponentInParentOrChildren
- uid: TetraCreations.Core.GameObjectExtensions.GetComponentInParent*
  commentId: Overload:TetraCreations.Core.GameObjectExtensions.GetComponentInParent
  name: GetComponentInParent
  nameWithType: GameObjectExtensions.GetComponentInParent
  fullName: TetraCreations.Core.GameObjectExtensions.GetComponentInParent
- uid: TetraCreations.Core.GameObjectExtensions.IsActive*
  commentId: Overload:TetraCreations.Core.GameObjectExtensions.IsActive
  name: IsActive
  nameWithType: GameObjectExtensions.IsActive
  fullName: TetraCreations.Core.GameObjectExtensions.IsActive
- uid: TetraCreations.Core.GameObjectExtensions.Log*
  commentId: Overload:TetraCreations.Core.GameObjectExtensions.Log
  name: Log
  nameWithType: GameObjectExtensions.Log
  fullName: TetraCreations.Core.GameObjectExtensions.Log
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TetraCreations.Core.GameObjectExtensions.DoesInstanceExist*
  commentId: Overload:TetraCreations.Core.GameObjectExtensions.DoesInstanceExist
  name: DoesInstanceExist
  nameWithType: GameObjectExtensions.DoesInstanceExist
  fullName: TetraCreations.Core.GameObjectExtensions.DoesInstanceExist
