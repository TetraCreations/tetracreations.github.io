### YamlMime:ManagedReference
items:
- uid: TetraCreations.Core.TypeUtility
  commentId: T:TetraCreations.Core.TypeUtility
  id: TypeUtility
  parent: TetraCreations.Core
  children:
  - TetraCreations.Core.TypeUtility.GetAssembly(System.String,System.Boolean)
  - TetraCreations.Core.TypeUtility.ParseType(System.String,System.String)
  langs:
  - csharp
  - vb
  name: TypeUtility
  nameWithType: TypeUtility
  fullName: TetraCreations.Core.TypeUtility
  type: Class
  source:
    id: TypeUtility
    path: ''
    startLine: 38522
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  syntax:
    content: public static class TypeUtility
    content.vb: Public Module TypeUtility
  inheritance:
  - System.Object
- uid: TetraCreations.Core.TypeUtility.ParseType(System.String,System.String)
  commentId: M:TetraCreations.Core.TypeUtility.ParseType(System.String,System.String)
  id: ParseType(System.String,System.String)
  parent: TetraCreations.Core.TypeUtility
  langs:
  - csharp
  - vb
  name: ParseType(string, string)
  nameWithType: TypeUtility.ParseType(string, string)
  fullName: TetraCreations.Core.TypeUtility.ParseType(string, string)
  type: Method
  source:
    id: ParseType
    path: ''
    startLine: 38530
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nTries to return a Type by it&apos;s name from a given assembly name.\n"
  example: []
  syntax:
    content: public static Type ParseType(string assembName, string typeName)
    parameters:
    - id: assembName
      type: System.String
      description: The assembly name to search from
    - id: typeName
      type: System.String
      description: The type name we want
    return:
      type: System.Type
      description: ''
    content.vb: Public Shared Function ParseType(assembName As String, typeName As String) As Type
  overload: TetraCreations.Core.TypeUtility.ParseType*
  nameWithType.vb: TypeUtility.ParseType(String, String)
  fullName.vb: TetraCreations.Core.TypeUtility.ParseType(String, String)
  name.vb: ParseType(String, String)
- uid: TetraCreations.Core.TypeUtility.GetAssembly(System.String,System.Boolean)
  commentId: M:TetraCreations.Core.TypeUtility.GetAssembly(System.String,System.Boolean)
  id: GetAssembly(System.String,System.Boolean)
  parent: TetraCreations.Core.TypeUtility
  langs:
  - csharp
  - vb
  name: GetAssembly(string, bool)
  nameWithType: TypeUtility.GetAssembly(string, bool)
  fullName: TetraCreations.Core.TypeUtility.GetAssembly(string, bool)
  type: Method
  source:
    id: GetAssembly
    path: ''
    startLine: 38552
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturns an assembly by it&apos;s name \n"
  example: []
  syntax:
    content: public static Assembly GetAssembly(string name, bool ignoreCase = false)
    parameters:
    - id: name
      type: System.String
      description: The assembly name
    - id: ignoreCase
      type: System.Boolean
      description: If we ignore the case during string comparison
    return:
      type: Global.Assembly
      description: ''
    content.vb: Public Shared Function GetAssembly(name As String, ignoreCase As Boolean = False) As Assembly
  overload: TetraCreations.Core.TypeUtility.GetAssembly*
  nameWithType.vb: TypeUtility.GetAssembly(String, Boolean)
  fullName.vb: TetraCreations.Core.TypeUtility.GetAssembly(String, Boolean)
  name.vb: GetAssembly(String, Boolean)
references:
- uid: TetraCreations.Core
  commentId: N:TetraCreations.Core
  name: TetraCreations.Core
  nameWithType: TetraCreations.Core
  fullName: TetraCreations.Core
  spec.csharp:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  spec.vb:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TetraCreations.Core.TypeUtility.ParseType*
  commentId: Overload:TetraCreations.Core.TypeUtility.ParseType
  name: ParseType
  nameWithType: TypeUtility.ParseType
  fullName: TetraCreations.Core.TypeUtility.ParseType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: TetraCreations.Core.TypeUtility.GetAssembly*
  commentId: Overload:TetraCreations.Core.TypeUtility.GetAssembly
  name: GetAssembly
  nameWithType: TypeUtility.GetAssembly
  fullName: TetraCreations.Core.TypeUtility.GetAssembly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.Assembly
  commentId: '!:Global.Assembly'
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: Assembly
