### YamlMime:ManagedReference
items:
- uid: TetraCreations.Core.CollectionExtensions
  commentId: T:TetraCreations.Core.CollectionExtensions
  id: CollectionExtensions
  parent: TetraCreations.Core
  children:
  - TetraCreations.Core.CollectionExtensions.AddIf``1(ICollection{``0},``0,Func{``0,System.Boolean})
  - TetraCreations.Core.CollectionExtensions.AddIfNotContains``1(ICollection{``0},``0)
  - TetraCreations.Core.CollectionExtensions.AddIfNotNull``1(ICollection{``0},``0)
  - TetraCreations.Core.CollectionExtensions.AsString``1(IList{``0},System.String)
  - TetraCreations.Core.CollectionExtensions.GetOrDefault``1(``0[],System.Int32)
  - TetraCreations.Core.CollectionExtensions.GetRandomElement``1(IList{``0})
  - TetraCreations.Core.CollectionExtensions.HasUniqueElements``1(ICollection{``0},IEqualityComparer{``0})
  - TetraCreations.Core.CollectionExtensions.HasUniqueElements``1(ICollection{``0})
  - TetraCreations.Core.CollectionExtensions.IndexInRange``1(``0[],System.Int32)
  - TetraCreations.Core.CollectionExtensions.IsEmpty``1(ICollection{``0})
  - TetraCreations.Core.CollectionExtensions.IsNotEmpty``1(ICollection{``0})
  - TetraCreations.Core.CollectionExtensions.IsNotNullOrEmpty``1(ICollection{``0})
  - TetraCreations.Core.CollectionExtensions.IsNullOrEmpty``1(ICollection{``0})
  - TetraCreations.Core.CollectionExtensions.Log``1(ICollection{``0})
  - TetraCreations.Core.CollectionExtensions.LogArray``1(``0[])
  - TetraCreations.Core.CollectionExtensions.RemoveRandomElement``1(IList{``0})
  - TetraCreations.Core.CollectionExtensions.ReverseLoop``1(IList{``0})
  - TetraCreations.Core.CollectionExtensions.Shuffle``1(IList{``0})
  - TetraCreations.Core.CollectionExtensions.WithoutDuplicates``1(ICollection{``0})
  langs:
  - csharp
  - vb
  name: CollectionExtensions
  nameWithType: CollectionExtensions
  fullName: TetraCreations.Core.CollectionExtensions
  type: Class
  source:
    id: CollectionExtensions
    path: ''
    startLine: 36225
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  syntax:
    content: public static class CollectionExtensions
    content.vb: Public Module CollectionExtensions
  inheritance:
  - System.Object
- uid: TetraCreations.Core.CollectionExtensions.IndexInRange``1(``0[],System.Int32)
  commentId: M:TetraCreations.Core.CollectionExtensions.IndexInRange``1(``0[],System.Int32)
  id: IndexInRange``1(``0[],System.Int32)
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: IndexInRange<T>(T[], int)
  nameWithType: CollectionExtensions.IndexInRange<T>(T[], int)
  fullName: TetraCreations.Core.CollectionExtensions.IndexInRange<T>(T[], int)
  type: Method
  source:
    id: IndexInRange
    path: ''
    startLine: 36234
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturns true if the index exist in the array\n"
  example: []
  syntax:
    content: public static bool IndexInRange<T>(this T[] array, int index)
    parameters:
    - id: array
      type: '{T}[]'
      description: ''
    - id: index
      type: System.Int32
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IndexInRange(Of T)(array As T(), index As Integer) As Boolean
  overload: TetraCreations.Core.CollectionExtensions.IndexInRange*
  nameWithType.vb: CollectionExtensions.IndexInRange(Of T)(T(), Integer)
  fullName.vb: TetraCreations.Core.CollectionExtensions.IndexInRange(Of T)(T(), Integer)
  name.vb: IndexInRange(Of T)(T(), Integer)
- uid: TetraCreations.Core.CollectionExtensions.GetOrDefault``1(``0[],System.Int32)
  commentId: M:TetraCreations.Core.CollectionExtensions.GetOrDefault``1(``0[],System.Int32)
  id: GetOrDefault``1(``0[],System.Int32)
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: GetOrDefault<T>(T[], int)
  nameWithType: CollectionExtensions.GetOrDefault<T>(T[], int)
  fullName: TetraCreations.Core.CollectionExtensions.GetOrDefault<T>(T[], int)
  type: Method
  source:
    id: GetOrDefault
    path: ''
    startLine: 36246
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturns T from the index if it exist otherwise default(T)\n"
  example: []
  syntax:
    content: public static T GetOrDefault<T>(this T[] array, int index)
    parameters:
    - id: array
      type: '{T}[]'
      description: ''
    - id: index
      type: System.Int32
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Shared Function GetOrDefault(Of T)(array As T(), index As Integer) As T
  overload: TetraCreations.Core.CollectionExtensions.GetOrDefault*
  nameWithType.vb: CollectionExtensions.GetOrDefault(Of T)(T(), Integer)
  fullName.vb: TetraCreations.Core.CollectionExtensions.GetOrDefault(Of T)(T(), Integer)
  name.vb: GetOrDefault(Of T)(T(), Integer)
- uid: TetraCreations.Core.CollectionExtensions.LogArray``1(``0[])
  commentId: M:TetraCreations.Core.CollectionExtensions.LogArray``1(``0[])
  id: LogArray``1(``0[])
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: LogArray<T>(T[])
  nameWithType: CollectionExtensions.LogArray<T>(T[])
  fullName: TetraCreations.Core.CollectionExtensions.LogArray<T>(T[])
  type: Method
  source:
    id: LogArray
    path: ''
    startLine: 36261
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDebug.Log all elements from the array\n"
  example: []
  syntax:
    content: public static void LogArray<T>(T[] array)
    parameters:
    - id: array
      type: '{T}[]'
      description: ''
    typeParameters:
    - id: T
      description: ''
    content.vb: Public Shared Sub LogArray(Of T)(array As T())
  overload: TetraCreations.Core.CollectionExtensions.LogArray*
  nameWithType.vb: CollectionExtensions.LogArray(Of T)(T())
  fullName.vb: TetraCreations.Core.CollectionExtensions.LogArray(Of T)(T())
  name.vb: LogArray(Of T)(T())
- uid: TetraCreations.Core.CollectionExtensions.WithoutDuplicates``1(ICollection{``0})
  commentId: M:TetraCreations.Core.CollectionExtensions.WithoutDuplicates``1(ICollection{``0})
  id: WithoutDuplicates``1(ICollection{``0})
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: WithoutDuplicates<T>(ICollection<T>)
  nameWithType: CollectionExtensions.WithoutDuplicates<T>(ICollection<T>)
  fullName: TetraCreations.Core.CollectionExtensions.WithoutDuplicates<T>(ICollection<T>)
  type: Method
  source:
    id: WithoutDuplicates
    path: ''
    startLine: 36277
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  syntax:
    content: public static List<T> WithoutDuplicates<T>(this ICollection<T> list)
    parameters:
    - id: list
      type: Global.ICollection{{T}}
    typeParameters:
    - id: T
    return:
      type: Global.List{{T}}
    content.vb: Public Shared Function WithoutDuplicates(Of T)(list As ICollection(Of T)) As List(Of T)
  overload: TetraCreations.Core.CollectionExtensions.WithoutDuplicates*
  nameWithType.vb: CollectionExtensions.WithoutDuplicates(Of T)(ICollection(Of T))
  fullName.vb: TetraCreations.Core.CollectionExtensions.WithoutDuplicates(Of T)(ICollection(Of T))
  name.vb: WithoutDuplicates(Of T)(ICollection(Of T))
- uid: TetraCreations.Core.CollectionExtensions.Shuffle``1(IList{``0})
  commentId: M:TetraCreations.Core.CollectionExtensions.Shuffle``1(IList{``0})
  id: Shuffle``1(IList{``0})
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: Shuffle<T>(IList<T>)
  nameWithType: CollectionExtensions.Shuffle<T>(IList<T>)
  fullName: TetraCreations.Core.CollectionExtensions.Shuffle<T>(IList<T>)
  type: Method
  source:
    id: Shuffle
    path: ''
    startLine: 36289
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nShuffles the elements of a list randomly using fischer yates algorithm.<br />\nThe algorithm produces an unbiased permutation.<br />\nSource: http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n"
  example: []
  syntax:
    content: public static void Shuffle<T>(this IList<T> list)
    parameters:
    - id: list
      type: Global.IList{{T}}
      description: The list to Shuffle
    typeParameters:
    - id: T
      description: ''
    content.vb: Public Shared Sub Shuffle(Of T)(list As IList(Of T))
  overload: TetraCreations.Core.CollectionExtensions.Shuffle*
  nameWithType.vb: CollectionExtensions.Shuffle(Of T)(IList(Of T))
  fullName.vb: TetraCreations.Core.CollectionExtensions.Shuffle(Of T)(IList(Of T))
  name.vb: Shuffle(Of T)(IList(Of T))
- uid: TetraCreations.Core.CollectionExtensions.GetRandomElement``1(IList{``0})
  commentId: M:TetraCreations.Core.CollectionExtensions.GetRandomElement``1(IList{``0})
  id: GetRandomElement``1(IList{``0})
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: GetRandomElement<T>(IList<T>)
  nameWithType: CollectionExtensions.GetRandomElement<T>(IList<T>)
  fullName: TetraCreations.Core.CollectionExtensions.GetRandomElement<T>(IList<T>)
  type: Method
  source:
    id: GetRandomElement
    path: ''
    startLine: 36310
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturns a random element from a list.\nSampling with replacement.\n"
  example: []
  syntax:
    content: public static T GetRandomElement<T>(this IList<T> list)
    parameters:
    - id: list
      type: Global.IList{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Shared Function GetRandomElement(Of T)(list As IList(Of T)) As T
  overload: TetraCreations.Core.CollectionExtensions.GetRandomElement*
  nameWithType.vb: CollectionExtensions.GetRandomElement(Of T)(IList(Of T))
  fullName.vb: TetraCreations.Core.CollectionExtensions.GetRandomElement(Of T)(IList(Of T))
  name.vb: GetRandomElement(Of T)(IList(Of T))
- uid: TetraCreations.Core.CollectionExtensions.RemoveRandomElement``1(IList{``0})
  commentId: M:TetraCreations.Core.CollectionExtensions.RemoveRandomElement``1(IList{``0})
  id: RemoveRandomElement``1(IList{``0})
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: RemoveRandomElement<T>(IList<T>)
  nameWithType: CollectionExtensions.RemoveRandomElement<T>(IList<T>)
  fullName: TetraCreations.Core.CollectionExtensions.RemoveRandomElement<T>(IList<T>)
  type: Method
  source:
    id: RemoveRandomElement
    path: ''
    startLine: 36323
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nRemoves a random element from a list, returning that item.\n"
  example: []
  syntax:
    content: public static T RemoveRandomElement<T>(this IList<T> list)
    parameters:
    - id: list
      type: Global.IList{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Shared Function RemoveRandomElement(Of T)(list As IList(Of T)) As T
  overload: TetraCreations.Core.CollectionExtensions.RemoveRandomElement*
  nameWithType.vb: CollectionExtensions.RemoveRandomElement(Of T)(IList(Of T))
  fullName.vb: TetraCreations.Core.CollectionExtensions.RemoveRandomElement(Of T)(IList(Of T))
  name.vb: RemoveRandomElement(Of T)(IList(Of T))
- uid: TetraCreations.Core.CollectionExtensions.ReverseLoop``1(IList{``0})
  commentId: M:TetraCreations.Core.CollectionExtensions.ReverseLoop``1(IList{``0})
  id: ReverseLoop``1(IList{``0})
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: ReverseLoop<T>(IList<T>)
  nameWithType: CollectionExtensions.ReverseLoop<T>(IList<T>)
  fullName: TetraCreations.Core.CollectionExtensions.ReverseLoop<T>(IList<T>)
  type: Method
  source:
    id: ReverseLoop
    path: ''
    startLine: 36339
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nLoop backwards, useful to delete an element from the list.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> ReverseLoop<T>(this IList<T> list)
    parameters:
    - id: list
      type: Global.IList{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: Global.IEnumerable{{T}}
      description: ''
    content.vb: Public Shared Function ReverseLoop(Of T)(list As IList(Of T)) As IEnumerable(Of T)
  overload: TetraCreations.Core.CollectionExtensions.ReverseLoop*
  nameWithType.vb: CollectionExtensions.ReverseLoop(Of T)(IList(Of T))
  fullName.vb: TetraCreations.Core.CollectionExtensions.ReverseLoop(Of T)(IList(Of T))
  name.vb: ReverseLoop(Of T)(IList(Of T))
- uid: TetraCreations.Core.CollectionExtensions.AddIfNotContains``1(ICollection{``0},``0)
  commentId: M:TetraCreations.Core.CollectionExtensions.AddIfNotContains``1(ICollection{``0},``0)
  id: AddIfNotContains``1(ICollection{``0},``0)
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: AddIfNotContains<T>(ICollection<T>, T)
  nameWithType: CollectionExtensions.AddIfNotContains<T>(ICollection<T>, T)
  fullName: TetraCreations.Core.CollectionExtensions.AddIfNotContains<T>(ICollection<T>, T)
  type: Method
  source:
    id: AddIfNotContains
    path: ''
    startLine: 36354
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nAdd the T value to the collection if it doesn&apos;t already exists inside\n"
  example: []
  syntax:
    content: public static bool AddIfNotContains<T>(this ICollection<T> collection, T value)
    parameters:
    - id: collection
      type: Global.ICollection{{T}}
      description: ''
    - id: value
      type: '{T}'
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function AddIfNotContains(Of T)(collection As ICollection(Of T), value As T) As Boolean
  overload: TetraCreations.Core.CollectionExtensions.AddIfNotContains*
  nameWithType.vb: CollectionExtensions.AddIfNotContains(Of T)(ICollection(Of T), T)
  fullName.vb: TetraCreations.Core.CollectionExtensions.AddIfNotContains(Of T)(ICollection(Of T), T)
  name.vb: AddIfNotContains(Of T)(ICollection(Of T), T)
- uid: TetraCreations.Core.CollectionExtensions.AddIf``1(ICollection{``0},``0,Func{``0,System.Boolean})
  commentId: M:TetraCreations.Core.CollectionExtensions.AddIf``1(ICollection{``0},``0,Func{``0,System.Boolean})
  id: AddIf``1(ICollection{``0},``0,Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: AddIf<T>(ICollection<T>, T, Func<T, bool>)
  nameWithType: CollectionExtensions.AddIf<T>(ICollection<T>, T, Func<T, bool>)
  fullName: TetraCreations.Core.CollectionExtensions.AddIf<T>(ICollection<T>, T, Func<T, bool>)
  type: Method
  source:
    id: AddIf
    path: ''
    startLine: 36373
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nAdd an element to the collection depending on a predicate function\n"
  example: []
  syntax:
    content: public static bool AddIf<T>(this ICollection<T> collection, T element, Func<T, bool> predicate)
    parameters:
    - id: collection
      type: Global.ICollection{{T}}
      description: ''
    - id: element
      type: '{T}'
      description: The element to add
    - id: predicate
      type: Global.Func{{T},System.Boolean}
      description: Predicate function needs to return true to add the element
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function AddIf(Of T)(collection As ICollection(Of T), element As T, predicate As Func(Of T, Boolean)) As Boolean
  overload: TetraCreations.Core.CollectionExtensions.AddIf*
  nameWithType.vb: CollectionExtensions.AddIf(Of T)(ICollection(Of T), T, Func(Of T, Boolean))
  fullName.vb: TetraCreations.Core.CollectionExtensions.AddIf(Of T)(ICollection(Of T), T, Func(Of T, Boolean))
  name.vb: AddIf(Of T)(ICollection(Of T), T, Func(Of T, Boolean))
- uid: TetraCreations.Core.CollectionExtensions.AddIfNotNull``1(ICollection{``0},``0)
  commentId: M:TetraCreations.Core.CollectionExtensions.AddIfNotNull``1(ICollection{``0},``0)
  id: AddIfNotNull``1(ICollection{``0},``0)
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: AddIfNotNull<T>(ICollection<T>, T)
  nameWithType: CollectionExtensions.AddIfNotNull<T>(ICollection<T>, T)
  fullName: TetraCreations.Core.CollectionExtensions.AddIfNotNull<T>(ICollection<T>, T)
  type: Method
  source:
    id: AddIfNotNull
    path: ''
    startLine: 36389
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nAdd the T element to the collection if it&apos;s not null\n"
  example: []
  syntax:
    content: public static bool AddIfNotNull<T>(this ICollection<T> collection, T element)
    parameters:
    - id: collection
      type: Global.ICollection{{T}}
      description: ''
    - id: element
      type: '{T}'
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function AddIfNotNull(Of T)(collection As ICollection(Of T), element As T) As Boolean
  overload: TetraCreations.Core.CollectionExtensions.AddIfNotNull*
  nameWithType.vb: CollectionExtensions.AddIfNotNull(Of T)(ICollection(Of T), T)
  fullName.vb: TetraCreations.Core.CollectionExtensions.AddIfNotNull(Of T)(ICollection(Of T), T)
  name.vb: AddIfNotNull(Of T)(ICollection(Of T), T)
- uid: TetraCreations.Core.CollectionExtensions.HasUniqueElements``1(ICollection{``0},IEqualityComparer{``0})
  commentId: M:TetraCreations.Core.CollectionExtensions.HasUniqueElements``1(ICollection{``0},IEqualityComparer{``0})
  id: HasUniqueElements``1(ICollection{``0},IEqualityComparer{``0})
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: HasUniqueElements<T>(ICollection<T>, IEqualityComparer<T>)
  nameWithType: CollectionExtensions.HasUniqueElements<T>(ICollection<T>, IEqualityComparer<T>)
  fullName: TetraCreations.Core.CollectionExtensions.HasUniqueElements<T>(ICollection<T>, IEqualityComparer<T>)
  type: Method
  source:
    id: HasUniqueElements
    path: ''
    startLine: 36404
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines if the collection contains only unique elements using a custom IEqualityComparer\n"
  example: []
  syntax:
    content: public static bool HasUniqueElements<T>(this ICollection<T> collection, IEqualityComparer<T> comparer)
    parameters:
    - id: collection
      type: Global.ICollection{{T}}
      description: ''
    - id: comparer
      type: Global.IEqualityComparer{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function HasUniqueElements(Of T)(collection As ICollection(Of T), comparer As IEqualityComparer(Of T)) As Boolean
  overload: TetraCreations.Core.CollectionExtensions.HasUniqueElements*
  nameWithType.vb: CollectionExtensions.HasUniqueElements(Of T)(ICollection(Of T), IEqualityComparer(Of T))
  fullName.vb: TetraCreations.Core.CollectionExtensions.HasUniqueElements(Of T)(ICollection(Of T), IEqualityComparer(Of T))
  name.vb: HasUniqueElements(Of T)(ICollection(Of T), IEqualityComparer(Of T))
- uid: TetraCreations.Core.CollectionExtensions.HasUniqueElements``1(ICollection{``0})
  commentId: M:TetraCreations.Core.CollectionExtensions.HasUniqueElements``1(ICollection{``0})
  id: HasUniqueElements``1(ICollection{``0})
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: HasUniqueElements<T>(ICollection<T>)
  nameWithType: CollectionExtensions.HasUniqueElements<T>(ICollection<T>)
  fullName: TetraCreations.Core.CollectionExtensions.HasUniqueElements<T>(ICollection<T>)
  type: Method
  source:
    id: HasUniqueElements
    path: ''
    startLine: 36415
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines if the collection contains only unique elements\n"
  example: []
  syntax:
    content: public static bool HasUniqueElements<T>(this ICollection<T> collection)
    parameters:
    - id: collection
      type: Global.ICollection{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function HasUniqueElements(Of T)(collection As ICollection(Of T)) As Boolean
  overload: TetraCreations.Core.CollectionExtensions.HasUniqueElements*
  nameWithType.vb: CollectionExtensions.HasUniqueElements(Of T)(ICollection(Of T))
  fullName.vb: TetraCreations.Core.CollectionExtensions.HasUniqueElements(Of T)(ICollection(Of T))
  name.vb: HasUniqueElements(Of T)(ICollection(Of T))
- uid: TetraCreations.Core.CollectionExtensions.IsNotNullOrEmpty``1(ICollection{``0})
  commentId: M:TetraCreations.Core.CollectionExtensions.IsNotNullOrEmpty``1(ICollection{``0})
  id: IsNotNullOrEmpty``1(ICollection{``0})
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: IsNotNullOrEmpty<T>(ICollection<T>)
  nameWithType: CollectionExtensions.IsNotNullOrEmpty<T>(ICollection<T>)
  fullName: TetraCreations.Core.CollectionExtensions.IsNotNullOrEmpty<T>(ICollection<T>)
  type: Method
  source:
    id: IsNotNullOrEmpty
    path: ''
    startLine: 36426
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines if the collection is not null or empty\n"
  example: []
  syntax:
    content: public static bool IsNotNullOrEmpty<T>(this ICollection<T> collection)
    parameters:
    - id: collection
      type: Global.ICollection{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsNotNullOrEmpty(Of T)(collection As ICollection(Of T)) As Boolean
  overload: TetraCreations.Core.CollectionExtensions.IsNotNullOrEmpty*
  nameWithType.vb: CollectionExtensions.IsNotNullOrEmpty(Of T)(ICollection(Of T))
  fullName.vb: TetraCreations.Core.CollectionExtensions.IsNotNullOrEmpty(Of T)(ICollection(Of T))
  name.vb: IsNotNullOrEmpty(Of T)(ICollection(Of T))
- uid: TetraCreations.Core.CollectionExtensions.IsNullOrEmpty``1(ICollection{``0})
  commentId: M:TetraCreations.Core.CollectionExtensions.IsNullOrEmpty``1(ICollection{``0})
  id: IsNullOrEmpty``1(ICollection{``0})
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty<T>(ICollection<T>)
  nameWithType: CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>)
  fullName: TetraCreations.Core.CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>)
  type: Method
  source:
    id: IsNullOrEmpty
    path: ''
    startLine: 36437
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines if the collection is null or empty\n"
  example: []
  syntax:
    content: public static bool IsNullOrEmpty<T>(this ICollection<T> collection)
    parameters:
    - id: collection
      type: Global.ICollection{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsNullOrEmpty(Of T)(collection As ICollection(Of T)) As Boolean
  overload: TetraCreations.Core.CollectionExtensions.IsNullOrEmpty*
  nameWithType.vb: CollectionExtensions.IsNullOrEmpty(Of T)(ICollection(Of T))
  fullName.vb: TetraCreations.Core.CollectionExtensions.IsNullOrEmpty(Of T)(ICollection(Of T))
  name.vb: IsNullOrEmpty(Of T)(ICollection(Of T))
- uid: TetraCreations.Core.CollectionExtensions.IsNotEmpty``1(ICollection{``0})
  commentId: M:TetraCreations.Core.CollectionExtensions.IsNotEmpty``1(ICollection{``0})
  id: IsNotEmpty``1(ICollection{``0})
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: IsNotEmpty<T>(ICollection<T>)
  nameWithType: CollectionExtensions.IsNotEmpty<T>(ICollection<T>)
  fullName: TetraCreations.Core.CollectionExtensions.IsNotEmpty<T>(ICollection<T>)
  type: Method
  source:
    id: IsNotEmpty
    path: ''
    startLine: 36448
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines if the collection is not empty\n"
  example: []
  syntax:
    content: public static bool IsNotEmpty<T>(this ICollection<T> collection)
    parameters:
    - id: collection
      type: Global.ICollection{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsNotEmpty(Of T)(collection As ICollection(Of T)) As Boolean
  overload: TetraCreations.Core.CollectionExtensions.IsNotEmpty*
  nameWithType.vb: CollectionExtensions.IsNotEmpty(Of T)(ICollection(Of T))
  fullName.vb: TetraCreations.Core.CollectionExtensions.IsNotEmpty(Of T)(ICollection(Of T))
  name.vb: IsNotEmpty(Of T)(ICollection(Of T))
- uid: TetraCreations.Core.CollectionExtensions.IsEmpty``1(ICollection{``0})
  commentId: M:TetraCreations.Core.CollectionExtensions.IsEmpty``1(ICollection{``0})
  id: IsEmpty``1(ICollection{``0})
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: IsEmpty<T>(ICollection<T>)
  nameWithType: CollectionExtensions.IsEmpty<T>(ICollection<T>)
  fullName: TetraCreations.Core.CollectionExtensions.IsEmpty<T>(ICollection<T>)
  type: Method
  source:
    id: IsEmpty
    path: ''
    startLine: 36459
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines if the collection is empty\n"
  example: []
  syntax:
    content: public static bool IsEmpty<T>(this ICollection<T> collection)
    parameters:
    - id: collection
      type: Global.ICollection{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsEmpty(Of T)(collection As ICollection(Of T)) As Boolean
  overload: TetraCreations.Core.CollectionExtensions.IsEmpty*
  nameWithType.vb: CollectionExtensions.IsEmpty(Of T)(ICollection(Of T))
  fullName.vb: TetraCreations.Core.CollectionExtensions.IsEmpty(Of T)(ICollection(Of T))
  name.vb: IsEmpty(Of T)(ICollection(Of T))
- uid: TetraCreations.Core.CollectionExtensions.Log``1(ICollection{``0})
  commentId: M:TetraCreations.Core.CollectionExtensions.Log``1(ICollection{``0})
  id: Log``1(ICollection{``0})
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: Log<T>(ICollection<T>)
  nameWithType: CollectionExtensions.Log<T>(ICollection<T>)
  fullName: TetraCreations.Core.CollectionExtensions.Log<T>(ICollection<T>)
  type: Method
  source:
    id: Log
    path: ''
    startLine: 36469
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDisplays the content of the Collection in the console\n"
  example: []
  syntax:
    content: public static void Log<T>(this ICollection<T> collection)
    parameters:
    - id: collection
      type: Global.ICollection{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    content.vb: Public Shared Sub Log(Of T)(collection As ICollection(Of T))
  overload: TetraCreations.Core.CollectionExtensions.Log*
  nameWithType.vb: CollectionExtensions.Log(Of T)(ICollection(Of T))
  fullName.vb: TetraCreations.Core.CollectionExtensions.Log(Of T)(ICollection(Of T))
  name.vb: Log(Of T)(ICollection(Of T))
- uid: TetraCreations.Core.CollectionExtensions.AsString``1(IList{``0},System.String)
  commentId: M:TetraCreations.Core.CollectionExtensions.AsString``1(IList{``0},System.String)
  id: AsString``1(IList{``0},System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.CollectionExtensions
  langs:
  - csharp
  - vb
  name: AsString<T>(IList<T>, string)
  nameWithType: CollectionExtensions.AsString<T>(IList<T>, string)
  fullName: TetraCreations.Core.CollectionExtensions.AsString<T>(IList<T>, string)
  type: Method
  source:
    id: AsString
    path: ''
    startLine: 36486
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturn the list content as a string\n"
  example: []
  syntax:
    content: public static string AsString<T>(this IList<T> list, string separator = ", ")
    parameters:
    - id: list
      type: Global.IList{{T}}
      description: ''
    - id: separator
      type: System.String
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function AsString(Of T)(list As IList(Of T), separator As String = ", ") As String
  overload: TetraCreations.Core.CollectionExtensions.AsString*
  nameWithType.vb: CollectionExtensions.AsString(Of T)(IList(Of T), String)
  fullName.vb: TetraCreations.Core.CollectionExtensions.AsString(Of T)(IList(Of T), String)
  name.vb: AsString(Of T)(IList(Of T), String)
references:
- uid: TetraCreations.Core
  commentId: N:TetraCreations.Core
  name: TetraCreations.Core
  nameWithType: TetraCreations.Core
  fullName: TetraCreations.Core
  spec.csharp:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  spec.vb:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TetraCreations.Core.CollectionExtensions.IndexInRange*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.IndexInRange
  name: IndexInRange
  nameWithType: CollectionExtensions.IndexInRange
  fullName: TetraCreations.Core.CollectionExtensions.IndexInRange
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TetraCreations.Core.CollectionExtensions.GetOrDefault*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.GetOrDefault
  name: GetOrDefault
  nameWithType: CollectionExtensions.GetOrDefault
  fullName: TetraCreations.Core.CollectionExtensions.GetOrDefault
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TetraCreations.Core.CollectionExtensions.LogArray*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.LogArray
  name: LogArray
  nameWithType: CollectionExtensions.LogArray
  fullName: TetraCreations.Core.CollectionExtensions.LogArray
- uid: TetraCreations.Core.CollectionExtensions.WithoutDuplicates*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.WithoutDuplicates
  name: WithoutDuplicates
  nameWithType: CollectionExtensions.WithoutDuplicates
  fullName: TetraCreations.Core.CollectionExtensions.WithoutDuplicates
- uid: Global.ICollection{{T}}
  commentId: '!:Global.ICollection{``0}'
  definition: Global.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: Global.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.List{{T}}
  commentId: '!:Global.List{``0}'
  definition: Global.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.ICollection`1
  isExternal: true
  name: ICollection<>
  nameWithType: ICollection<>
  fullName: ICollection<>
  nameWithType.vb: ICollection(Of )
  fullName.vb: ICollection(Of )
  name.vb: ICollection(Of )
  spec.csharp:
  - uid: Global.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.CollectionExtensions.Shuffle*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.Shuffle
  name: Shuffle
  nameWithType: CollectionExtensions.Shuffle
  fullName: TetraCreations.Core.CollectionExtensions.Shuffle
- uid: Global.IList{{T}}
  commentId: '!:Global.IList{``0}'
  definition: Global.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: Global.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: Global.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.CollectionExtensions.GetRandomElement*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.GetRandomElement
  name: GetRandomElement
  nameWithType: CollectionExtensions.GetRandomElement
  fullName: TetraCreations.Core.CollectionExtensions.GetRandomElement
- uid: TetraCreations.Core.CollectionExtensions.RemoveRandomElement*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.RemoveRandomElement
  name: RemoveRandomElement
  nameWithType: CollectionExtensions.RemoveRandomElement
  fullName: TetraCreations.Core.CollectionExtensions.RemoveRandomElement
- uid: TetraCreations.Core.CollectionExtensions.ReverseLoop*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.ReverseLoop
  name: ReverseLoop
  nameWithType: CollectionExtensions.ReverseLoop
  fullName: TetraCreations.Core.CollectionExtensions.ReverseLoop
- uid: Global.IEnumerable{{T}}
  commentId: '!:Global.IEnumerable{``0}'
  definition: Global.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.CollectionExtensions.AddIfNotContains*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.AddIfNotContains
  name: AddIfNotContains
  nameWithType: CollectionExtensions.AddIfNotContains
  fullName: TetraCreations.Core.CollectionExtensions.AddIfNotContains
- uid: TetraCreations.Core.CollectionExtensions.AddIf*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.AddIf
  name: AddIf
  nameWithType: CollectionExtensions.AddIf
  fullName: TetraCreations.Core.CollectionExtensions.AddIf
- uid: Global.Func{{T},System.Boolean}
  commentId: '!:Global.Func{``0,System.Boolean}'
  definition: Global.Func`2
  name: Func<T, bool>
  nameWithType: Func<T, bool>
  fullName: Func<T, bool>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: Func(Of T, Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.CollectionExtensions.AddIfNotNull*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.AddIfNotNull
  name: AddIfNotNull
  nameWithType: CollectionExtensions.AddIfNotNull
  fullName: TetraCreations.Core.CollectionExtensions.AddIfNotNull
- uid: TetraCreations.Core.CollectionExtensions.HasUniqueElements*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.HasUniqueElements
  name: HasUniqueElements
  nameWithType: CollectionExtensions.HasUniqueElements
  fullName: TetraCreations.Core.CollectionExtensions.HasUniqueElements
- uid: Global.IEqualityComparer{{T}}
  commentId: '!:Global.IEqualityComparer{``0}'
  definition: Global.IEqualityComparer`1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: Global.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.IEqualityComparer`1
  commentId: '!:Global.IEqualityComparer`1'
  isExternal: true
  name: IEqualityComparer<>
  nameWithType: IEqualityComparer<>
  fullName: IEqualityComparer<>
  nameWithType.vb: IEqualityComparer(Of )
  fullName.vb: IEqualityComparer(Of )
  name.vb: IEqualityComparer(Of )
  spec.csharp:
  - uid: Global.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.CollectionExtensions.IsNotNullOrEmpty*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.IsNotNullOrEmpty
  name: IsNotNullOrEmpty
  nameWithType: CollectionExtensions.IsNotNullOrEmpty
  fullName: TetraCreations.Core.CollectionExtensions.IsNotNullOrEmpty
- uid: TetraCreations.Core.CollectionExtensions.IsNullOrEmpty*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.IsNullOrEmpty
  name: IsNullOrEmpty
  nameWithType: CollectionExtensions.IsNullOrEmpty
  fullName: TetraCreations.Core.CollectionExtensions.IsNullOrEmpty
- uid: TetraCreations.Core.CollectionExtensions.IsNotEmpty*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.IsNotEmpty
  name: IsNotEmpty
  nameWithType: CollectionExtensions.IsNotEmpty
  fullName: TetraCreations.Core.CollectionExtensions.IsNotEmpty
- uid: TetraCreations.Core.CollectionExtensions.IsEmpty*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.IsEmpty
  name: IsEmpty
  nameWithType: CollectionExtensions.IsEmpty
  fullName: TetraCreations.Core.CollectionExtensions.IsEmpty
- uid: TetraCreations.Core.CollectionExtensions.Log*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.Log
  name: Log
  nameWithType: CollectionExtensions.Log
  fullName: TetraCreations.Core.CollectionExtensions.Log
- uid: TetraCreations.Core.CollectionExtensions.AsString*
  commentId: Overload:TetraCreations.Core.CollectionExtensions.AsString
  name: AsString
  nameWithType: CollectionExtensions.AsString
  fullName: TetraCreations.Core.CollectionExtensions.AsString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
