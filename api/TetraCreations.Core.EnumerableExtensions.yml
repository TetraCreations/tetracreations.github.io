### YamlMime:ManagedReference
items:
- uid: TetraCreations.Core.EnumerableExtensions
  commentId: T:TetraCreations.Core.EnumerableExtensions
  id: EnumerableExtensions
  parent: TetraCreations.Core
  children:
  - TetraCreations.Core.EnumerableExtensions.ChunkBy``1(IList{``0},System.Int32)
  - TetraCreations.Core.EnumerableExtensions.DistinctBy``2(IEnumerable{``0},Func{``0,``1})
  - TetraCreations.Core.EnumerableExtensions.IsNullOrEmpty(IEnumerable)
  - TetraCreations.Core.EnumerableExtensions.RemoveDuplicates``1(ICollection{``0},Func{``0,System.Int32})
  - TetraCreations.Core.EnumerableExtensions.ToNonNullList``1(IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: TetraCreations.Core.EnumerableExtensions
  type: Class
  source:
    id: EnumerableExtensions
    path: ''
    startLine: 36861
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  syntax:
    content: public static class EnumerableExtensions
    content.vb: Public Module EnumerableExtensions
  inheritance:
  - System.Object
- uid: TetraCreations.Core.EnumerableExtensions.ToNonNullList``1(IEnumerable{``0})
  commentId: M:TetraCreations.Core.EnumerableExtensions.ToNonNullList``1(IEnumerable{``0})
  id: ToNonNullList``1(IEnumerable{``0})
  isExtensionMethod: true
  parent: TetraCreations.Core.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ToNonNullList<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.ToNonNullList<T>(IEnumerable<T>)
  fullName: TetraCreations.Core.EnumerableExtensions.ToNonNullList<T>(IEnumerable<T>)
  type: Method
  source:
    id: ToNonNullList
    path: ''
    startLine: 36869
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturns an empty list if it is null.\n"
  example: []
  syntax:
    content: public static List<T> ToNonNullList<T>(this IEnumerable<T> enumerable)
    parameters:
    - id: enumerable
      type: Global.IEnumerable{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: Global.List{{T}}
      description: ''
    content.vb: Public Shared Function ToNonNullList(Of T)(enumerable As IEnumerable(Of T)) As List(Of T)
  overload: TetraCreations.Core.EnumerableExtensions.ToNonNullList*
  nameWithType.vb: EnumerableExtensions.ToNonNullList(Of T)(IEnumerable(Of T))
  fullName.vb: TetraCreations.Core.EnumerableExtensions.ToNonNullList(Of T)(IEnumerable(Of T))
  name.vb: ToNonNullList(Of T)(IEnumerable(Of T))
- uid: TetraCreations.Core.EnumerableExtensions.IsNullOrEmpty(IEnumerable)
  commentId: M:TetraCreations.Core.EnumerableExtensions.IsNullOrEmpty(IEnumerable)
  id: IsNullOrEmpty(IEnumerable)
  isExtensionMethod: true
  parent: TetraCreations.Core.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty(IEnumerable)
  nameWithType: EnumerableExtensions.IsNullOrEmpty(IEnumerable)
  fullName: TetraCreations.Core.EnumerableExtensions.IsNullOrEmpty(IEnumerable)
  type: Method
  source:
    id: IsNullOrEmpty
    path: ''
    startLine: 36879
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturns true if the IEnumerable is empty or null\n"
  example: []
  syntax:
    content: public static bool IsNullOrEmpty(this IEnumerable enumerable)
    parameters:
    - id: enumerable
      type: Global.IEnumerable
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsNullOrEmpty(enumerable As IEnumerable) As Boolean
  overload: TetraCreations.Core.EnumerableExtensions.IsNullOrEmpty*
- uid: TetraCreations.Core.EnumerableExtensions.RemoveDuplicates``1(ICollection{``0},Func{``0,System.Int32})
  commentId: M:TetraCreations.Core.EnumerableExtensions.RemoveDuplicates``1(ICollection{``0},Func{``0,System.Int32})
  id: RemoveDuplicates``1(ICollection{``0},Func{``0,System.Int32})
  isExtensionMethod: true
  parent: TetraCreations.Core.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: RemoveDuplicates<T>(ICollection<T>, Func<T, int>)
  nameWithType: EnumerableExtensions.RemoveDuplicates<T>(ICollection<T>, Func<T, int>)
  fullName: TetraCreations.Core.EnumerableExtensions.RemoveDuplicates<T>(ICollection<T>, Func<T, int>)
  type: Method
  source:
    id: RemoveDuplicates
    path: ''
    startLine: 36891
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  syntax:
    content: public static IEnumerable<T> RemoveDuplicates<T>(this ICollection<T> list, Func<T, int> predicate)
    parameters:
    - id: list
      type: Global.ICollection{{T}}
    - id: predicate
      type: Global.Func{{T},System.Int32}
    typeParameters:
    - id: T
    return:
      type: Global.IEnumerable{{T}}
    content.vb: Public Shared Function RemoveDuplicates(Of T)(list As ICollection(Of T), predicate As Func(Of T, Integer)) As IEnumerable(Of T)
  overload: TetraCreations.Core.EnumerableExtensions.RemoveDuplicates*
  nameWithType.vb: EnumerableExtensions.RemoveDuplicates(Of T)(ICollection(Of T), Func(Of T, Integer))
  fullName.vb: TetraCreations.Core.EnumerableExtensions.RemoveDuplicates(Of T)(ICollection(Of T), Func(Of T, Integer))
  name.vb: RemoveDuplicates(Of T)(ICollection(Of T), Func(Of T, Integer))
- uid: TetraCreations.Core.EnumerableExtensions.ChunkBy``1(IList{``0},System.Int32)
  commentId: M:TetraCreations.Core.EnumerableExtensions.ChunkBy``1(IList{``0},System.Int32)
  id: ChunkBy``1(IList{``0},System.Int32)
  isExtensionMethod: true
  parent: TetraCreations.Core.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ChunkBy<T>(IList<T>, int)
  nameWithType: EnumerableExtensions.ChunkBy<T>(IList<T>, int)
  fullName: TetraCreations.Core.EnumerableExtensions.ChunkBy<T>(IList<T>, int)
  type: Method
  source:
    id: ChunkBy
    path: ''
    startLine: 36913
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nChunk IEnumerable by size\n"
  example: []
  syntax:
    content: public static IEnumerable<IEnumerable<T>> ChunkBy<T>(this IList<T> source, int chunkSize)
    parameters:
    - id: source
      type: Global.IList{{T}}
      description: ''
    - id: chunkSize
      type: System.Int32
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: Global.IEnumerable{IEnumerable{{T}}}
      description: ''
    content.vb: Public Shared Function ChunkBy(Of T)(source As IList(Of T), chunkSize As Integer) As IEnumerable(Of IEnumerable(Of T))
  overload: TetraCreations.Core.EnumerableExtensions.ChunkBy*
  nameWithType.vb: EnumerableExtensions.ChunkBy(Of T)(IList(Of T), Integer)
  fullName.vb: TetraCreations.Core.EnumerableExtensions.ChunkBy(Of T)(IList(Of T), Integer)
  name.vb: ChunkBy(Of T)(IList(Of T), Integer)
- uid: TetraCreations.Core.EnumerableExtensions.DistinctBy``2(IEnumerable{``0},Func{``0,``1})
  commentId: M:TetraCreations.Core.EnumerableExtensions.DistinctBy``2(IEnumerable{``0},Func{``0,``1})
  id: DistinctBy``2(IEnumerable{``0},Func{``0,``1})
  isExtensionMethod: true
  parent: TetraCreations.Core.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  nameWithType: EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  fullName: TetraCreations.Core.EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  type: Method
  source:
    id: DistinctBy
    path: ''
    startLine: 36931
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nGroup elements using a predicate function\n"
  example: []
  syntax:
    content: public static IEnumerable<T> DistinctBy<T, TKey>(this IEnumerable<T> enumerable, Func<T, TKey> keySelector)
    parameters:
    - id: enumerable
      type: Global.IEnumerable{{T}}
      description: ''
    - id: keySelector
      type: Global.Func{{T},{TKey}}
      description: The predicate for the group by
    typeParameters:
    - id: T
      description: ''
    - id: TKey
      description: ''
    return:
      type: Global.IEnumerable{{T}}
      description: ''
    content.vb: Public Shared Function DistinctBy(Of T, TKey)(enumerable As IEnumerable(Of T), keySelector As Func(Of T, TKey)) As IEnumerable(Of T)
  overload: TetraCreations.Core.EnumerableExtensions.DistinctBy*
  nameWithType.vb: EnumerableExtensions.DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  fullName.vb: TetraCreations.Core.EnumerableExtensions.DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  name.vb: DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
references:
- uid: TetraCreations.Core
  commentId: N:TetraCreations.Core
  name: TetraCreations.Core
  nameWithType: TetraCreations.Core
  fullName: TetraCreations.Core
  spec.csharp:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  spec.vb:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TetraCreations.Core.EnumerableExtensions.ToNonNullList*
  commentId: Overload:TetraCreations.Core.EnumerableExtensions.ToNonNullList
  name: ToNonNullList
  nameWithType: EnumerableExtensions.ToNonNullList
  fullName: TetraCreations.Core.EnumerableExtensions.ToNonNullList
- uid: Global.IEnumerable{{T}}
  commentId: '!:Global.IEnumerable{``0}'
  definition: Global.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.List{{T}}
  commentId: '!:Global.List{``0}'
  definition: Global.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.EnumerableExtensions.IsNullOrEmpty*
  commentId: Overload:TetraCreations.Core.EnumerableExtensions.IsNullOrEmpty
  name: IsNullOrEmpty
  nameWithType: EnumerableExtensions.IsNullOrEmpty
  fullName: TetraCreations.Core.EnumerableExtensions.IsNullOrEmpty
- uid: Global.IEnumerable
  commentId: '!:Global.IEnumerable'
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: IEnumerable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TetraCreations.Core.EnumerableExtensions.RemoveDuplicates*
  commentId: Overload:TetraCreations.Core.EnumerableExtensions.RemoveDuplicates
  name: RemoveDuplicates
  nameWithType: EnumerableExtensions.RemoveDuplicates
  fullName: TetraCreations.Core.EnumerableExtensions.RemoveDuplicates
- uid: Global.ICollection{{T}}
  commentId: '!:Global.ICollection{``0}'
  definition: Global.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: Global.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.Func{{T},System.Int32}
  commentId: '!:Global.Func{``0,System.Int32}'
  definition: Global.Func`2
  name: Func<T, int>
  nameWithType: Func<T, int>
  fullName: Func<T, int>
  nameWithType.vb: Func(Of T, Integer)
  fullName.vb: Func(Of T, Integer)
  name.vb: Func(Of T, Integer)
  spec.csharp:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: Global.ICollection`1
  isExternal: true
  name: ICollection<>
  nameWithType: ICollection<>
  fullName: ICollection<>
  nameWithType.vb: ICollection(Of )
  fullName.vb: ICollection(Of )
  name.vb: ICollection(Of )
  spec.csharp:
  - uid: Global.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: Global.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.EnumerableExtensions.ChunkBy*
  commentId: Overload:TetraCreations.Core.EnumerableExtensions.ChunkBy
  name: ChunkBy
  nameWithType: EnumerableExtensions.ChunkBy
  fullName: TetraCreations.Core.EnumerableExtensions.ChunkBy
- uid: Global.IList{{T}}
  commentId: '!:Global.IList{``0}'
  definition: Global.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: Global.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.IEnumerable{IEnumerable{{T}}}
  commentId: '!:Global.IEnumerable{IEnumerable{``0}}'
  definition: Global.IEnumerable`1
  name: IEnumerable<IEnumerable<T>>
  nameWithType: IEnumerable<IEnumerable<T>>
  fullName: IEnumerable<IEnumerable<T>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of T))
  fullName.vb: IEnumerable(Of IEnumerable(Of T))
  name.vb: IEnumerable(Of IEnumerable(Of T))
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Global.IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: Global.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.EnumerableExtensions.DistinctBy*
  commentId: Overload:TetraCreations.Core.EnumerableExtensions.DistinctBy
  name: DistinctBy
  nameWithType: EnumerableExtensions.DistinctBy
  fullName: TetraCreations.Core.EnumerableExtensions.DistinctBy
- uid: Global.Func{{T},{TKey}}
  commentId: '!:Global.Func{``0,``1}'
  definition: Global.Func`2
  name: Func<T, TKey>
  nameWithType: Func<T, TKey>
  fullName: Func<T, TKey>
  nameWithType.vb: Func(Of T, TKey)
  fullName.vb: Func(Of T, TKey)
  name.vb: Func(Of T, TKey)
  spec.csharp:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
