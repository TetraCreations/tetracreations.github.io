### YamlMime:ManagedReference
items:
- uid: TetraCreations.Core.Editor.PathReferenceExtensions
  commentId: T:TetraCreations.Core.Editor.PathReferenceExtensions
  id: PathReferenceExtensions
  parent: TetraCreations.Core.Editor
  children:
  - TetraCreations.Core.Editor.PathReferenceExtensions.AssetExist``1(PathReference,System.String)
  - TetraCreations.Core.Editor.PathReferenceExtensions.CreateAsset(PathReference,UnityEngine.Object,System.Boolean)
  - TetraCreations.Core.Editor.PathReferenceExtensions.DeleteAssets``1(PathReference,System.Boolean,Func{``0,System.Boolean})
  - TetraCreations.Core.Editor.PathReferenceExtensions.GetAsset``1(PathReference,System.String)
  - TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets``1(PathReference,Func{``0,System.Boolean})
  - TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets``1(PathReference)
  - TetraCreations.Core.Editor.PathReferenceExtensions.GetAssetsCount``1(PathReference)
  langs:
  - csharp
  - vb
  name: PathReferenceExtensions
  nameWithType: PathReferenceExtensions
  fullName: TetraCreations.Core.Editor.PathReferenceExtensions
  type: Class
  source:
    id: PathReferenceExtensions
    path: ''
    startLine: 35794
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Editor
  syntax:
    content: public static class PathReferenceExtensions
    content.vb: Public Module PathReferenceExtensions
  inheritance:
  - System.Object
- uid: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssetsCount``1(PathReference)
  commentId: M:TetraCreations.Core.Editor.PathReferenceExtensions.GetAssetsCount``1(PathReference)
  id: GetAssetsCount``1(PathReference)
  isExtensionMethod: true
  parent: TetraCreations.Core.Editor.PathReferenceExtensions
  langs:
  - csharp
  - vb
  name: GetAssetsCount<T>(PathReference)
  nameWithType: PathReferenceExtensions.GetAssetsCount<T>(PathReference)
  fullName: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssetsCount<T>(PathReference)
  type: Method
  source:
    id: GetAssetsCount
    path: ''
    startLine: 35805
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Editor
  summary: "\nCounts all assets of the specified type inside the folder.\n"
  example: []
  syntax:
    content: 'public static int GetAssetsCount<T>(this PathReference pathReference) where T : UnityEngine.Object'
    parameters:
    - id: pathReference
      type: Global.PathReference
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Shared Function GetAssetsCount(Of T As UnityEngine.Object)(pathReference As PathReference) As Integer
  overload: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssetsCount*
  nameWithType.vb: PathReferenceExtensions.GetAssetsCount(Of T)(PathReference)
  fullName.vb: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssetsCount(Of T)(PathReference)
  name.vb: GetAssetsCount(Of T)(PathReference)
- uid: TetraCreations.Core.Editor.PathReferenceExtensions.GetAsset``1(PathReference,System.String)
  commentId: M:TetraCreations.Core.Editor.PathReferenceExtensions.GetAsset``1(PathReference,System.String)
  id: GetAsset``1(PathReference,System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.Editor.PathReferenceExtensions
  langs:
  - csharp
  - vb
  name: GetAsset<T>(PathReference, string)
  nameWithType: PathReferenceExtensions.GetAsset<T>(PathReference, string)
  fullName: TetraCreations.Core.Editor.PathReferenceExtensions.GetAsset<T>(PathReference, string)
  type: Method
  source:
    id: GetAsset
    path: ''
    startLine: 35820
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Editor
  summary: "\nReturns an asset of the specified type by its name inside the folder.\n"
  example: []
  syntax:
    content: 'public static T GetAsset<T>(this PathReference pathReference, string assetName) where T : UnityEngine.Object'
    parameters:
    - id: pathReference
      type: Global.PathReference
      description: ''
    - id: assetName
      type: System.String
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Shared Function GetAsset(Of T As UnityEngine.Object)(pathReference As PathReference, assetName As String) As T
  overload: TetraCreations.Core.Editor.PathReferenceExtensions.GetAsset*
  nameWithType.vb: PathReferenceExtensions.GetAsset(Of T)(PathReference, String)
  fullName.vb: TetraCreations.Core.Editor.PathReferenceExtensions.GetAsset(Of T)(PathReference, String)
  name.vb: GetAsset(Of T)(PathReference, String)
- uid: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets``1(PathReference)
  commentId: M:TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets``1(PathReference)
  id: GetAssets``1(PathReference)
  isExtensionMethod: true
  parent: TetraCreations.Core.Editor.PathReferenceExtensions
  langs:
  - csharp
  - vb
  name: GetAssets<T>(PathReference)
  nameWithType: PathReferenceExtensions.GetAssets<T>(PathReference)
  fullName: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets<T>(PathReference)
  type: Method
  source:
    id: GetAssets
    path: ''
    startLine: 35833
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Editor
  summary: "\nReturns a list of all assets of the specified type inside the folder.\n"
  example: []
  syntax:
    content: 'public static List<T> GetAssets<T>(this PathReference pathReference) where T : UnityEngine.Object'
    parameters:
    - id: pathReference
      type: Global.PathReference
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: Global.List{{T}}
      description: ''
    content.vb: Public Shared Function GetAssets(Of T As UnityEngine.Object)(pathReference As PathReference) As List(Of T)
  overload: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets*
  nameWithType.vb: PathReferenceExtensions.GetAssets(Of T)(PathReference)
  fullName.vb: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets(Of T)(PathReference)
  name.vb: GetAssets(Of T)(PathReference)
- uid: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets``1(PathReference,Func{``0,System.Boolean})
  commentId: M:TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets``1(PathReference,Func{``0,System.Boolean})
  id: GetAssets``1(PathReference,Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: TetraCreations.Core.Editor.PathReferenceExtensions
  langs:
  - csharp
  - vb
  name: GetAssets<T>(PathReference, Func<T, bool>)
  nameWithType: PathReferenceExtensions.GetAssets<T>(PathReference, Func<T, bool>)
  fullName: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets<T>(PathReference, Func<T, bool>)
  type: Method
  source:
    id: GetAssets
    path: ''
    startLine: 35847
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Editor
  summary: "\nReturn a list of all assets matching the predicate inside the folder.\n"
  example: []
  syntax:
    content: 'public static List<T> GetAssets<T>(this PathReference pathReference, Func<T, bool> predicate) where T : UnityEngine.Object'
    parameters:
    - id: pathReference
      type: Global.PathReference
      description: ''
    - id: predicate
      type: Global.Func{{T},System.Boolean}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: Global.List{{T}}
      description: ''
    content.vb: Public Shared Function GetAssets(Of T As UnityEngine.Object)(pathReference As PathReference, predicate As Func(Of T, Boolean)) As List(Of T)
  overload: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets*
  nameWithType.vb: PathReferenceExtensions.GetAssets(Of T)(PathReference, Func(Of T, Boolean))
  fullName.vb: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets(Of T)(PathReference, Func(Of T, Boolean))
  name.vb: GetAssets(Of T)(PathReference, Func(Of T, Boolean))
- uid: TetraCreations.Core.Editor.PathReferenceExtensions.DeleteAssets``1(PathReference,System.Boolean,Func{``0,System.Boolean})
  commentId: M:TetraCreations.Core.Editor.PathReferenceExtensions.DeleteAssets``1(PathReference,System.Boolean,Func{``0,System.Boolean})
  id: DeleteAssets``1(PathReference,System.Boolean,Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: TetraCreations.Core.Editor.PathReferenceExtensions
  langs:
  - csharp
  - vb
  name: DeleteAssets<T>(PathReference, bool, Func<T, bool>)
  nameWithType: PathReferenceExtensions.DeleteAssets<T>(PathReference, bool, Func<T, bool>)
  fullName: TetraCreations.Core.Editor.PathReferenceExtensions.DeleteAssets<T>(PathReference, bool, Func<T, bool>)
  type: Method
  source:
    id: DeleteAssets
    path: ''
    startLine: 35862
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Editor
  summary: "\nDelete every assets of the specified type inside the folder.\n"
  example: []
  syntax:
    content: 'public static bool DeleteAssets<T>(this PathReference pathReference, bool withConfirm = true, Func<T, bool> predicate = null) where T : UnityEngine.Object'
    parameters:
    - id: pathReference
      type: Global.PathReference
      description: ''
    - id: withConfirm
      type: System.Boolean
      description: If it open a Dialog box to confirm the suppression
    - id: predicate
      type: Global.Func{{T},System.Boolean}
      description: Used to delete asset matching the predicate function (Optional)
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function DeleteAssets(Of T As UnityEngine.Object)(pathReference As PathReference, withConfirm As Boolean = True, predicate As Func(Of T, Boolean) = Nothing) As Boolean
  overload: TetraCreations.Core.Editor.PathReferenceExtensions.DeleteAssets*
  nameWithType.vb: PathReferenceExtensions.DeleteAssets(Of T)(PathReference, Boolean, Func(Of T, Boolean))
  fullName.vb: TetraCreations.Core.Editor.PathReferenceExtensions.DeleteAssets(Of T)(PathReference, Boolean, Func(Of T, Boolean))
  name.vb: DeleteAssets(Of T)(PathReference, Boolean, Func(Of T, Boolean))
- uid: TetraCreations.Core.Editor.PathReferenceExtensions.AssetExist``1(PathReference,System.String)
  commentId: M:TetraCreations.Core.Editor.PathReferenceExtensions.AssetExist``1(PathReference,System.String)
  id: AssetExist``1(PathReference,System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.Editor.PathReferenceExtensions
  langs:
  - csharp
  - vb
  name: AssetExist<T>(PathReference, string)
  nameWithType: PathReferenceExtensions.AssetExist<T>(PathReference, string)
  fullName: TetraCreations.Core.Editor.PathReferenceExtensions.AssetExist<T>(PathReference, string)
  type: Method
  source:
    id: AssetExist
    path: ''
    startLine: 35894
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Editor
  summary: "\nDetermine if an asset exist inside the folder.\n"
  example: []
  syntax:
    content: 'public static bool AssetExist<T>(this PathReference pathReference, string assetName) where T : UnityEngine.Object'
    parameters:
    - id: pathReference
      type: Global.PathReference
    - id: assetName
      type: System.String
      description: The asset name to search
    typeParameters:
    - id: T
      description: Object type
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function AssetExist(Of T As UnityEngine.Object)(pathReference As PathReference, assetName As String) As Boolean
  overload: TetraCreations.Core.Editor.PathReferenceExtensions.AssetExist*
  nameWithType.vb: PathReferenceExtensions.AssetExist(Of T)(PathReference, String)
  fullName.vb: TetraCreations.Core.Editor.PathReferenceExtensions.AssetExist(Of T)(PathReference, String)
  name.vb: AssetExist(Of T)(PathReference, String)
- uid: TetraCreations.Core.Editor.PathReferenceExtensions.CreateAsset(PathReference,UnityEngine.Object,System.Boolean)
  commentId: M:TetraCreations.Core.Editor.PathReferenceExtensions.CreateAsset(PathReference,UnityEngine.Object,System.Boolean)
  id: CreateAsset(PathReference,UnityEngine.Object,System.Boolean)
  isExtensionMethod: true
  parent: TetraCreations.Core.Editor.PathReferenceExtensions
  langs:
  - csharp
  - vb
  name: CreateAsset(PathReference, Object, bool)
  nameWithType: PathReferenceExtensions.CreateAsset(PathReference, UnityEngine.Object, bool)
  fullName: TetraCreations.Core.Editor.PathReferenceExtensions.CreateAsset(PathReference, UnityEngine.Object, bool)
  type: Method
  source:
    id: CreateAsset
    path: ''
    startLine: 35906
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Editor
  summary: "\nCreate an asset inside the folder, Debug.Log if it was successful or not.\n"
  example: []
  syntax:
    content: public static bool CreateAsset(this PathReference pathReference, UnityEngine.Object asset, bool debug = true)
    parameters:
    - id: pathReference
      type: Global.PathReference
      description: Folder path reference
    - id: asset
      type: Global.UnityEngine.Object
      description: The asset to create
    - id: debug
      type: System.Boolean
      description: If we want to Debug.Log issues during the asset creation
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function CreateAsset(pathReference As PathReference, asset As UnityEngine.Object, debug As Boolean = True) As Boolean
  overload: TetraCreations.Core.Editor.PathReferenceExtensions.CreateAsset*
  nameWithType.vb: PathReferenceExtensions.CreateAsset(PathReference, UnityEngine.Object, Boolean)
  fullName.vb: TetraCreations.Core.Editor.PathReferenceExtensions.CreateAsset(PathReference, UnityEngine.Object, Boolean)
  name.vb: CreateAsset(PathReference, Object, Boolean)
references:
- uid: TetraCreations.Core.Editor
  commentId: N:TetraCreations.Core.Editor
  name: TetraCreations.Core.Editor
  nameWithType: TetraCreations.Core.Editor
  fullName: TetraCreations.Core.Editor
  spec.csharp:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  - name: .
  - uid: TetraCreations.Core.Editor
    name: Editor
  spec.vb:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  - name: .
  - uid: TetraCreations.Core.Editor
    name: Editor
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssetsCount*
  commentId: Overload:TetraCreations.Core.Editor.PathReferenceExtensions.GetAssetsCount
  name: GetAssetsCount
  nameWithType: PathReferenceExtensions.GetAssetsCount
  fullName: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssetsCount
- uid: Global.PathReference
  isExternal: true
  name: PathReference
  nameWithType: PathReference
  fullName: PathReference
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TetraCreations.Core.Editor.PathReferenceExtensions.GetAsset*
  commentId: Overload:TetraCreations.Core.Editor.PathReferenceExtensions.GetAsset
  name: GetAsset
  nameWithType: PathReferenceExtensions.GetAsset
  fullName: TetraCreations.Core.Editor.PathReferenceExtensions.GetAsset
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets*
  commentId: Overload:TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets
  name: GetAssets
  nameWithType: PathReferenceExtensions.GetAssets
  fullName: TetraCreations.Core.Editor.PathReferenceExtensions.GetAssets
- uid: Global.List{{T}}
  commentId: '!:Global.List{``0}'
  definition: Global.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: Global.Func{{T},System.Boolean}
  commentId: '!:Global.Func{``0,System.Boolean}'
  definition: Global.Func`2
  name: Func<T, bool>
  nameWithType: Func<T, bool>
  fullName: Func<T, bool>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: Func(Of T, Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.Editor.PathReferenceExtensions.DeleteAssets*
  commentId: Overload:TetraCreations.Core.Editor.PathReferenceExtensions.DeleteAssets
  name: DeleteAssets
  nameWithType: PathReferenceExtensions.DeleteAssets
  fullName: TetraCreations.Core.Editor.PathReferenceExtensions.DeleteAssets
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TetraCreations.Core.Editor.PathReferenceExtensions.AssetExist*
  commentId: Overload:TetraCreations.Core.Editor.PathReferenceExtensions.AssetExist
  name: AssetExist
  nameWithType: PathReferenceExtensions.AssetExist
  fullName: TetraCreations.Core.Editor.PathReferenceExtensions.AssetExist
- uid: TetraCreations.Core.Editor.PathReferenceExtensions.CreateAsset*
  commentId: Overload:TetraCreations.Core.Editor.PathReferenceExtensions.CreateAsset
  name: CreateAsset
  nameWithType: PathReferenceExtensions.CreateAsset
  fullName: TetraCreations.Core.Editor.PathReferenceExtensions.CreateAsset
- uid: Global.UnityEngine.Object
  isExternal: true
  name: Object
  nameWithType: UnityEngine.Object
  fullName: UnityEngine.Object
