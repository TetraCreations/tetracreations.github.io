### YamlMime:ManagedReference
items:
- uid: TetraCreations.Core.Editor.AudioMixerExtensions
  commentId: T:TetraCreations.Core.Editor.AudioMixerExtensions
  id: AudioMixerExtensions
  parent: TetraCreations.Core.Editor
  children:
  - TetraCreations.Core.Editor.AudioMixerExtensions.GetExposedParameterNames(AudioMixer,System.String)
  langs:
  - csharp
  - vb
  name: AudioMixerExtensions
  nameWithType: AudioMixerExtensions
  fullName: TetraCreations.Core.Editor.AudioMixerExtensions
  type: Class
  source:
    id: AudioMixerExtensions
    path: ''
    startLine: 35503
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Editor
  syntax:
    content: public static class AudioMixerExtensions
    content.vb: Public Module AudioMixerExtensions
  inheritance:
  - System.Object
- uid: TetraCreations.Core.Editor.AudioMixerExtensions.GetExposedParameterNames(AudioMixer,System.String)
  commentId: M:TetraCreations.Core.Editor.AudioMixerExtensions.GetExposedParameterNames(AudioMixer,System.String)
  id: GetExposedParameterNames(AudioMixer,System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.Editor.AudioMixerExtensions
  langs:
  - csharp
  - vb
  name: GetExposedParameterNames(AudioMixer, string)
  nameWithType: AudioMixerExtensions.GetExposedParameterNames(AudioMixer, string)
  fullName: TetraCreations.Core.Editor.AudioMixerExtensions.GetExposedParameterNames(AudioMixer, string)
  type: Method
  source:
    id: GetExposedParameterNames
    path: ''
    startLine: 35511
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Editor
  summary: "\nReturn the list of Exposed parameters names from an AudioMixer, if contains is not empty or null, the name of the parameter must contains the string value.\n"
  example: []
  syntax:
    content: public static List<string> GetExposedParameterNames(this AudioMixer audioMixer, string contains = "")
    parameters:
    - id: audioMixer
      type: Global.AudioMixer
      description: ''
    - id: contains
      type: System.String
      description: ''
    return:
      type: Global.List{System.String}
      description: ''
    content.vb: Public Shared Function GetExposedParameterNames(audioMixer As AudioMixer, contains As String = "") As List(Of String)
  overload: TetraCreations.Core.Editor.AudioMixerExtensions.GetExposedParameterNames*
  nameWithType.vb: AudioMixerExtensions.GetExposedParameterNames(AudioMixer, String)
  fullName.vb: TetraCreations.Core.Editor.AudioMixerExtensions.GetExposedParameterNames(AudioMixer, String)
  name.vb: GetExposedParameterNames(AudioMixer, String)
references:
- uid: TetraCreations.Core.Editor
  commentId: N:TetraCreations.Core.Editor
  name: TetraCreations.Core.Editor
  nameWithType: TetraCreations.Core.Editor
  fullName: TetraCreations.Core.Editor
  spec.csharp:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  - name: .
  - uid: TetraCreations.Core.Editor
    name: Editor
  spec.vb:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  - name: .
  - uid: TetraCreations.Core.Editor
    name: Editor
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TetraCreations.Core.Editor.AudioMixerExtensions.GetExposedParameterNames*
  commentId: Overload:TetraCreations.Core.Editor.AudioMixerExtensions.GetExposedParameterNames
  name: GetExposedParameterNames
  nameWithType: AudioMixerExtensions.GetExposedParameterNames
  fullName: TetraCreations.Core.Editor.AudioMixerExtensions.GetExposedParameterNames
- uid: Global.AudioMixer
  isExternal: true
  name: AudioMixer
  nameWithType: AudioMixer
  fullName: AudioMixer
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.List{System.String}
  commentId: '!:Global.List{System.String}'
  definition: Global.List`1
  name: List<string>
  nameWithType: List<string>
  fullName: List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
