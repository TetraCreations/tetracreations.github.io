### YamlMime:ManagedReference
items:
- uid: TetraCreations.Core.Utility.TriggerCollider
  commentId: T:TetraCreations.Core.Utility.TriggerCollider
  id: TriggerCollider
  parent: TetraCreations.Core.Utility
  children:
  - TetraCreations.Core.Utility.TriggerCollider.Active
  - TetraCreations.Core.Utility.TriggerCollider.Collider
  - TetraCreations.Core.Utility.TriggerCollider.CollidersDetected
  - TetraCreations.Core.Utility.TriggerCollider.CollidersDetectedReadOnly
  - TetraCreations.Core.Utility.TriggerCollider.Enter(Collider)
  - TetraCreations.Core.Utility.TriggerCollider.Exit(Collider)
  - TetraCreations.Core.Utility.TriggerCollider.LayerMaskFilter
  - TetraCreations.Core.Utility.TriggerCollider.OnDetectedColliderEnter
  - TetraCreations.Core.Utility.TriggerCollider.OnDetectedColliderExit
  - TetraCreations.Core.Utility.TriggerCollider.PreventSelfDetection
  langs:
  - csharp
  - vb
  name: TriggerCollider
  nameWithType: TriggerCollider
  fullName: TetraCreations.Core.Utility.TriggerCollider
  type: Class
  source:
    id: TriggerCollider
    path: ''
    startLine: 39626
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Utility
  summary: "\nSimple script which define a zone by a collider or a radius in which it will detect any object.\nIt holds a layer bit mask, to ignore specific layers\n"
  example: []
  syntax:
    content: 'public class TriggerCollider : MonoBehaviour'
    content.vb: Public Class TriggerCollider Inherits MonoBehaviour
  inheritance:
  - System.Object
- uid: TetraCreations.Core.Utility.TriggerCollider.Collider
  commentId: F:TetraCreations.Core.Utility.TriggerCollider.Collider
  id: Collider
  parent: TetraCreations.Core.Utility.TriggerCollider
  langs:
  - csharp
  - vb
  name: Collider
  nameWithType: TriggerCollider.Collider
  fullName: TetraCreations.Core.Utility.TriggerCollider.Collider
  type: Field
  source:
    id: Collider
    path: ''
    startLine: 39635
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Utility
  syntax:
    content: public Collider Collider
    return:
      type: Global.Collider
    content.vb: Public Collider As Collider
- uid: TetraCreations.Core.Utility.TriggerCollider.LayerMaskFilter
  commentId: F:TetraCreations.Core.Utility.TriggerCollider.LayerMaskFilter
  id: LayerMaskFilter
  parent: TetraCreations.Core.Utility.TriggerCollider
  langs:
  - csharp
  - vb
  name: LayerMaskFilter
  nameWithType: TriggerCollider.LayerMaskFilter
  fullName: TetraCreations.Core.Utility.TriggerCollider.LayerMaskFilter
  type: Field
  source:
    id: LayerMaskFilter
    path: ''
    startLine: 39638
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Utility
  syntax:
    content: public LayerMaskFilter LayerMaskFilter
    return:
      type: TetraCreations.Core.Utility.LayerMaskFilter
    content.vb: Public LayerMaskFilter As LayerMaskFilter
- uid: TetraCreations.Core.Utility.TriggerCollider.OnDetectedColliderEnter
  commentId: F:TetraCreations.Core.Utility.TriggerCollider.OnDetectedColliderEnter
  id: OnDetectedColliderEnter
  parent: TetraCreations.Core.Utility.TriggerCollider
  langs:
  - csharp
  - vb
  name: OnDetectedColliderEnter
  nameWithType: TriggerCollider.OnDetectedColliderEnter
  fullName: TetraCreations.Core.Utility.TriggerCollider.OnDetectedColliderEnter
  type: Field
  source:
    id: OnDetectedColliderEnter
    path: ''
    startLine: 39644
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Utility
  syntax:
    content: public UnityEvent<Collider> OnDetectedColliderEnter
    return:
      type: Global.UnityEvent{Collider}
    content.vb: Public OnDetectedColliderEnter As UnityEvent(Of Collider)
- uid: TetraCreations.Core.Utility.TriggerCollider.OnDetectedColliderExit
  commentId: F:TetraCreations.Core.Utility.TriggerCollider.OnDetectedColliderExit
  id: OnDetectedColliderExit
  parent: TetraCreations.Core.Utility.TriggerCollider
  langs:
  - csharp
  - vb
  name: OnDetectedColliderExit
  nameWithType: TriggerCollider.OnDetectedColliderExit
  fullName: TetraCreations.Core.Utility.TriggerCollider.OnDetectedColliderExit
  type: Field
  source:
    id: OnDetectedColliderExit
    path: ''
    startLine: 39645
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Utility
  syntax:
    content: public UnityEvent<Collider> OnDetectedColliderExit
    return:
      type: Global.UnityEvent{Collider}
    content.vb: Public OnDetectedColliderExit As UnityEvent(Of Collider)
- uid: TetraCreations.Core.Utility.TriggerCollider.Active
  commentId: P:TetraCreations.Core.Utility.TriggerCollider.Active
  id: Active
  parent: TetraCreations.Core.Utility.TriggerCollider
  langs:
  - csharp
  - vb
  name: Active
  nameWithType: TriggerCollider.Active
  fullName: TetraCreations.Core.Utility.TriggerCollider.Active
  type: Property
  source:
    id: Active
    path: ''
    startLine: 39647
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Utility
  syntax:
    content: public bool Active { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Active As Boolean
  overload: TetraCreations.Core.Utility.TriggerCollider.Active*
- uid: TetraCreations.Core.Utility.TriggerCollider.PreventSelfDetection
  commentId: P:TetraCreations.Core.Utility.TriggerCollider.PreventSelfDetection
  id: PreventSelfDetection
  parent: TetraCreations.Core.Utility.TriggerCollider
  langs:
  - csharp
  - vb
  name: PreventSelfDetection
  nameWithType: TriggerCollider.PreventSelfDetection
  fullName: TetraCreations.Core.Utility.TriggerCollider.PreventSelfDetection
  type: Property
  source:
    id: PreventSelfDetection
    path: ''
    startLine: 39648
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Utility
  syntax:
    content: public bool PreventSelfDetection { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property PreventSelfDetection As Boolean
  overload: TetraCreations.Core.Utility.TriggerCollider.PreventSelfDetection*
- uid: TetraCreations.Core.Utility.TriggerCollider.CollidersDetectedReadOnly
  commentId: P:TetraCreations.Core.Utility.TriggerCollider.CollidersDetectedReadOnly
  id: CollidersDetectedReadOnly
  parent: TetraCreations.Core.Utility.TriggerCollider
  langs:
  - csharp
  - vb
  name: CollidersDetectedReadOnly
  nameWithType: TriggerCollider.CollidersDetectedReadOnly
  fullName: TetraCreations.Core.Utility.TriggerCollider.CollidersDetectedReadOnly
  type: Property
  source:
    id: CollidersDetectedReadOnly
    path: ''
    startLine: 39649
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Utility
  syntax:
    content: public IReadOnlyList<Collider> CollidersDetectedReadOnly { get; }
    parameters: []
    return:
      type: Global.IReadOnlyList{Collider}
    content.vb: Public ReadOnly Property CollidersDetectedReadOnly As IReadOnlyList(Of Collider)
  overload: TetraCreations.Core.Utility.TriggerCollider.CollidersDetectedReadOnly*
- uid: TetraCreations.Core.Utility.TriggerCollider.CollidersDetected
  commentId: P:TetraCreations.Core.Utility.TriggerCollider.CollidersDetected
  id: CollidersDetected
  parent: TetraCreations.Core.Utility.TriggerCollider
  langs:
  - csharp
  - vb
  name: CollidersDetected
  nameWithType: TriggerCollider.CollidersDetected
  fullName: TetraCreations.Core.Utility.TriggerCollider.CollidersDetected
  type: Property
  source:
    id: CollidersDetected
    path: ''
    startLine: 39650
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Utility
  syntax:
    content: protected List<Collider> CollidersDetected { get; set; }
    parameters: []
    return:
      type: Global.List{Collider}
    content.vb: Protected Property CollidersDetected As List(Of Collider)
  overload: TetraCreations.Core.Utility.TriggerCollider.CollidersDetected*
- uid: TetraCreations.Core.Utility.TriggerCollider.Enter(Collider)
  commentId: M:TetraCreations.Core.Utility.TriggerCollider.Enter(Collider)
  id: Enter(Collider)
  parent: TetraCreations.Core.Utility.TriggerCollider
  langs:
  - csharp
  - vb
  name: Enter(Collider)
  nameWithType: TriggerCollider.Enter(Collider)
  fullName: TetraCreations.Core.Utility.TriggerCollider.Enter(Collider)
  type: Method
  source:
    id: Enter
    path: ''
    startLine: 39678
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Utility
  syntax:
    content: protected virtual void Enter(Collider collider)
    parameters:
    - id: collider
      type: Global.Collider
    content.vb: Protected Overridable Sub Enter(collider As Collider)
  overload: TetraCreations.Core.Utility.TriggerCollider.Enter*
- uid: TetraCreations.Core.Utility.TriggerCollider.Exit(Collider)
  commentId: M:TetraCreations.Core.Utility.TriggerCollider.Exit(Collider)
  id: Exit(Collider)
  parent: TetraCreations.Core.Utility.TriggerCollider
  langs:
  - csharp
  - vb
  name: Exit(Collider)
  nameWithType: TriggerCollider.Exit(Collider)
  fullName: TetraCreations.Core.Utility.TriggerCollider.Exit(Collider)
  type: Method
  source:
    id: Exit
    path: ''
    startLine: 39698
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core.Utility
  syntax:
    content: protected virtual void Exit(Collider collider)
    parameters:
    - id: collider
      type: Global.Collider
    content.vb: Protected Overridable Sub [Exit](collider As Collider)
  overload: TetraCreations.Core.Utility.TriggerCollider.Exit*
references:
- uid: TetraCreations.Core.Utility
  commentId: N:TetraCreations.Core.Utility
  name: TetraCreations.Core.Utility
  nameWithType: TetraCreations.Core.Utility
  fullName: TetraCreations.Core.Utility
  spec.csharp:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  - name: .
  - uid: TetraCreations.Core.Utility
    name: Utility
  spec.vb:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  - name: .
  - uid: TetraCreations.Core.Utility
    name: Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Collider
  isExternal: true
  name: Collider
  nameWithType: Collider
  fullName: Collider
- uid: TetraCreations.Core.Utility.LayerMaskFilter
  commentId: T:TetraCreations.Core.Utility.LayerMaskFilter
  parent: TetraCreations.Core.Utility
  name: LayerMaskFilter
  nameWithType: LayerMaskFilter
  fullName: TetraCreations.Core.Utility.LayerMaskFilter
- uid: Global.UnityEvent{Collider}
  commentId: '!:Global.UnityEvent{Collider}'
  definition: Global.UnityEvent`1
  name: UnityEvent<Collider>
  nameWithType: UnityEvent<Collider>
  fullName: UnityEvent<Collider>
  nameWithType.vb: UnityEvent(Of Collider)
  fullName.vb: UnityEvent(Of Collider)
  name.vb: UnityEvent(Of Collider)
  spec.csharp:
  - uid: Global.UnityEvent`1
    name: UnityEvent
    isExternal: true
  - name: <
  - uid: Global.Collider
    name: Collider
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.UnityEvent`1
    name: UnityEvent
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Collider
    name: Collider
    isExternal: true
  - name: )
- uid: Global.UnityEvent`1
  isExternal: true
  name: UnityEvent<>
  nameWithType: UnityEvent<>
  fullName: UnityEvent<>
  nameWithType.vb: UnityEvent(Of )
  fullName.vb: UnityEvent(Of )
  name.vb: UnityEvent(Of )
  spec.csharp:
  - uid: Global.UnityEvent`1
    name: UnityEvent
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.UnityEvent`1
    name: UnityEvent
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.Utility.TriggerCollider.Active*
  commentId: Overload:TetraCreations.Core.Utility.TriggerCollider.Active
  name: Active
  nameWithType: TriggerCollider.Active
  fullName: TetraCreations.Core.Utility.TriggerCollider.Active
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TetraCreations.Core.Utility.TriggerCollider.PreventSelfDetection*
  commentId: Overload:TetraCreations.Core.Utility.TriggerCollider.PreventSelfDetection
  name: PreventSelfDetection
  nameWithType: TriggerCollider.PreventSelfDetection
  fullName: TetraCreations.Core.Utility.TriggerCollider.PreventSelfDetection
- uid: TetraCreations.Core.Utility.TriggerCollider.CollidersDetectedReadOnly*
  commentId: Overload:TetraCreations.Core.Utility.TriggerCollider.CollidersDetectedReadOnly
  name: CollidersDetectedReadOnly
  nameWithType: TriggerCollider.CollidersDetectedReadOnly
  fullName: TetraCreations.Core.Utility.TriggerCollider.CollidersDetectedReadOnly
- uid: Global.IReadOnlyList{Collider}
  commentId: '!:Global.IReadOnlyList{Collider}'
  definition: Global.IReadOnlyList`1
  name: IReadOnlyList<Collider>
  nameWithType: IReadOnlyList<Collider>
  fullName: IReadOnlyList<Collider>
  nameWithType.vb: IReadOnlyList(Of Collider)
  fullName.vb: IReadOnlyList(Of Collider)
  name.vb: IReadOnlyList(Of Collider)
  spec.csharp:
  - uid: Global.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: <
  - uid: Global.Collider
    name: Collider
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Collider
    name: Collider
    isExternal: true
  - name: )
- uid: Global.IReadOnlyList`1
  commentId: '!:Global.IReadOnlyList`1'
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: Global.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.Utility.TriggerCollider.CollidersDetected*
  commentId: Overload:TetraCreations.Core.Utility.TriggerCollider.CollidersDetected
  name: CollidersDetected
  nameWithType: TriggerCollider.CollidersDetected
  fullName: TetraCreations.Core.Utility.TriggerCollider.CollidersDetected
- uid: Global.List{Collider}
  commentId: '!:Global.List{Collider}'
  definition: Global.List`1
  name: List<Collider>
  nameWithType: List<Collider>
  fullName: List<Collider>
  nameWithType.vb: List(Of Collider)
  fullName.vb: List(Of Collider)
  name.vb: List(Of Collider)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.Collider
    name: Collider
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Collider
    name: Collider
    isExternal: true
  - name: )
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.Utility.TriggerCollider.Enter*
  commentId: Overload:TetraCreations.Core.Utility.TriggerCollider.Enter
  name: Enter
  nameWithType: TriggerCollider.Enter
  fullName: TetraCreations.Core.Utility.TriggerCollider.Enter
- uid: TetraCreations.Core.Utility.TriggerCollider.Exit*
  commentId: Overload:TetraCreations.Core.Utility.TriggerCollider.Exit
  name: Exit
  nameWithType: TriggerCollider.Exit
  fullName: TetraCreations.Core.Utility.TriggerCollider.Exit
