### YamlMime:ManagedReference
items:
- uid: TetraCreations.Core.TransformExtensions
  commentId: T:TetraCreations.Core.TransformExtensions
  id: TransformExtensions
  parent: TetraCreations.Core
  children:
  - TetraCreations.Core.TransformExtensions.AddScale(Transform,System.Single,System.Single,System.Single)
  - TetraCreations.Core.TransformExtensions.AddToPosition(Transform,System.Single,System.Single,System.Single)
  - TetraCreations.Core.TransformExtensions.AddToRotation(Transform,System.Single,System.Single,System.Single)
  - TetraCreations.Core.TransformExtensions.DestroyChildren(Transform,Func{Transform,System.Boolean})
  - TetraCreations.Core.TransformExtensions.DestroyChildrenImmediately(Transform,Func{Transform,System.Boolean})
  - TetraCreations.Core.TransformExtensions.DisableChildren(Transform)
  - TetraCreations.Core.TransformExtensions.EnableChildren(Transform)
  - TetraCreations.Core.TransformExtensions.ForEachChild(Transform,Action{Transform})
  - TetraCreations.Core.TransformExtensions.GetChild(Transform,System.Int32)
  - TetraCreations.Core.TransformExtensions.GetChildrenTransforms(Transform,List{Transform})
  - TetraCreations.Core.TransformExtensions.GetComponentInChildren``1(Transform,System.Int32)
  - TetraCreations.Core.TransformExtensions.GetFirstChildrenTransforms(Transform)
  - TetraCreations.Core.TransformExtensions.Log(Transform)
  - TetraCreations.Core.TransformExtensions.LogEulerAngles(Transform)
  - TetraCreations.Core.TransformExtensions.LogPosition(Transform)
  - TetraCreations.Core.TransformExtensions.LogScale(Transform)
  - TetraCreations.Core.TransformExtensions.LookAt2D(Transform,Transform)
  - TetraCreations.Core.TransformExtensions.Reset(Transform)
  - TetraCreations.Core.TransformExtensions.ResetLocalRotation(Transform)
  - TetraCreations.Core.TransformExtensions.ResetPosition(Transform)
  - TetraCreations.Core.TransformExtensions.ResetScale(Transform)
  - TetraCreations.Core.TransformExtensions.SetPosition(Transform,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})
  - TetraCreations.Core.TransformExtensions.SetRotation(Transform,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})
  - TetraCreations.Core.TransformExtensions.SetScale(Transform,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})
  - TetraCreations.Core.TransformExtensions.SetScaleAllAxes(Transform,System.Single)
  langs:
  - csharp
  - vb
  name: TransformExtensions
  nameWithType: TransformExtensions
  fullName: TetraCreations.Core.TransformExtensions
  type: Class
  source:
    id: TransformExtensions
    path: ''
    startLine: 38041
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  syntax:
    content: public static class TransformExtensions
    content.vb: Public Module TransformExtensions
  inheritance:
  - System.Object
- uid: TetraCreations.Core.TransformExtensions.GetComponentInChildren``1(Transform,System.Int32)
  commentId: M:TetraCreations.Core.TransformExtensions.GetComponentInChildren``1(Transform,System.Int32)
  id: GetComponentInChildren``1(Transform,System.Int32)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: GetComponentInChildren<T>(Transform, int)
  nameWithType: TransformExtensions.GetComponentInChildren<T>(Transform, int)
  fullName: TetraCreations.Core.TransformExtensions.GetComponentInChildren<T>(Transform, int)
  type: Method
  source:
    id: GetComponentInChildren
    path: ''
    startLine: 38050
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  syntax:
    content: public static T GetComponentInChildren<T>(this Transform transform, int index)
    parameters:
    - id: transform
      type: Global.Transform
    - id: index
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function GetComponentInChildren(Of T)(transform As Transform, index As Integer) As T
  overload: TetraCreations.Core.TransformExtensions.GetComponentInChildren*
  nameWithType.vb: TransformExtensions.GetComponentInChildren(Of T)(Transform, Integer)
  fullName.vb: TetraCreations.Core.TransformExtensions.GetComponentInChildren(Of T)(Transform, Integer)
  name.vb: GetComponentInChildren(Of T)(Transform, Integer)
- uid: TetraCreations.Core.TransformExtensions.SetPosition(Transform,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})
  commentId: M:TetraCreations.Core.TransformExtensions.SetPosition(Transform,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})
  id: SetPosition(Transform,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: SetPosition(Transform, float?, float?, float?)
  nameWithType: TransformExtensions.SetPosition(Transform, float?, float?, float?)
  fullName: TetraCreations.Core.TransformExtensions.SetPosition(Transform, float?, float?, float?)
  type: Method
  source:
    id: SetPosition
    path: ''
    startLine: 38060
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nSet position values of the transform.\n"
  example: []
  syntax:
    content: public static void SetPosition(this Transform transform, float? x = null, float? y = null, float? z = null)
    parameters:
    - id: transform
      type: Global.Transform
      description: ''
    - id: x
      type: System.Nullable{System.Single}
    - id: y
      type: System.Nullable{System.Single}
    - id: z
      type: System.Nullable{System.Single}
    content.vb: Public Shared Sub SetPosition(transform As Transform, x As Single? = Nothing, y As Single? = Nothing, z As Single? = Nothing)
  overload: TetraCreations.Core.TransformExtensions.SetPosition*
  nameWithType.vb: TransformExtensions.SetPosition(Transform, Single?, Single?, Single?)
  fullName.vb: TetraCreations.Core.TransformExtensions.SetPosition(Transform, Single?, Single?, Single?)
  name.vb: SetPosition(Transform, Single?, Single?, Single?)
- uid: TetraCreations.Core.TransformExtensions.AddToPosition(Transform,System.Single,System.Single,System.Single)
  commentId: M:TetraCreations.Core.TransformExtensions.AddToPosition(Transform,System.Single,System.Single,System.Single)
  id: AddToPosition(Transform,System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: AddToPosition(Transform, float, float, float)
  nameWithType: TransformExtensions.AddToPosition(Transform, float, float, float)
  fullName: TetraCreations.Core.TransformExtensions.AddToPosition(Transform, float, float, float)
  type: Method
  source:
    id: AddToPosition
    path: ''
    startLine: 38070
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nAdd values to the current position of the transform.\n"
  example: []
  syntax:
    content: public static void AddToPosition(this Transform transform, float x = 0, float y = 0, float z = 0)
    parameters:
    - id: transform
      type: Global.Transform
      description: ''
    - id: x
      type: System.Single
    - id: y
      type: System.Single
    - id: z
      type: System.Single
    content.vb: Public Shared Sub AddToPosition(transform As Transform, x As Single = 0, y As Single = 0, z As Single = 0)
  overload: TetraCreations.Core.TransformExtensions.AddToPosition*
  nameWithType.vb: TransformExtensions.AddToPosition(Transform, Single, Single, Single)
  fullName.vb: TetraCreations.Core.TransformExtensions.AddToPosition(Transform, Single, Single, Single)
  name.vb: AddToPosition(Transform, Single, Single, Single)
- uid: TetraCreations.Core.TransformExtensions.SetRotation(Transform,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})
  commentId: M:TetraCreations.Core.TransformExtensions.SetRotation(Transform,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})
  id: SetRotation(Transform,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: SetRotation(Transform, float?, float?, float?)
  nameWithType: TransformExtensions.SetRotation(Transform, float?, float?, float?)
  fullName: TetraCreations.Core.TransformExtensions.SetRotation(Transform, float?, float?, float?)
  type: Method
  source:
    id: SetRotation
    path: ''
    startLine: 38080
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nSet rotation values of the transform.\n"
  example: []
  syntax:
    content: public static void SetRotation(this Transform transform, float? x = null, float? y = null, float? z = null)
    parameters:
    - id: transform
      type: Global.Transform
      description: ''
    - id: x
      type: System.Nullable{System.Single}
    - id: y
      type: System.Nullable{System.Single}
    - id: z
      type: System.Nullable{System.Single}
    content.vb: Public Shared Sub SetRotation(transform As Transform, x As Single? = Nothing, y As Single? = Nothing, z As Single? = Nothing)
  overload: TetraCreations.Core.TransformExtensions.SetRotation*
  nameWithType.vb: TransformExtensions.SetRotation(Transform, Single?, Single?, Single?)
  fullName.vb: TetraCreations.Core.TransformExtensions.SetRotation(Transform, Single?, Single?, Single?)
  name.vb: SetRotation(Transform, Single?, Single?, Single?)
- uid: TetraCreations.Core.TransformExtensions.AddToRotation(Transform,System.Single,System.Single,System.Single)
  commentId: M:TetraCreations.Core.TransformExtensions.AddToRotation(Transform,System.Single,System.Single,System.Single)
  id: AddToRotation(Transform,System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: AddToRotation(Transform, float, float, float)
  nameWithType: TransformExtensions.AddToRotation(Transform, float, float, float)
  fullName: TetraCreations.Core.TransformExtensions.AddToRotation(Transform, float, float, float)
  type: Method
  source:
    id: AddToRotation
    path: ''
    startLine: 38091
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nAdd values to the current local rotation of the transform.\n"
  example: []
  syntax:
    content: public static void AddToRotation(this Transform transform, float x = 0, float y = 0, float z = 0)
    parameters:
    - id: transform
      type: Global.Transform
      description: ''
    - id: x
      type: System.Single
    - id: y
      type: System.Single
    - id: z
      type: System.Single
    content.vb: Public Shared Sub AddToRotation(transform As Transform, x As Single = 0, y As Single = 0, z As Single = 0)
  overload: TetraCreations.Core.TransformExtensions.AddToRotation*
  nameWithType.vb: TransformExtensions.AddToRotation(Transform, Single, Single, Single)
  fullName.vb: TetraCreations.Core.TransformExtensions.AddToRotation(Transform, Single, Single, Single)
  name.vb: AddToRotation(Transform, Single, Single, Single)
- uid: TetraCreations.Core.TransformExtensions.SetScale(Transform,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})
  commentId: M:TetraCreations.Core.TransformExtensions.SetScale(Transform,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})
  id: SetScale(Transform,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: SetScale(Transform, float?, float?, float?)
  nameWithType: TransformExtensions.SetScale(Transform, float?, float?, float?)
  fullName: TetraCreations.Core.TransformExtensions.SetScale(Transform, float?, float?, float?)
  type: Method
  source:
    id: SetScale
    path: ''
    startLine: 38101
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nSet scale values of the transform.\n"
  example: []
  syntax:
    content: public static void SetScale(this Transform transform, float? x = null, float? y = null, float? z = null)
    parameters:
    - id: transform
      type: Global.Transform
      description: ''
    - id: x
      type: System.Nullable{System.Single}
    - id: y
      type: System.Nullable{System.Single}
    - id: z
      type: System.Nullable{System.Single}
    content.vb: Public Shared Sub SetScale(transform As Transform, x As Single? = Nothing, y As Single? = Nothing, z As Single? = Nothing)
  overload: TetraCreations.Core.TransformExtensions.SetScale*
  nameWithType.vb: TransformExtensions.SetScale(Transform, Single?, Single?, Single?)
  fullName.vb: TetraCreations.Core.TransformExtensions.SetScale(Transform, Single?, Single?, Single?)
  name.vb: SetScale(Transform, Single?, Single?, Single?)
- uid: TetraCreations.Core.TransformExtensions.AddScale(Transform,System.Single,System.Single,System.Single)
  commentId: M:TetraCreations.Core.TransformExtensions.AddScale(Transform,System.Single,System.Single,System.Single)
  id: AddScale(Transform,System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: AddScale(Transform, float, float, float)
  nameWithType: TransformExtensions.AddScale(Transform, float, float, float)
  fullName: TetraCreations.Core.TransformExtensions.AddScale(Transform, float, float, float)
  type: Method
  source:
    id: AddScale
    path: ''
    startLine: 38111
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nAdd values to curent local scale of the transform.\n"
  example: []
  syntax:
    content: public static void AddScale(this Transform transform, float x = 0, float y = 0, float z = 0)
    parameters:
    - id: transform
      type: Global.Transform
      description: ''
    - id: x
      type: System.Single
    - id: y
      type: System.Single
    - id: z
      type: System.Single
    content.vb: Public Shared Sub AddScale(transform As Transform, x As Single = 0, y As Single = 0, z As Single = 0)
  overload: TetraCreations.Core.TransformExtensions.AddScale*
  nameWithType.vb: TransformExtensions.AddScale(Transform, Single, Single, Single)
  fullName.vb: TetraCreations.Core.TransformExtensions.AddScale(Transform, Single, Single, Single)
  name.vb: AddScale(Transform, Single, Single, Single)
- uid: TetraCreations.Core.TransformExtensions.LookAt2D(Transform,Transform)
  commentId: M:TetraCreations.Core.TransformExtensions.LookAt2D(Transform,Transform)
  id: LookAt2D(Transform,Transform)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: LookAt2D(Transform, Transform)
  nameWithType: TransformExtensions.LookAt2D(Transform, Transform)
  fullName: TetraCreations.Core.TransformExtensions.LookAt2D(Transform, Transform)
  type: Method
  source:
    id: LookAt2D
    path: ''
    startLine: 38121
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nMakes the transform look at a 2D target object by rotating its Up-axis towards the target position.\n"
  example: []
  syntax:
    content: public static void LookAt2D(this Transform transform, Transform target)
    parameters:
    - id: transform
      type: Global.Transform
      description: The transform to look at the target.
    - id: target
      type: Global.Transform
      description: The target transform to look at.
    content.vb: Public Shared Sub LookAt2D(transform As Transform, target As Transform)
  overload: TetraCreations.Core.TransformExtensions.LookAt2D*
- uid: TetraCreations.Core.TransformExtensions.GetChild(Transform,System.Int32)
  commentId: M:TetraCreations.Core.TransformExtensions.GetChild(Transform,System.Int32)
  id: GetChild(Transform,System.Int32)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: GetChild(Transform, int)
  nameWithType: TransformExtensions.GetChild(Transform, int)
  fullName: TetraCreations.Core.TransformExtensions.GetChild(Transform, int)
  type: Method
  source:
    id: GetChild
    path: ''
    startLine: 38133
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nGet child Transform by index, return null if the index is out of range.\n"
  example: []
  syntax:
    content: public static Transform GetChild(this Transform transform, int index)
    parameters:
    - id: transform
      type: Global.Transform
      description: ''
    - id: index
      type: System.Int32
      description: ''
    return:
      type: Global.Transform
      description: ''
    content.vb: Public Shared Function GetChild(transform As Transform, index As Integer) As Transform
  overload: TetraCreations.Core.TransformExtensions.GetChild*
  nameWithType.vb: TransformExtensions.GetChild(Transform, Integer)
  fullName.vb: TetraCreations.Core.TransformExtensions.GetChild(Transform, Integer)
  name.vb: GetChild(Transform, Integer)
- uid: TetraCreations.Core.TransformExtensions.DestroyChildren(Transform,Func{Transform,System.Boolean})
  commentId: M:TetraCreations.Core.TransformExtensions.DestroyChildren(Transform,Func{Transform,System.Boolean})
  id: DestroyChildren(Transform,Func{Transform,System.Boolean})
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: DestroyChildren(Transform, Func<Transform, bool>)
  nameWithType: TransformExtensions.DestroyChildren(Transform, Func<Transform, bool>)
  fullName: TetraCreations.Core.TransformExtensions.DestroyChildren(Transform, Func<Transform, bool>)
  type: Method
  source:
    id: DestroyChildren
    path: ''
    startLine: 38149
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDestroy all children of the transform.\nIf we pass a predicate, it needs to be true to actually destroy the child.\n"
  example: []
  syntax:
    content: public static void DestroyChildren(this Transform transform, Func<Transform, bool> predicate = null)
    parameters:
    - id: transform
      type: Global.Transform
      description: ''
    - id: predicate
      type: Global.Func{Transform,System.Boolean}
      description: Predicate function to exclude some children from being destroyed (If false).
    content.vb: Public Shared Sub DestroyChildren(transform As Transform, predicate As Func(Of Transform, Boolean) = Nothing)
  overload: TetraCreations.Core.TransformExtensions.DestroyChildren*
  nameWithType.vb: TransformExtensions.DestroyChildren(Transform, Func(Of Transform, Boolean))
  fullName.vb: TetraCreations.Core.TransformExtensions.DestroyChildren(Transform, Func(Of Transform, Boolean))
  name.vb: DestroyChildren(Transform, Func(Of Transform, Boolean))
- uid: TetraCreations.Core.TransformExtensions.DestroyChildrenImmediately(Transform,Func{Transform,System.Boolean})
  commentId: M:TetraCreations.Core.TransformExtensions.DestroyChildrenImmediately(Transform,Func{Transform,System.Boolean})
  id: DestroyChildrenImmediately(Transform,Func{Transform,System.Boolean})
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: DestroyChildrenImmediately(Transform, Func<Transform, bool>)
  nameWithType: TransformExtensions.DestroyChildrenImmediately(Transform, Func<Transform, bool>)
  fullName: TetraCreations.Core.TransformExtensions.DestroyChildrenImmediately(Transform, Func<Transform, bool>)
  type: Method
  source:
    id: DestroyChildrenImmediately
    path: ''
    startLine: 38168
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDestroy immediately all children of the transform inside the editor.\nIf we pass a predicate, it needs to be true to actually destroy the child.\n"
  example: []
  syntax:
    content: public static void DestroyChildrenImmediately(this Transform transform, Func<Transform, bool> predicate = null)
    parameters:
    - id: transform
      type: Global.Transform
      description: ''
    - id: predicate
      type: Global.Func{Transform,System.Boolean}
      description: Predicate function to exclude some children from being destroyed (If false).
    content.vb: Public Shared Sub DestroyChildrenImmediately(transform As Transform, predicate As Func(Of Transform, Boolean) = Nothing)
  overload: TetraCreations.Core.TransformExtensions.DestroyChildrenImmediately*
  nameWithType.vb: TransformExtensions.DestroyChildrenImmediately(Transform, Func(Of Transform, Boolean))
  fullName.vb: TetraCreations.Core.TransformExtensions.DestroyChildrenImmediately(Transform, Func(Of Transform, Boolean))
  name.vb: DestroyChildrenImmediately(Transform, Func(Of Transform, Boolean))
- uid: TetraCreations.Core.TransformExtensions.ForEachChild(Transform,Action{Transform})
  commentId: M:TetraCreations.Core.TransformExtensions.ForEachChild(Transform,Action{Transform})
  id: ForEachChild(Transform,Action{Transform})
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: ForEachChild(Transform, Action<Transform>)
  nameWithType: TransformExtensions.ForEachChild(Transform, Action<Transform>)
  fullName: TetraCreations.Core.TransformExtensions.ForEachChild(Transform, Action<Transform>)
  type: Method
  source:
    id: ForEachChild
    path: ''
    startLine: 38190
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nExecutes an action for each child of a given transform.\n"
  remarks: "\nThis method iterates over all child transforms in reverse order and executes a given action on them.\nThe action is a delegate that takes a Transform as parameter.\n"
  example: []
  syntax:
    content: public static void ForEachChild(this Transform parent, Action<Transform> action)
    parameters:
    - id: parent
      type: Global.Transform
      description: The transform
    - id: action
      type: Global.Action{Transform}
      description: The action to be performed on each child
    content.vb: Public Shared Sub ForEachChild(parent As Transform, action As Action(Of Transform))
  overload: TetraCreations.Core.TransformExtensions.ForEachChild*
  nameWithType.vb: TransformExtensions.ForEachChild(Transform, Action(Of Transform))
  fullName.vb: TetraCreations.Core.TransformExtensions.ForEachChild(Transform, Action(Of Transform))
  name.vb: ForEachChild(Transform, Action(Of Transform))
- uid: TetraCreations.Core.TransformExtensions.GetFirstChildrenTransforms(Transform)
  commentId: M:TetraCreations.Core.TransformExtensions.GetFirstChildrenTransforms(Transform)
  id: GetFirstChildrenTransforms(Transform)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: GetFirstChildrenTransforms(Transform)
  nameWithType: TransformExtensions.GetFirstChildrenTransforms(Transform)
  fullName: TetraCreations.Core.TransformExtensions.GetFirstChildrenTransforms(Transform)
  type: Method
  source:
    id: GetFirstChildrenTransforms
    path: ''
    startLine: 38202
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nGet children transforms at the fist level in the hierarchy.\n"
  example: []
  syntax:
    content: public static List<Transform> GetFirstChildrenTransforms(this Transform parent)
    parameters:
    - id: parent
      type: Global.Transform
      description: ''
    return:
      type: Global.List{Transform}
    content.vb: Public Shared Function GetFirstChildrenTransforms(parent As Transform) As List(Of Transform)
  overload: TetraCreations.Core.TransformExtensions.GetFirstChildrenTransforms*
- uid: TetraCreations.Core.TransformExtensions.GetChildrenTransforms(Transform,List{Transform})
  commentId: M:TetraCreations.Core.TransformExtensions.GetChildrenTransforms(Transform,List{Transform})
  id: GetChildrenTransforms(Transform,List{Transform})
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: GetChildrenTransforms(Transform, List<Transform>)
  nameWithType: TransformExtensions.GetChildrenTransforms(Transform, List<Transform>)
  fullName: TetraCreations.Core.TransformExtensions.GetChildrenTransforms(Transform, List<Transform>)
  type: Method
  source:
    id: GetChildrenTransforms
    path: ''
    startLine: 38219
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nGet every childreen transforms recursively \n"
  example: []
  syntax:
    content: public static void GetChildrenTransforms(this Transform parent, List<Transform> children)
    parameters:
    - id: parent
      type: Global.Transform
      description: ''
    - id: children
      type: Global.List{Transform}
      description: ''
    content.vb: Public Shared Sub GetChildrenTransforms(parent As Transform, children As List(Of Transform))
  overload: TetraCreations.Core.TransformExtensions.GetChildrenTransforms*
  nameWithType.vb: TransformExtensions.GetChildrenTransforms(Transform, List(Of Transform))
  fullName.vb: TetraCreations.Core.TransformExtensions.GetChildrenTransforms(Transform, List(Of Transform))
  name.vb: GetChildrenTransforms(Transform, List(Of Transform))
- uid: TetraCreations.Core.TransformExtensions.EnableChildren(Transform)
  commentId: M:TetraCreations.Core.TransformExtensions.EnableChildren(Transform)
  id: EnableChildren(Transform)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: EnableChildren(Transform)
  nameWithType: TransformExtensions.EnableChildren(Transform)
  fullName: TetraCreations.Core.TransformExtensions.EnableChildren(Transform)
  type: Method
  source:
    id: EnableChildren
    path: ''
    startLine: 38232
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nEnables all child game objects of the given transform.\n"
  example: []
  syntax:
    content: public static void EnableChildren(this Transform parent)
    parameters:
    - id: parent
      type: Global.Transform
      description: The Transform whose child game objects are to be enabled.
    content.vb: Public Shared Sub EnableChildren(parent As Transform)
  overload: TetraCreations.Core.TransformExtensions.EnableChildren*
- uid: TetraCreations.Core.TransformExtensions.DisableChildren(Transform)
  commentId: M:TetraCreations.Core.TransformExtensions.DisableChildren(Transform)
  id: DisableChildren(Transform)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: DisableChildren(Transform)
  nameWithType: TransformExtensions.DisableChildren(Transform)
  fullName: TetraCreations.Core.TransformExtensions.DisableChildren(Transform)
  type: Method
  source:
    id: DisableChildren
    path: ''
    startLine: 38241
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDisables all child game objects of the given transform.\n"
  example: []
  syntax:
    content: public static void DisableChildren(this Transform parent)
    parameters:
    - id: parent
      type: Global.Transform
      description: The Transform whose child game objects are to be disabled.
    content.vb: Public Shared Sub DisableChildren(parent As Transform)
  overload: TetraCreations.Core.TransformExtensions.DisableChildren*
- uid: TetraCreations.Core.TransformExtensions.Reset(Transform)
  commentId: M:TetraCreations.Core.TransformExtensions.Reset(Transform)
  id: Reset(Transform)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: Reset(Transform)
  nameWithType: TransformExtensions.Reset(Transform)
  fullName: TetraCreations.Core.TransformExtensions.Reset(Transform)
  type: Method
  source:
    id: Reset
    path: ''
    startLine: 38250
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nSet position (0,0,0), localRotation to Quaternion.identity and localeScale to (1,1,1).\n"
  example: []
  syntax:
    content: public static void Reset(this Transform transform)
    parameters:
    - id: transform
      type: Global.Transform
      description: ''
    content.vb: Public Shared Sub Reset(transform As Transform)
  overload: TetraCreations.Core.TransformExtensions.Reset*
- uid: TetraCreations.Core.TransformExtensions.ResetPosition(Transform)
  commentId: M:TetraCreations.Core.TransformExtensions.ResetPosition(Transform)
  id: ResetPosition(Transform)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: ResetPosition(Transform)
  nameWithType: TransformExtensions.ResetPosition(Transform)
  fullName: TetraCreations.Core.TransformExtensions.ResetPosition(Transform)
  type: Method
  source:
    id: ResetPosition
    path: ''
    startLine: 38261
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nSet position to (0,0,0)\n"
  example: []
  syntax:
    content: public static void ResetPosition(this Transform transform)
    parameters:
    - id: transform
      type: Global.Transform
      description: ''
    content.vb: Public Shared Sub ResetPosition(transform As Transform)
  overload: TetraCreations.Core.TransformExtensions.ResetPosition*
- uid: TetraCreations.Core.TransformExtensions.ResetLocalRotation(Transform)
  commentId: M:TetraCreations.Core.TransformExtensions.ResetLocalRotation(Transform)
  id: ResetLocalRotation(Transform)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: ResetLocalRotation(Transform)
  nameWithType: TransformExtensions.ResetLocalRotation(Transform)
  fullName: TetraCreations.Core.TransformExtensions.ResetLocalRotation(Transform)
  type: Method
  source:
    id: ResetLocalRotation
    path: ''
    startLine: 38270
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nSet the local rotation to &quot;no rotation&quot; - the object is perfectly aligned with the world or parent axes.\n"
  example: []
  syntax:
    content: public static void ResetLocalRotation(this Transform transform)
    parameters:
    - id: transform
      type: Global.Transform
      description: ''
    content.vb: Public Shared Sub ResetLocalRotation(transform As Transform)
  overload: TetraCreations.Core.TransformExtensions.ResetLocalRotation*
- uid: TetraCreations.Core.TransformExtensions.ResetScale(Transform)
  commentId: M:TetraCreations.Core.TransformExtensions.ResetScale(Transform)
  id: ResetScale(Transform)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: ResetScale(Transform)
  nameWithType: TransformExtensions.ResetScale(Transform)
  fullName: TetraCreations.Core.TransformExtensions.ResetScale(Transform)
  type: Method
  source:
    id: ResetScale
    path: ''
    startLine: 38279
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nSet the local scale to (1,1,1)\n"
  example: []
  syntax:
    content: public static void ResetScale(this Transform transform)
    parameters:
    - id: transform
      type: Global.Transform
      description: ''
    content.vb: Public Shared Sub ResetScale(transform As Transform)
  overload: TetraCreations.Core.TransformExtensions.ResetScale*
- uid: TetraCreations.Core.TransformExtensions.SetScaleAllAxes(Transform,System.Single)
  commentId: M:TetraCreations.Core.TransformExtensions.SetScaleAllAxes(Transform,System.Single)
  id: SetScaleAllAxes(Transform,System.Single)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: SetScaleAllAxes(Transform, float)
  nameWithType: TransformExtensions.SetScaleAllAxes(Transform, float)
  fullName: TetraCreations.Core.TransformExtensions.SetScaleAllAxes(Transform, float)
  type: Method
  source:
    id: SetScaleAllAxes
    path: ''
    startLine: 38289
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nSet the local scale for all axes.\n"
  example: []
  syntax:
    content: public static void SetScaleAllAxes(this Transform transform, float scaling)
    parameters:
    - id: transform
      type: Global.Transform
      description: ''
    - id: scaling
      type: System.Single
      description: ''
    content.vb: Public Shared Sub SetScaleAllAxes(transform As Transform, scaling As Single)
  overload: TetraCreations.Core.TransformExtensions.SetScaleAllAxes*
  nameWithType.vb: TransformExtensions.SetScaleAllAxes(Transform, Single)
  fullName.vb: TetraCreations.Core.TransformExtensions.SetScaleAllAxes(Transform, Single)
  name.vb: SetScaleAllAxes(Transform, Single)
- uid: TetraCreations.Core.TransformExtensions.Log(Transform)
  commentId: M:TetraCreations.Core.TransformExtensions.Log(Transform)
  id: Log(Transform)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: Log(Transform)
  nameWithType: TransformExtensions.Log(Transform)
  fullName: TetraCreations.Core.TransformExtensions.Log(Transform)
  type: Method
  source:
    id: Log
    path: ''
    startLine: 38299
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nShow all the transform values in the console (Position, LocalRotation, Scale)\n"
  example: []
  syntax:
    content: public static void Log(this Transform transform)
    parameters:
    - id: transform
      type: Global.Transform
    content.vb: Public Shared Sub Log(transform As Transform)
  overload: TetraCreations.Core.TransformExtensions.Log*
- uid: TetraCreations.Core.TransformExtensions.LogPosition(Transform)
  commentId: M:TetraCreations.Core.TransformExtensions.LogPosition(Transform)
  id: LogPosition(Transform)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: LogPosition(Transform)
  nameWithType: TransformExtensions.LogPosition(Transform)
  fullName: TetraCreations.Core.TransformExtensions.LogPosition(Transform)
  type: Method
  source:
    id: LogPosition
    path: ''
    startLine: 38311
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nShow the transform position values in the console\n"
  example: []
  syntax:
    content: public static void LogPosition(this Transform transform)
    parameters:
    - id: transform
      type: Global.Transform
    content.vb: Public Shared Sub LogPosition(transform As Transform)
  overload: TetraCreations.Core.TransformExtensions.LogPosition*
- uid: TetraCreations.Core.TransformExtensions.LogEulerAngles(Transform)
  commentId: M:TetraCreations.Core.TransformExtensions.LogEulerAngles(Transform)
  id: LogEulerAngles(Transform)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: LogEulerAngles(Transform)
  nameWithType: TransformExtensions.LogEulerAngles(Transform)
  fullName: TetraCreations.Core.TransformExtensions.LogEulerAngles(Transform)
  type: Method
  source:
    id: LogEulerAngles
    path: ''
    startLine: 38321
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nShow the transform local rotation euler angles values in the console\n"
  example: []
  syntax:
    content: public static void LogEulerAngles(this Transform transform)
    parameters:
    - id: transform
      type: Global.Transform
    content.vb: Public Shared Sub LogEulerAngles(transform As Transform)
  overload: TetraCreations.Core.TransformExtensions.LogEulerAngles*
- uid: TetraCreations.Core.TransformExtensions.LogScale(Transform)
  commentId: M:TetraCreations.Core.TransformExtensions.LogScale(Transform)
  id: LogScale(Transform)
  isExtensionMethod: true
  parent: TetraCreations.Core.TransformExtensions
  langs:
  - csharp
  - vb
  name: LogScale(Transform)
  nameWithType: TransformExtensions.LogScale(Transform)
  fullName: TetraCreations.Core.TransformExtensions.LogScale(Transform)
  type: Method
  source:
    id: LogScale
    path: ''
    startLine: 38331
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nShow the transform local scale values in the console\n"
  example: []
  syntax:
    content: public static void LogScale(this Transform transform)
    parameters:
    - id: transform
      type: Global.Transform
    content.vb: Public Shared Sub LogScale(transform As Transform)
  overload: TetraCreations.Core.TransformExtensions.LogScale*
references:
- uid: TetraCreations.Core
  commentId: N:TetraCreations.Core
  name: TetraCreations.Core
  nameWithType: TetraCreations.Core
  fullName: TetraCreations.Core
  spec.csharp:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  spec.vb:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TetraCreations.Core.TransformExtensions.GetComponentInChildren*
  commentId: Overload:TetraCreations.Core.TransformExtensions.GetComponentInChildren
  name: GetComponentInChildren
  nameWithType: TransformExtensions.GetComponentInChildren
  fullName: TetraCreations.Core.TransformExtensions.GetComponentInChildren
- uid: Global.Transform
  isExternal: true
  name: Transform
  nameWithType: Transform
  fullName: Transform
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TetraCreations.Core.TransformExtensions.SetPosition*
  commentId: Overload:TetraCreations.Core.TransformExtensions.SetPosition
  name: SetPosition
  nameWithType: TransformExtensions.SetPosition
  fullName: TetraCreations.Core.TransformExtensions.SetPosition
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: float?
  nameWithType: float?
  fullName: float?
  nameWithType.vb: Single?
  fullName.vb: Single?
  name.vb: Single?
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TetraCreations.Core.TransformExtensions.AddToPosition*
  commentId: Overload:TetraCreations.Core.TransformExtensions.AddToPosition
  name: AddToPosition
  nameWithType: TransformExtensions.AddToPosition
  fullName: TetraCreations.Core.TransformExtensions.AddToPosition
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TetraCreations.Core.TransformExtensions.SetRotation*
  commentId: Overload:TetraCreations.Core.TransformExtensions.SetRotation
  name: SetRotation
  nameWithType: TransformExtensions.SetRotation
  fullName: TetraCreations.Core.TransformExtensions.SetRotation
- uid: TetraCreations.Core.TransformExtensions.AddToRotation*
  commentId: Overload:TetraCreations.Core.TransformExtensions.AddToRotation
  name: AddToRotation
  nameWithType: TransformExtensions.AddToRotation
  fullName: TetraCreations.Core.TransformExtensions.AddToRotation
- uid: TetraCreations.Core.TransformExtensions.SetScale*
  commentId: Overload:TetraCreations.Core.TransformExtensions.SetScale
  name: SetScale
  nameWithType: TransformExtensions.SetScale
  fullName: TetraCreations.Core.TransformExtensions.SetScale
- uid: TetraCreations.Core.TransformExtensions.AddScale*
  commentId: Overload:TetraCreations.Core.TransformExtensions.AddScale
  name: AddScale
  nameWithType: TransformExtensions.AddScale
  fullName: TetraCreations.Core.TransformExtensions.AddScale
- uid: TetraCreations.Core.TransformExtensions.LookAt2D*
  commentId: Overload:TetraCreations.Core.TransformExtensions.LookAt2D
  name: LookAt2D
  nameWithType: TransformExtensions.LookAt2D
  fullName: TetraCreations.Core.TransformExtensions.LookAt2D
- uid: TetraCreations.Core.TransformExtensions.GetChild*
  commentId: Overload:TetraCreations.Core.TransformExtensions.GetChild
  name: GetChild
  nameWithType: TransformExtensions.GetChild
  fullName: TetraCreations.Core.TransformExtensions.GetChild
- uid: TetraCreations.Core.TransformExtensions.DestroyChildren*
  commentId: Overload:TetraCreations.Core.TransformExtensions.DestroyChildren
  name: DestroyChildren
  nameWithType: TransformExtensions.DestroyChildren
  fullName: TetraCreations.Core.TransformExtensions.DestroyChildren
- uid: Global.Func{Transform,System.Boolean}
  commentId: '!:Global.Func{Transform,System.Boolean}'
  definition: Global.Func`2
  name: Func<Transform, bool>
  nameWithType: Func<Transform, bool>
  fullName: Func<Transform, bool>
  nameWithType.vb: Func(Of Transform, Boolean)
  fullName.vb: Func(Of Transform, Boolean)
  name.vb: Func(Of Transform, Boolean)
  spec.csharp:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: Global.Transform
    name: Transform
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Transform
    name: Transform
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.TransformExtensions.DestroyChildrenImmediately*
  commentId: Overload:TetraCreations.Core.TransformExtensions.DestroyChildrenImmediately
  name: DestroyChildrenImmediately
  nameWithType: TransformExtensions.DestroyChildrenImmediately
  fullName: TetraCreations.Core.TransformExtensions.DestroyChildrenImmediately
- uid: TetraCreations.Core.TransformExtensions.ForEachChild*
  commentId: Overload:TetraCreations.Core.TransformExtensions.ForEachChild
  name: ForEachChild
  nameWithType: TransformExtensions.ForEachChild
  fullName: TetraCreations.Core.TransformExtensions.ForEachChild
- uid: Global.Action{Transform}
  commentId: '!:Global.Action{Transform}'
  definition: Global.Action`1
  name: Action<Transform>
  nameWithType: Action<Transform>
  fullName: Action<Transform>
  nameWithType.vb: Action(Of Transform)
  fullName.vb: Action(Of Transform)
  name.vb: Action(Of Transform)
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: Global.Transform
    name: Transform
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Transform
    name: Transform
    isExternal: true
  - name: )
- uid: Global.Action`1
  commentId: '!:Global.Action`1'
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.TransformExtensions.GetFirstChildrenTransforms*
  commentId: Overload:TetraCreations.Core.TransformExtensions.GetFirstChildrenTransforms
  name: GetFirstChildrenTransforms
  nameWithType: TransformExtensions.GetFirstChildrenTransforms
  fullName: TetraCreations.Core.TransformExtensions.GetFirstChildrenTransforms
- uid: Global.List{Transform}
  commentId: '!:Global.List{Transform}'
  definition: Global.List`1
  name: List<Transform>
  nameWithType: List<Transform>
  fullName: List<Transform>
  nameWithType.vb: List(Of Transform)
  fullName.vb: List(Of Transform)
  name.vb: List(Of Transform)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.Transform
    name: Transform
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Transform
    name: Transform
    isExternal: true
  - name: )
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.TransformExtensions.GetChildrenTransforms*
  commentId: Overload:TetraCreations.Core.TransformExtensions.GetChildrenTransforms
  name: GetChildrenTransforms
  nameWithType: TransformExtensions.GetChildrenTransforms
  fullName: TetraCreations.Core.TransformExtensions.GetChildrenTransforms
- uid: TetraCreations.Core.TransformExtensions.EnableChildren*
  commentId: Overload:TetraCreations.Core.TransformExtensions.EnableChildren
  name: EnableChildren
  nameWithType: TransformExtensions.EnableChildren
  fullName: TetraCreations.Core.TransformExtensions.EnableChildren
- uid: TetraCreations.Core.TransformExtensions.DisableChildren*
  commentId: Overload:TetraCreations.Core.TransformExtensions.DisableChildren
  name: DisableChildren
  nameWithType: TransformExtensions.DisableChildren
  fullName: TetraCreations.Core.TransformExtensions.DisableChildren
- uid: TetraCreations.Core.TransformExtensions.Reset*
  commentId: Overload:TetraCreations.Core.TransformExtensions.Reset
  name: Reset
  nameWithType: TransformExtensions.Reset
  fullName: TetraCreations.Core.TransformExtensions.Reset
- uid: TetraCreations.Core.TransformExtensions.ResetPosition*
  commentId: Overload:TetraCreations.Core.TransformExtensions.ResetPosition
  name: ResetPosition
  nameWithType: TransformExtensions.ResetPosition
  fullName: TetraCreations.Core.TransformExtensions.ResetPosition
- uid: TetraCreations.Core.TransformExtensions.ResetLocalRotation*
  commentId: Overload:TetraCreations.Core.TransformExtensions.ResetLocalRotation
  name: ResetLocalRotation
  nameWithType: TransformExtensions.ResetLocalRotation
  fullName: TetraCreations.Core.TransformExtensions.ResetLocalRotation
- uid: TetraCreations.Core.TransformExtensions.ResetScale*
  commentId: Overload:TetraCreations.Core.TransformExtensions.ResetScale
  name: ResetScale
  nameWithType: TransformExtensions.ResetScale
  fullName: TetraCreations.Core.TransformExtensions.ResetScale
- uid: TetraCreations.Core.TransformExtensions.SetScaleAllAxes*
  commentId: Overload:TetraCreations.Core.TransformExtensions.SetScaleAllAxes
  name: SetScaleAllAxes
  nameWithType: TransformExtensions.SetScaleAllAxes
  fullName: TetraCreations.Core.TransformExtensions.SetScaleAllAxes
- uid: TetraCreations.Core.TransformExtensions.Log*
  commentId: Overload:TetraCreations.Core.TransformExtensions.Log
  name: Log
  nameWithType: TransformExtensions.Log
  fullName: TetraCreations.Core.TransformExtensions.Log
- uid: TetraCreations.Core.TransformExtensions.LogPosition*
  commentId: Overload:TetraCreations.Core.TransformExtensions.LogPosition
  name: LogPosition
  nameWithType: TransformExtensions.LogPosition
  fullName: TetraCreations.Core.TransformExtensions.LogPosition
- uid: TetraCreations.Core.TransformExtensions.LogEulerAngles*
  commentId: Overload:TetraCreations.Core.TransformExtensions.LogEulerAngles
  name: LogEulerAngles
  nameWithType: TransformExtensions.LogEulerAngles
  fullName: TetraCreations.Core.TransformExtensions.LogEulerAngles
- uid: TetraCreations.Core.TransformExtensions.LogScale*
  commentId: Overload:TetraCreations.Core.TransformExtensions.LogScale
  name: LogScale
  nameWithType: TransformExtensions.LogScale
  fullName: TetraCreations.Core.TransformExtensions.LogScale
