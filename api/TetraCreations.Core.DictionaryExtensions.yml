### YamlMime:ManagedReference
items:
- uid: TetraCreations.Core.DictionaryExtensions
  commentId: T:TetraCreations.Core.DictionaryExtensions
  id: DictionaryExtensions
  parent: TetraCreations.Core
  children:
  - TetraCreations.Core.DictionaryExtensions.Add``2(IDictionary{``0,System.Object},``0,``1)
  - TetraCreations.Core.DictionaryExtensions.AddOrUpdate``2(IDictionary{``0,``1},``0,``1)
  - TetraCreations.Core.DictionaryExtensions.Filter``2(IDictionary{``0,``1},Func{``0,``1,System.Boolean})
  - TetraCreations.Core.DictionaryExtensions.FindKeysForValue``2(IDictionary{``0,``1},``1)
  - TetraCreations.Core.DictionaryExtensions.GetOrAdd``2(IDictionary{``0,``1},``0,``1)
  - TetraCreations.Core.DictionaryExtensions.GetValueOrDefault``2(IDictionary{``0,``1},``0,``1)
  - TetraCreations.Core.DictionaryExtensions.Log``2(IDictionary{``0,``1},System.String)
  - TetraCreations.Core.DictionaryExtensions.ReplaceValue``2(IDictionary{``0,``1},``0,``1)
  - TetraCreations.Core.DictionaryExtensions.SortByKey``2(IDictionary{``0,``1})
  - TetraCreations.Core.DictionaryExtensions.SortByValue``2(IDictionary{``0,``1})
  langs:
  - csharp
  - vb
  name: DictionaryExtensions
  nameWithType: DictionaryExtensions
  fullName: TetraCreations.Core.DictionaryExtensions
  type: Class
  source:
    id: DictionaryExtensions
    path: ''
    startLine: 36685
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  syntax:
    content: public static class DictionaryExtensions
    content.vb: Public Module DictionaryExtensions
  inheritance:
  - System.Object
- uid: TetraCreations.Core.DictionaryExtensions.GetValueOrDefault``2(IDictionary{``0,``1},``0,``1)
  commentId: M:TetraCreations.Core.DictionaryExtensions.GetValueOrDefault``2(IDictionary{``0,``1},``0,``1)
  id: GetValueOrDefault``2(IDictionary{``0,``1},``0,``1)
  isExtensionMethod: true
  parent: TetraCreations.Core.DictionaryExtensions
  langs:
  - csharp
  - vb
  name: GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  nameWithType: DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  fullName: TetraCreations.Core.DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  type: Method
  source:
    id: GetValueOrDefault
    path: ''
    startLine: 36696
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nGets the value associated with the specified key. Returns a default value if the key is not found.\n"
  example: []
  syntax:
    content: public static TValue GetValueOrDefault<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue)
    parameters:
    - id: dictionary
      type: Global.IDictionary{{TKey},{TValue}}
      description: ''
    - id: key
      type: '{TKey}'
      description: The key associated with the value
    - id: defaultValue
      type: '{TValue}'
      description: The value to returns if key doesn&apos;t exist
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: '{TValue}'
      description: ''
    content.vb: Public Shared Function GetValueOrDefault(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue), key As TKey, defaultValue As TValue) As TValue
  overload: TetraCreations.Core.DictionaryExtensions.GetValueOrDefault*
  nameWithType.vb: DictionaryExtensions.GetValueOrDefault(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  fullName.vb: TetraCreations.Core.DictionaryExtensions.GetValueOrDefault(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  name.vb: GetValueOrDefault(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
- uid: TetraCreations.Core.DictionaryExtensions.Add``2(IDictionary{``0,System.Object},``0,``1)
  commentId: M:TetraCreations.Core.DictionaryExtensions.Add``2(IDictionary{``0,System.Object},``0,``1)
  id: Add``2(IDictionary{``0,System.Object},``0,``1)
  isExtensionMethod: true
  parent: TetraCreations.Core.DictionaryExtensions
  langs:
  - csharp
  - vb
  name: Add<TKey, T>(IDictionary<TKey, object>, TKey, T)
  nameWithType: DictionaryExtensions.Add<TKey, T>(IDictionary<TKey, object>, TKey, T)
  fullName: TetraCreations.Core.DictionaryExtensions.Add<TKey, T>(IDictionary<TKey, object>, TKey, T)
  type: Method
  source:
    id: Add
    path: ''
    startLine: 36709
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nAdds T instance to the dictionary, so we can store any object.\n"
  example: []
  syntax:
    content: 'public static void Add<TKey, T>(this IDictionary<TKey, object> dictionary, TKey key, T value) where T : class'
    parameters:
    - id: dictionary
      type: Global.IDictionary{{TKey},System.Object}
      description: ''
    - id: key
      type: '{TKey}'
      description: ''
    - id: value
      type: '{T}'
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: T
      description: ''
    content.vb: Public Shared Sub Add(Of TKey, T As Class)(dictionary As IDictionary(Of TKey, Object), key As TKey, value As T)
  overload: TetraCreations.Core.DictionaryExtensions.Add*
  nameWithType.vb: DictionaryExtensions.Add(Of TKey, T)(IDictionary(Of TKey, Object), TKey, T)
  fullName.vb: TetraCreations.Core.DictionaryExtensions.Add(Of TKey, T)(IDictionary(Of TKey, Object), TKey, T)
  name.vb: Add(Of TKey, T)(IDictionary(Of TKey, Object), TKey, T)
- uid: TetraCreations.Core.DictionaryExtensions.GetOrAdd``2(IDictionary{``0,``1},``0,``1)
  commentId: M:TetraCreations.Core.DictionaryExtensions.GetOrAdd``2(IDictionary{``0,``1},``0,``1)
  id: GetOrAdd``2(IDictionary{``0,``1},``0,``1)
  isExtensionMethod: true
  parent: TetraCreations.Core.DictionaryExtensions
  langs:
  - csharp
  - vb
  name: GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  nameWithType: DictionaryExtensions.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  fullName: TetraCreations.Core.DictionaryExtensions.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  type: Method
  source:
    id: GetOrAdd
    path: ''
    startLine: 36723
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nTries to get the value by key, if it doesn&apos;t exist it will add it.\n"
  example: []
  syntax:
    content: public static TValue GetOrAdd<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue value)
    parameters:
    - id: dictionary
      type: Global.IDictionary{{TKey},{TValue}}
      description: ''
    - id: key
      type: '{TKey}'
      description: ''
    - id: value
      type: '{TValue}'
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: '{TValue}'
      description: The value
    content.vb: Public Shared Function GetOrAdd(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue), key As TKey, value As TValue) As TValue
  overload: TetraCreations.Core.DictionaryExtensions.GetOrAdd*
  nameWithType.vb: DictionaryExtensions.GetOrAdd(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  fullName.vb: TetraCreations.Core.DictionaryExtensions.GetOrAdd(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  name.vb: GetOrAdd(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
- uid: TetraCreations.Core.DictionaryExtensions.AddOrUpdate``2(IDictionary{``0,``1},``0,``1)
  commentId: M:TetraCreations.Core.DictionaryExtensions.AddOrUpdate``2(IDictionary{``0,``1},``0,``1)
  id: AddOrUpdate``2(IDictionary{``0,``1},``0,``1)
  isExtensionMethod: true
  parent: TetraCreations.Core.DictionaryExtensions
  langs:
  - csharp
  - vb
  name: AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  nameWithType: DictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  fullName: TetraCreations.Core.DictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  type: Method
  source:
    id: AddOrUpdate
    path: ''
    startLine: 36742
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nTries to add if the key do not exist, otherwise it will replace its value.\n"
  example: []
  syntax:
    content: public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue value)
    parameters:
    - id: dictionary
      type: Global.IDictionary{{TKey},{TValue}}
      description: ''
    - id: key
      type: '{TKey}'
      description: ''
    - id: value
      type: '{TValue}'
      description: The value to add or replace
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: '{TValue}'
      description: The value added/updated
    content.vb: Public Shared Function AddOrUpdate(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue), key As TKey, value As TValue) As TValue
  overload: TetraCreations.Core.DictionaryExtensions.AddOrUpdate*
  nameWithType.vb: DictionaryExtensions.AddOrUpdate(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  fullName.vb: TetraCreations.Core.DictionaryExtensions.AddOrUpdate(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  name.vb: AddOrUpdate(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
- uid: TetraCreations.Core.DictionaryExtensions.ReplaceValue``2(IDictionary{``0,``1},``0,``1)
  commentId: M:TetraCreations.Core.DictionaryExtensions.ReplaceValue``2(IDictionary{``0,``1},``0,``1)
  id: ReplaceValue``2(IDictionary{``0,``1},``0,``1)
  isExtensionMethod: true
  parent: TetraCreations.Core.DictionaryExtensions
  langs:
  - csharp
  - vb
  name: ReplaceValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  nameWithType: DictionaryExtensions.ReplaceValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  fullName: TetraCreations.Core.DictionaryExtensions.ReplaceValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  type: Method
  source:
    id: ReplaceValue
    path: ''
    startLine: 36765
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nTries to replace a value inside the dictionary from the key.\n"
  example: []
  syntax:
    content: public static bool ReplaceValue<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue value)
    parameters:
    - id: dictionary
      type: Global.IDictionary{{TKey},{TValue}}
      description: ''
    - id: key
      type: '{TKey}'
      description: ''
    - id: value
      type: '{TValue}'
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: System.Boolean
      description: False if doesn&apos;t contain the key
    content.vb: Public Shared Function ReplaceValue(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue), key As TKey, value As TValue) As Boolean
  overload: TetraCreations.Core.DictionaryExtensions.ReplaceValue*
  nameWithType.vb: DictionaryExtensions.ReplaceValue(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  fullName.vb: TetraCreations.Core.DictionaryExtensions.ReplaceValue(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  name.vb: ReplaceValue(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
- uid: TetraCreations.Core.DictionaryExtensions.Filter``2(IDictionary{``0,``1},Func{``0,``1,System.Boolean})
  commentId: M:TetraCreations.Core.DictionaryExtensions.Filter``2(IDictionary{``0,``1},Func{``0,``1,System.Boolean})
  id: Filter``2(IDictionary{``0,``1},Func{``0,``1,System.Boolean})
  isExtensionMethod: true
  parent: TetraCreations.Core.DictionaryExtensions
  langs:
  - csharp
  - vb
  name: Filter<TKey, TValue>(IDictionary<TKey, TValue>, Func<TKey, TValue, bool>)
  nameWithType: DictionaryExtensions.Filter<TKey, TValue>(IDictionary<TKey, TValue>, Func<TKey, TValue, bool>)
  fullName: TetraCreations.Core.DictionaryExtensions.Filter<TKey, TValue>(IDictionary<TKey, TValue>, Func<TKey, TValue, bool>)
  type: Method
  source:
    id: Filter
    path: ''
    startLine: 36785
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nFilters the dictionary based on a predicate.\n"
  example: []
  syntax:
    content: public static IDictionary<TKey, TValue> Filter<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, Func<TKey, TValue, bool> predicate)
    parameters:
    - id: dictionary
      type: Global.IDictionary{{TKey},{TValue}}
      description: ''
    - id: predicate
      type: Global.Func{{TKey},{TValue},System.Boolean}
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: Global.IDictionary{{TKey},{TValue}}
      description: ''
    content.vb: Public Shared Function Filter(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue), predicate As Func(Of TKey, TValue, Boolean)) As IDictionary(Of TKey, TValue)
  overload: TetraCreations.Core.DictionaryExtensions.Filter*
  nameWithType.vb: DictionaryExtensions.Filter(Of TKey, TValue)(IDictionary(Of TKey, TValue), Func(Of TKey, TValue, Boolean))
  fullName.vb: TetraCreations.Core.DictionaryExtensions.Filter(Of TKey, TValue)(IDictionary(Of TKey, TValue), Func(Of TKey, TValue, Boolean))
  name.vb: Filter(Of TKey, TValue)(IDictionary(Of TKey, TValue), Func(Of TKey, TValue, Boolean))
- uid: TetraCreations.Core.DictionaryExtensions.SortByKey``2(IDictionary{``0,``1})
  commentId: M:TetraCreations.Core.DictionaryExtensions.SortByKey``2(IDictionary{``0,``1})
  id: SortByKey``2(IDictionary{``0,``1})
  isExtensionMethod: true
  parent: TetraCreations.Core.DictionaryExtensions
  langs:
  - csharp
  - vb
  name: SortByKey<TKey, TValue>(IDictionary<TKey, TValue>)
  nameWithType: DictionaryExtensions.SortByKey<TKey, TValue>(IDictionary<TKey, TValue>)
  fullName: TetraCreations.Core.DictionaryExtensions.SortByKey<TKey, TValue>(IDictionary<TKey, TValue>)
  type: Method
  source:
    id: SortByKey
    path: ''
    startLine: 36806
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nSorts the dictionary by its keys.\n"
  example: []
  syntax:
    content: public static IDictionary<TKey, TValue> SortByKey<TKey, TValue>(this IDictionary<TKey, TValue> dictionary)
    parameters:
    - id: dictionary
      type: Global.IDictionary{{TKey},{TValue}}
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: Global.IDictionary{{TKey},{TValue}}
      description: ''
    content.vb: Public Shared Function SortByKey(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue)) As IDictionary(Of TKey, TValue)
  overload: TetraCreations.Core.DictionaryExtensions.SortByKey*
  nameWithType.vb: DictionaryExtensions.SortByKey(Of TKey, TValue)(IDictionary(Of TKey, TValue))
  fullName.vb: TetraCreations.Core.DictionaryExtensions.SortByKey(Of TKey, TValue)(IDictionary(Of TKey, TValue))
  name.vb: SortByKey(Of TKey, TValue)(IDictionary(Of TKey, TValue))
- uid: TetraCreations.Core.DictionaryExtensions.SortByValue``2(IDictionary{``0,``1})
  commentId: M:TetraCreations.Core.DictionaryExtensions.SortByValue``2(IDictionary{``0,``1})
  id: SortByValue``2(IDictionary{``0,``1})
  isExtensionMethod: true
  parent: TetraCreations.Core.DictionaryExtensions
  langs:
  - csharp
  - vb
  name: SortByValue<TKey, TValue>(IDictionary<TKey, TValue>)
  nameWithType: DictionaryExtensions.SortByValue<TKey, TValue>(IDictionary<TKey, TValue>)
  fullName: TetraCreations.Core.DictionaryExtensions.SortByValue<TKey, TValue>(IDictionary<TKey, TValue>)
  type: Method
  source:
    id: SortByValue
    path: ''
    startLine: 36818
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nSorts the dictionary by its values.\n"
  example: []
  syntax:
    content: public static IOrderedEnumerable<KeyValuePair<TKey, TValue>> SortByValue<TKey, TValue>(this IDictionary<TKey, TValue> dictionary)
    parameters:
    - id: dictionary
      type: Global.IDictionary{{TKey},{TValue}}
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: Global.IOrderedEnumerable{KeyValuePair{{TKey},{TValue}}}
      description: ''
    content.vb: Public Shared Function SortByValue(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue)) As IOrderedEnumerable(Of KeyValuePair(Of TKey, TValue))
  overload: TetraCreations.Core.DictionaryExtensions.SortByValue*
  nameWithType.vb: DictionaryExtensions.SortByValue(Of TKey, TValue)(IDictionary(Of TKey, TValue))
  fullName.vb: TetraCreations.Core.DictionaryExtensions.SortByValue(Of TKey, TValue)(IDictionary(Of TKey, TValue))
  name.vb: SortByValue(Of TKey, TValue)(IDictionary(Of TKey, TValue))
- uid: TetraCreations.Core.DictionaryExtensions.FindKeysForValue``2(IDictionary{``0,``1},``1)
  commentId: M:TetraCreations.Core.DictionaryExtensions.FindKeysForValue``2(IDictionary{``0,``1},``1)
  id: FindKeysForValue``2(IDictionary{``0,``1},``1)
  isExtensionMethod: true
  parent: TetraCreations.Core.DictionaryExtensions
  langs:
  - csharp
  - vb
  name: FindKeysForValue<TKey, TValue>(IDictionary<TKey, TValue>, TValue)
  nameWithType: DictionaryExtensions.FindKeysForValue<TKey, TValue>(IDictionary<TKey, TValue>, TValue)
  fullName: TetraCreations.Core.DictionaryExtensions.FindKeysForValue<TKey, TValue>(IDictionary<TKey, TValue>, TValue)
  type: Method
  source:
    id: FindKeysForValue
    path: ''
    startLine: 36831
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nFinds all keys that have the given value.\n"
  example: []
  syntax:
    content: public static IEnumerable<TKey> FindKeysForValue<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TValue value)
    parameters:
    - id: dictionary
      type: Global.IDictionary{{TKey},{TValue}}
      description: ''
    - id: value
      type: '{TValue}'
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: Global.IEnumerable{{TKey}}
      description: ''
    content.vb: Public Shared Function FindKeysForValue(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue), value As TValue) As IEnumerable(Of TKey)
  overload: TetraCreations.Core.DictionaryExtensions.FindKeysForValue*
  nameWithType.vb: DictionaryExtensions.FindKeysForValue(Of TKey, TValue)(IDictionary(Of TKey, TValue), TValue)
  fullName.vb: TetraCreations.Core.DictionaryExtensions.FindKeysForValue(Of TKey, TValue)(IDictionary(Of TKey, TValue), TValue)
  name.vb: FindKeysForValue(Of TKey, TValue)(IDictionary(Of TKey, TValue), TValue)
- uid: TetraCreations.Core.DictionaryExtensions.Log``2(IDictionary{``0,``1},System.String)
  commentId: M:TetraCreations.Core.DictionaryExtensions.Log``2(IDictionary{``0,``1},System.String)
  id: Log``2(IDictionary{``0,``1},System.String)
  parent: TetraCreations.Core.DictionaryExtensions
  langs:
  - csharp
  - vb
  name: Log<TKey, TValue>(IDictionary<TKey, TValue>, string)
  nameWithType: DictionaryExtensions.Log<TKey, TValue>(IDictionary<TKey, TValue>, string)
  fullName: TetraCreations.Core.DictionaryExtensions.Log<TKey, TValue>(IDictionary<TKey, TValue>, string)
  type: Method
  source:
    id: Log
    path: ''
    startLine: 36843
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  syntax:
    content: public static void Log<TKey, TValue>(IDictionary<TKey, TValue> dictionary, string separator = "|")
    parameters:
    - id: dictionary
      type: Global.IDictionary{{TKey},{TValue}}
    - id: separator
      type: System.String
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: Public Shared Sub Log(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue), separator As String = "|")
  overload: TetraCreations.Core.DictionaryExtensions.Log*
  nameWithType.vb: DictionaryExtensions.Log(Of TKey, TValue)(IDictionary(Of TKey, TValue), String)
  fullName.vb: TetraCreations.Core.DictionaryExtensions.Log(Of TKey, TValue)(IDictionary(Of TKey, TValue), String)
  name.vb: Log(Of TKey, TValue)(IDictionary(Of TKey, TValue), String)
references:
- uid: TetraCreations.Core
  commentId: N:TetraCreations.Core
  name: TetraCreations.Core
  nameWithType: TetraCreations.Core
  fullName: TetraCreations.Core
  spec.csharp:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  spec.vb:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TetraCreations.Core.DictionaryExtensions.GetValueOrDefault*
  commentId: Overload:TetraCreations.Core.DictionaryExtensions.GetValueOrDefault
  name: GetValueOrDefault
  nameWithType: DictionaryExtensions.GetValueOrDefault
  fullName: TetraCreations.Core.DictionaryExtensions.GetValueOrDefault
- uid: Global.IDictionary{{TKey},{TValue}}
  commentId: '!:Global.IDictionary{``0,``1}'
  definition: Global.IDictionary`2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: Global.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Global.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Global.IDictionary`2
  isExternal: true
  name: IDictionary<, >
  nameWithType: IDictionary<, >
  fullName: IDictionary<, >
  nameWithType.vb: IDictionary(Of , )
  fullName.vb: IDictionary(Of , )
  name.vb: IDictionary(Of , )
  spec.csharp:
  - uid: Global.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TetraCreations.Core.DictionaryExtensions.Add*
  commentId: Overload:TetraCreations.Core.DictionaryExtensions.Add
  name: Add
  nameWithType: DictionaryExtensions.Add
  fullName: TetraCreations.Core.DictionaryExtensions.Add
- uid: Global.IDictionary{{TKey},System.Object}
  commentId: '!:Global.IDictionary{``0,System.Object}'
  definition: Global.IDictionary`2
  name: IDictionary<TKey, object>
  nameWithType: IDictionary<TKey, object>
  fullName: IDictionary<TKey, object>
  nameWithType.vb: IDictionary(Of TKey, Object)
  fullName.vb: IDictionary(Of TKey, Object)
  name.vb: IDictionary(Of TKey, Object)
  spec.csharp:
  - uid: Global.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TetraCreations.Core.DictionaryExtensions.GetOrAdd*
  commentId: Overload:TetraCreations.Core.DictionaryExtensions.GetOrAdd
  name: GetOrAdd
  nameWithType: DictionaryExtensions.GetOrAdd
  fullName: TetraCreations.Core.DictionaryExtensions.GetOrAdd
- uid: TetraCreations.Core.DictionaryExtensions.AddOrUpdate*
  commentId: Overload:TetraCreations.Core.DictionaryExtensions.AddOrUpdate
  name: AddOrUpdate
  nameWithType: DictionaryExtensions.AddOrUpdate
  fullName: TetraCreations.Core.DictionaryExtensions.AddOrUpdate
- uid: TetraCreations.Core.DictionaryExtensions.ReplaceValue*
  commentId: Overload:TetraCreations.Core.DictionaryExtensions.ReplaceValue
  name: ReplaceValue
  nameWithType: DictionaryExtensions.ReplaceValue
  fullName: TetraCreations.Core.DictionaryExtensions.ReplaceValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TetraCreations.Core.DictionaryExtensions.Filter*
  commentId: Overload:TetraCreations.Core.DictionaryExtensions.Filter
  name: Filter
  nameWithType: DictionaryExtensions.Filter
  fullName: TetraCreations.Core.DictionaryExtensions.Filter
- uid: Global.Func{{TKey},{TValue},System.Boolean}
  commentId: '!:Global.Func{``0,``1,System.Boolean}'
  definition: Global.Func`3
  name: Func<TKey, TValue, bool>
  nameWithType: Func<TKey, TValue, bool>
  fullName: Func<TKey, TValue, bool>
  nameWithType.vb: Func(Of TKey, TValue, Boolean)
  fullName.vb: Func(Of TKey, TValue, Boolean)
  name.vb: Func(Of TKey, TValue, Boolean)
  spec.csharp:
  - uid: Global.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.Func`3
  commentId: '!:Global.Func`3'
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Global.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.DictionaryExtensions.SortByKey*
  commentId: Overload:TetraCreations.Core.DictionaryExtensions.SortByKey
  name: SortByKey
  nameWithType: DictionaryExtensions.SortByKey
  fullName: TetraCreations.Core.DictionaryExtensions.SortByKey
- uid: TetraCreations.Core.DictionaryExtensions.SortByValue*
  commentId: Overload:TetraCreations.Core.DictionaryExtensions.SortByValue
  name: SortByValue
  nameWithType: DictionaryExtensions.SortByValue
  fullName: TetraCreations.Core.DictionaryExtensions.SortByValue
- uid: Global.IOrderedEnumerable{KeyValuePair{{TKey},{TValue}}}
  commentId: '!:Global.IOrderedEnumerable{KeyValuePair{``0,``1}}'
  definition: Global.IOrderedEnumerable`1
  name: IOrderedEnumerable<KeyValuePair<TKey, TValue>>
  nameWithType: IOrderedEnumerable<KeyValuePair<TKey, TValue>>
  fullName: IOrderedEnumerable<KeyValuePair<TKey, TValue>>
  nameWithType.vb: IOrderedEnumerable(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: IOrderedEnumerable(Of KeyValuePair(Of TKey, TValue))
  name.vb: IOrderedEnumerable(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: Global.IOrderedEnumerable`1
    name: IOrderedEnumerable
    isExternal: true
  - name: <
  - uid: Global.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Global.IOrderedEnumerable`1
    name: IOrderedEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: Global.IOrderedEnumerable`1
  commentId: '!:Global.IOrderedEnumerable`1'
  isExternal: true
  name: IOrderedEnumerable<>
  nameWithType: IOrderedEnumerable<>
  fullName: IOrderedEnumerable<>
  nameWithType.vb: IOrderedEnumerable(Of )
  fullName.vb: IOrderedEnumerable(Of )
  name.vb: IOrderedEnumerable(Of )
  spec.csharp:
  - uid: Global.IOrderedEnumerable`1
    name: IOrderedEnumerable
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.IOrderedEnumerable`1
    name: IOrderedEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.DictionaryExtensions.FindKeysForValue*
  commentId: Overload:TetraCreations.Core.DictionaryExtensions.FindKeysForValue
  name: FindKeysForValue
  nameWithType: DictionaryExtensions.FindKeysForValue
  fullName: TetraCreations.Core.DictionaryExtensions.FindKeysForValue
- uid: Global.IEnumerable{{TKey}}
  commentId: '!:Global.IEnumerable{``0}'
  definition: Global.IEnumerable`1
  name: IEnumerable<TKey>
  nameWithType: IEnumerable<TKey>
  fullName: IEnumerable<TKey>
  nameWithType.vb: IEnumerable(Of TKey)
  fullName.vb: IEnumerable(Of TKey)
  name.vb: IEnumerable(Of TKey)
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: Global.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.DictionaryExtensions.Log*
  commentId: Overload:TetraCreations.Core.DictionaryExtensions.Log
  name: Log
  nameWithType: DictionaryExtensions.Log
  fullName: TetraCreations.Core.DictionaryExtensions.Log
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
