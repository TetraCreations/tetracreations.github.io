### YamlMime:ManagedReference
items:
- uid: TetraCreations.Core.StringExtensions
  commentId: T:TetraCreations.Core.StringExtensions
  id: StringExtensions
  parent: TetraCreations.Core
  children:
  - TetraCreations.Core.StringExtensions.Concat(System.String,System.String,System.String)
  - TetraCreations.Core.StringExtensions.Concat(System.String,System.String)
  - TetraCreations.Core.StringExtensions.Extract(System.String,Func{System.Char,System.Boolean})
  - TetraCreations.Core.StringExtensions.ExtractInt32(System.String)
  - TetraCreations.Core.StringExtensions.Format(System.String,System.Object[])
  - TetraCreations.Core.StringExtensions.GetAfter(System.String,System.String)
  - TetraCreations.Core.StringExtensions.GetBefore(System.String,System.String)
  - TetraCreations.Core.StringExtensions.GetBetween(System.String,System.String,System.String)
  - TetraCreations.Core.StringExtensions.GetInvalidFilenameCharacters(System.String)
  - TetraCreations.Core.StringExtensions.GetInvalidPathCharacters(System.String)
  - TetraCreations.Core.StringExtensions.HasAnyInvalidChars(System.String)
  - TetraCreations.Core.StringExtensions.IsNnotNullOrEmpty(System.String)
  - TetraCreations.Core.StringExtensions.IsNullOrEmpty(System.String)
  - TetraCreations.Core.StringExtensions.Log(System.String,TetraCreations.Core.DebugLevel,System.Boolean)
  - TetraCreations.Core.StringExtensions.ParsePercentageToFloat(System.String)
  - TetraCreations.Core.StringExtensions.RemoveInvalidChars(System.String)
  - TetraCreations.Core.StringExtensions.RemoveSpaces(System.String)
  - TetraCreations.Core.StringExtensions.ToIntOrNull(System.String)
  - TetraCreations.Core.StringExtensions.ToSentenceCase(System.String)
  - TetraCreations.Core.StringExtensions.UppercaseFirst(System.String)
  langs:
  - csharp
  - vb
  name: StringExtensions
  nameWithType: StringExtensions
  fullName: TetraCreations.Core.StringExtensions
  type: Class
  source:
    id: StringExtensions
    path: ''
    startLine: 37743
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  syntax:
    content: public static class StringExtensions
    content.vb: Public Module StringExtensions
  inheritance:
  - System.Object
- uid: TetraCreations.Core.StringExtensions.IsNullOrEmpty(System.String)
  commentId: M:TetraCreations.Core.StringExtensions.IsNullOrEmpty(System.String)
  id: IsNullOrEmpty(System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty(string)
  nameWithType: StringExtensions.IsNullOrEmpty(string)
  fullName: TetraCreations.Core.StringExtensions.IsNullOrEmpty(string)
  type: Method
  source:
    id: IsNullOrEmpty
    path: ''
    startLine: 37750
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nAllow to use string.IsNullOrEmpty directly from the string\n"
  example: []
  syntax:
    content: public static bool IsNullOrEmpty(this string value)
    parameters:
    - id: value
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsNullOrEmpty(value As String) As Boolean
  overload: TetraCreations.Core.StringExtensions.IsNullOrEmpty*
  nameWithType.vb: StringExtensions.IsNullOrEmpty(String)
  fullName.vb: TetraCreations.Core.StringExtensions.IsNullOrEmpty(String)
  name.vb: IsNullOrEmpty(String)
- uid: TetraCreations.Core.StringExtensions.IsNnotNullOrEmpty(System.String)
  commentId: M:TetraCreations.Core.StringExtensions.IsNnotNullOrEmpty(System.String)
  id: IsNnotNullOrEmpty(System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: IsNnotNullOrEmpty(string)
  nameWithType: StringExtensions.IsNnotNullOrEmpty(string)
  fullName: TetraCreations.Core.StringExtensions.IsNnotNullOrEmpty(string)
  type: Method
  source:
    id: IsNnotNullOrEmpty
    path: ''
    startLine: 37760
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturns true if the string is Not null or empty\n"
  example: []
  syntax:
    content: public static bool IsNnotNullOrEmpty(this string value)
    parameters:
    - id: value
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsNnotNullOrEmpty(value As String) As Boolean
  overload: TetraCreations.Core.StringExtensions.IsNnotNullOrEmpty*
  nameWithType.vb: StringExtensions.IsNnotNullOrEmpty(String)
  fullName.vb: TetraCreations.Core.StringExtensions.IsNnotNullOrEmpty(String)
  name.vb: IsNnotNullOrEmpty(String)
- uid: TetraCreations.Core.StringExtensions.Format(System.String,System.Object[])
  commentId: M:TetraCreations.Core.StringExtensions.Format(System.String,System.Object[])
  id: Format(System.String,System.Object[])
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: Format(string, params object[])
  nameWithType: StringExtensions.Format(string, params object[])
  fullName: TetraCreations.Core.StringExtensions.Format(string, params object[])
  type: Method
  source:
    id: Format
    path: ''
    startLine: 37771
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nAllow to use string.Format directly from the string like &quot;Hello {0}&quot;.Format(&quot;World&quot;), output => Hello World\n"
  example: []
  syntax:
    content: public static string Format(this string format, params object[] args)
    parameters:
    - id: format
      type: System.String
      description: ''
    - id: args
      type: System.Object[]
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function Format(format As String, ParamArray args As Object()) As String
  overload: TetraCreations.Core.StringExtensions.Format*
  nameWithType.vb: StringExtensions.Format(String, ParamArray Object())
  fullName.vb: TetraCreations.Core.StringExtensions.Format(String, ParamArray Object())
  name.vb: Format(String, ParamArray Object())
- uid: TetraCreations.Core.StringExtensions.RemoveSpaces(System.String)
  commentId: M:TetraCreations.Core.StringExtensions.RemoveSpaces(System.String)
  id: RemoveSpaces(System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: RemoveSpaces(string)
  nameWithType: StringExtensions.RemoveSpaces(string)
  fullName: TetraCreations.Core.StringExtensions.RemoveSpaces(string)
  type: Method
  source:
    id: RemoveSpaces
    path: ''
    startLine: 37781
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturn the string without any spaces.\n"
  example: []
  syntax:
    content: public static string RemoveSpaces(this string source)
    parameters:
    - id: source
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function RemoveSpaces(source As String) As String
  overload: TetraCreations.Core.StringExtensions.RemoveSpaces*
  nameWithType.vb: StringExtensions.RemoveSpaces(String)
  fullName.vb: TetraCreations.Core.StringExtensions.RemoveSpaces(String)
  name.vb: RemoveSpaces(String)
- uid: TetraCreations.Core.StringExtensions.ParsePercentageToFloat(System.String)
  commentId: M:TetraCreations.Core.StringExtensions.ParsePercentageToFloat(System.String)
  id: ParsePercentageToFloat(System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: ParsePercentageToFloat(string)
  nameWithType: StringExtensions.ParsePercentageToFloat(string)
  fullName: TetraCreations.Core.StringExtensions.ParsePercentageToFloat(string)
  type: Method
  source:
    id: ParsePercentageToFloat
    path: ''
    startLine: 37791
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nConverts the string formated as a percentage to float value, for example &apos;10.2%&apos;.ParsePercentageString() returns 10.2f\n"
  example: []
  syntax:
    content: public static float ParsePercentageToFloat(this string value)
    parameters:
    - id: value
      type: System.String
      description: ''
    return:
      type: System.Single
      description: ''
    content.vb: Public Shared Function ParsePercentageToFloat(value As String) As Single
  overload: TetraCreations.Core.StringExtensions.ParsePercentageToFloat*
  nameWithType.vb: StringExtensions.ParsePercentageToFloat(String)
  fullName.vb: TetraCreations.Core.StringExtensions.ParsePercentageToFloat(String)
  name.vb: ParsePercentageToFloat(String)
- uid: TetraCreations.Core.StringExtensions.UppercaseFirst(System.String)
  commentId: M:TetraCreations.Core.StringExtensions.UppercaseFirst(System.String)
  id: UppercaseFirst(System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: UppercaseFirst(string)
  nameWithType: StringExtensions.UppercaseFirst(string)
  fullName: TetraCreations.Core.StringExtensions.UppercaseFirst(string)
  type: Method
  source:
    id: UppercaseFirst
    path: ''
    startLine: 37807
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nSet the first character to upper case.\n"
  example: []
  syntax:
    content: public static string UppercaseFirst(this string source)
    parameters:
    - id: source
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function UppercaseFirst(source As String) As String
  overload: TetraCreations.Core.StringExtensions.UppercaseFirst*
  nameWithType.vb: StringExtensions.UppercaseFirst(String)
  fullName.vb: TetraCreations.Core.StringExtensions.UppercaseFirst(String)
  name.vb: UppercaseFirst(String)
- uid: TetraCreations.Core.StringExtensions.RemoveInvalidChars(System.String)
  commentId: M:TetraCreations.Core.StringExtensions.RemoveInvalidChars(System.String)
  id: RemoveInvalidChars(System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: RemoveInvalidChars(string)
  nameWithType: StringExtensions.RemoveInvalidChars(string)
  fullName: TetraCreations.Core.StringExtensions.RemoveInvalidChars(string)
  type: Method
  source:
    id: RemoveInvalidChars
    path: ''
    startLine: 37823
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturn a string without any invalid character as a file name.\n"
  example: []
  syntax:
    content: public static string RemoveInvalidChars(this string source)
    parameters:
    - id: source
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function RemoveInvalidChars(source As String) As String
  overload: TetraCreations.Core.StringExtensions.RemoveInvalidChars*
  nameWithType.vb: StringExtensions.RemoveInvalidChars(String)
  fullName.vb: TetraCreations.Core.StringExtensions.RemoveInvalidChars(String)
  name.vb: RemoveInvalidChars(String)
- uid: TetraCreations.Core.StringExtensions.HasAnyInvalidChars(System.String)
  commentId: M:TetraCreations.Core.StringExtensions.HasAnyInvalidChars(System.String)
  id: HasAnyInvalidChars(System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: HasAnyInvalidChars(string)
  nameWithType: StringExtensions.HasAnyInvalidChars(string)
  fullName: TetraCreations.Core.StringExtensions.HasAnyInvalidChars(string)
  type: Method
  source:
    id: HasAnyInvalidChars
    path: ''
    startLine: 37833
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermine if a string has any invalid character as a file name.\n"
  example: []
  syntax:
    content: public static bool HasAnyInvalidChars(this string source)
    parameters:
    - id: source
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function HasAnyInvalidChars(source As String) As Boolean
  overload: TetraCreations.Core.StringExtensions.HasAnyInvalidChars*
  nameWithType.vb: StringExtensions.HasAnyInvalidChars(String)
  fullName.vb: TetraCreations.Core.StringExtensions.HasAnyInvalidChars(String)
  name.vb: HasAnyInvalidChars(String)
- uid: TetraCreations.Core.StringExtensions.GetInvalidFilenameCharacters(System.String)
  commentId: M:TetraCreations.Core.StringExtensions.GetInvalidFilenameCharacters(System.String)
  id: GetInvalidFilenameCharacters(System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: GetInvalidFilenameCharacters(string)
  nameWithType: StringExtensions.GetInvalidFilenameCharacters(string)
  fullName: TetraCreations.Core.StringExtensions.GetInvalidFilenameCharacters(string)
  type: Method
  source:
    id: GetInvalidFilenameCharacters
    path: ''
    startLine: 37843
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturn an IEnumerable of char which are invalid for a file name.\n"
  example: []
  syntax:
    content: public static IEnumerable<char> GetInvalidFilenameCharacters(this string source)
    parameters:
    - id: source
      type: System.String
      description: ''
    return:
      type: Global.IEnumerable{System.Char}
      description: ''
    content.vb: Public Shared Function GetInvalidFilenameCharacters(source As String) As IEnumerable(Of Char)
  overload: TetraCreations.Core.StringExtensions.GetInvalidFilenameCharacters*
  nameWithType.vb: StringExtensions.GetInvalidFilenameCharacters(String)
  fullName.vb: TetraCreations.Core.StringExtensions.GetInvalidFilenameCharacters(String)
  name.vb: GetInvalidFilenameCharacters(String)
- uid: TetraCreations.Core.StringExtensions.GetInvalidPathCharacters(System.String)
  commentId: M:TetraCreations.Core.StringExtensions.GetInvalidPathCharacters(System.String)
  id: GetInvalidPathCharacters(System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: GetInvalidPathCharacters(string)
  nameWithType: StringExtensions.GetInvalidPathCharacters(string)
  fullName: TetraCreations.Core.StringExtensions.GetInvalidPathCharacters(string)
  type: Method
  source:
    id: GetInvalidPathCharacters
    path: ''
    startLine: 37853
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturn an IEnumerable of char which are invalid for a file name.\n"
  example: []
  syntax:
    content: public static IEnumerable<char> GetInvalidPathCharacters(this string source)
    parameters:
    - id: source
      type: System.String
      description: ''
    return:
      type: Global.IEnumerable{System.Char}
      description: ''
    content.vb: Public Shared Function GetInvalidPathCharacters(source As String) As IEnumerable(Of Char)
  overload: TetraCreations.Core.StringExtensions.GetInvalidPathCharacters*
  nameWithType.vb: StringExtensions.GetInvalidPathCharacters(String)
  fullName.vb: TetraCreations.Core.StringExtensions.GetInvalidPathCharacters(String)
  name.vb: GetInvalidPathCharacters(String)
- uid: TetraCreations.Core.StringExtensions.GetAfter(System.String,System.String)
  commentId: M:TetraCreations.Core.StringExtensions.GetAfter(System.String,System.String)
  id: GetAfter(System.String,System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: GetAfter(string, string)
  nameWithType: StringExtensions.GetAfter(string, string)
  fullName: TetraCreations.Core.StringExtensions.GetAfter(string, string)
  type: Method
  source:
    id: GetAfter
    path: ''
    startLine: 37864
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nGet the string after the specified string.\n"
  example: []
  syntax:
    content: public static string GetAfter(this string source, string value)
    parameters:
    - id: source
      type: System.String
      description: The string to act on.
    - id: value
      type: System.String
      description: The value to search.
    return:
      type: System.String
      description: The string after the specified value.
    content.vb: Public Shared Function GetAfter(source As String, value As String) As String
  overload: TetraCreations.Core.StringExtensions.GetAfter*
  nameWithType.vb: StringExtensions.GetAfter(String, String)
  fullName.vb: TetraCreations.Core.StringExtensions.GetAfter(String, String)
  name.vb: GetAfter(String, String)
- uid: TetraCreations.Core.StringExtensions.GetBefore(System.String,System.String)
  commentId: M:TetraCreations.Core.StringExtensions.GetBefore(System.String,System.String)
  id: GetBefore(System.String,System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: GetBefore(string, string)
  nameWithType: StringExtensions.GetBefore(string, string)
  fullName: TetraCreations.Core.StringExtensions.GetBefore(string, string)
  type: Method
  source:
    id: GetBefore
    path: ''
    startLine: 37879
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nGet the string before the specified string.\n"
  example: []
  syntax:
    content: public static string GetBefore(this string source, string value)
    parameters:
    - id: source
      type: System.String
      description: The string to act on.
    - id: value
      type: System.String
      description: The value to search.
    return:
      type: System.String
      description: The string before the specified value.
    content.vb: Public Shared Function GetBefore(source As String, value As String) As String
  overload: TetraCreations.Core.StringExtensions.GetBefore*
  nameWithType.vb: StringExtensions.GetBefore(String, String)
  fullName.vb: TetraCreations.Core.StringExtensions.GetBefore(String, String)
  name.vb: GetBefore(String, String)
- uid: TetraCreations.Core.StringExtensions.GetBetween(System.String,System.String,System.String)
  commentId: M:TetraCreations.Core.StringExtensions.GetBetween(System.String,System.String,System.String)
  id: GetBetween(System.String,System.String,System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: GetBetween(string, string, string)
  nameWithType: StringExtensions.GetBetween(string, string, string)
  fullName: TetraCreations.Core.StringExtensions.GetBetween(string, string, string)
  type: Method
  source:
    id: GetBetween
    path: ''
    startLine: 37895
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nGet the string between the two specified string.\n"
  example: []
  syntax:
    content: public static string GetBetween(this string source, string before, string after)
    parameters:
    - id: source
      type: System.String
      description: The string to act on.
    - id: before
      type: System.String
      description: The string before to search.
    - id: after
      type: System.String
      description: The string after to search.
    return:
      type: System.String
      description: The string between the two specified string.
    content.vb: Public Shared Function GetBetween(source As String, before As String, after As String) As String
  overload: TetraCreations.Core.StringExtensions.GetBetween*
  nameWithType.vb: StringExtensions.GetBetween(String, String, String)
  fullName.vb: TetraCreations.Core.StringExtensions.GetBetween(String, String, String)
  name.vb: GetBetween(String, String, String)
- uid: TetraCreations.Core.StringExtensions.Extract(System.String,Func{System.Char,System.Boolean})
  commentId: M:TetraCreations.Core.StringExtensions.Extract(System.String,Func{System.Char,System.Boolean})
  id: Extract(System.String,Func{System.Char,System.Boolean})
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: Extract(string, Func<char, bool>)
  nameWithType: StringExtensions.Extract(string, Func<char, bool>)
  fullName: TetraCreations.Core.StringExtensions.Extract(string, Func<char, bool>)
  type: Method
  source:
    id: Extract
    path: ''
    startLine: 37915
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nExtract the portion of the string which match the predicate\n"
  example: []
  syntax:
    content: public static string Extract(this string source, Func<char, bool> predicate)
    parameters:
    - id: source
      type: System.String
      description: The string to act on.
    - id: predicate
      type: Global.Func{System.Char,System.Boolean}
      description: ''
    return:
      type: System.String
      description: A string.
    content.vb: Public Shared Function Extract(source As String, predicate As Func(Of Char, Boolean)) As String
  overload: TetraCreations.Core.StringExtensions.Extract*
  nameWithType.vb: StringExtensions.Extract(String, Func(Of Char, Boolean))
  fullName.vb: TetraCreations.Core.StringExtensions.Extract(String, Func(Of Char, Boolean))
  name.vb: Extract(String, Func(Of Char, Boolean))
- uid: TetraCreations.Core.StringExtensions.ExtractInt32(System.String)
  commentId: M:TetraCreations.Core.StringExtensions.ExtractInt32(System.String)
  id: ExtractInt32(System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: ExtractInt32(string)
  nameWithType: StringExtensions.ExtractInt32(string)
  fullName: TetraCreations.Core.StringExtensions.ExtractInt32(string)
  type: Method
  source:
    id: ExtractInt32
    path: ''
    startLine: 37925
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nExtracts the integer from the string.\n"
  example: []
  syntax:
    content: public static int ExtractInt32(this string source)
    parameters:
    - id: source
      type: System.String
      description: The string to act on.
    return:
      type: System.Int32
      description: ''
    content.vb: Public Shared Function ExtractInt32(source As String) As Integer
  overload: TetraCreations.Core.StringExtensions.ExtractInt32*
  nameWithType.vb: StringExtensions.ExtractInt32(String)
  fullName.vb: TetraCreations.Core.StringExtensions.ExtractInt32(String)
  name.vb: ExtractInt32(String)
- uid: TetraCreations.Core.StringExtensions.Concat(System.String,System.String)
  commentId: M:TetraCreations.Core.StringExtensions.Concat(System.String,System.String)
  id: Concat(System.String,System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: Concat(string, string)
  nameWithType: StringExtensions.Concat(string, string)
  fullName: TetraCreations.Core.StringExtensions.Concat(string, string)
  type: Method
  source:
    id: Concat
    path: ''
    startLine: 37949
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nConcatenates two string\n"
  example: []
  syntax:
    content: public static string Concat(this string str0, string str1)
    parameters:
    - id: str0
      type: System.String
      description: The first string to concatenate.
    - id: str1
      type: System.String
      description: The second string to concatenate.
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function Concat(str0 As String, str1 As String) As String
  overload: TetraCreations.Core.StringExtensions.Concat*
  nameWithType.vb: StringExtensions.Concat(String, String)
  fullName.vb: TetraCreations.Core.StringExtensions.Concat(String, String)
  name.vb: Concat(String, String)
- uid: TetraCreations.Core.StringExtensions.Concat(System.String,System.String,System.String)
  commentId: M:TetraCreations.Core.StringExtensions.Concat(System.String,System.String,System.String)
  id: Concat(System.String,System.String,System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: Concat(string, string, string)
  nameWithType: StringExtensions.Concat(string, string, string)
  fullName: TetraCreations.Core.StringExtensions.Concat(string, string, string)
  type: Method
  source:
    id: Concat
    path: ''
    startLine: 37961
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nConcatenates three string\n"
  example: []
  syntax:
    content: public static string Concat(this string str0, string str1, string str2)
    parameters:
    - id: str0
      type: System.String
      description: The first string to concatenate.
    - id: str1
      type: System.String
      description: The second string to concatenate.
    - id: str2
      type: System.String
      description: The third string to concatenate.
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function Concat(str0 As String, str1 As String, str2 As String) As String
  overload: TetraCreations.Core.StringExtensions.Concat*
  nameWithType.vb: StringExtensions.Concat(String, String, String)
  fullName.vb: TetraCreations.Core.StringExtensions.Concat(String, String, String)
  name.vb: Concat(String, String, String)
- uid: TetraCreations.Core.StringExtensions.ToIntOrNull(System.String)
  commentId: M:TetraCreations.Core.StringExtensions.ToIntOrNull(System.String)
  id: ToIntOrNull(System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: ToIntOrNull(string)
  nameWithType: StringExtensions.ToIntOrNull(string)
  fullName: TetraCreations.Core.StringExtensions.ToIntOrNull(string)
  type: Method
  source:
    id: ToIntOrNull
    path: ''
    startLine: 37971
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nTry to parse the string to an int\n"
  example: []
  syntax:
    content: public static int? ToIntOrNull(this string source)
    parameters:
    - id: source
      type: System.String
      description: ''
    return:
      type: System.Nullable{System.Int32}
      description: ''
    content.vb: Public Shared Function ToIntOrNull(source As String) As Integer?
  overload: TetraCreations.Core.StringExtensions.ToIntOrNull*
  nameWithType.vb: StringExtensions.ToIntOrNull(String)
  fullName.vb: TetraCreations.Core.StringExtensions.ToIntOrNull(String)
  name.vb: ToIntOrNull(String)
- uid: TetraCreations.Core.StringExtensions.ToSentenceCase(System.String)
  commentId: M:TetraCreations.Core.StringExtensions.ToSentenceCase(System.String)
  id: ToSentenceCase(System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: ToSentenceCase(string)
  nameWithType: StringExtensions.ToSentenceCase(string)
  fullName: TetraCreations.Core.StringExtensions.ToSentenceCase(string)
  type: Method
  source:
    id: ToSentenceCase
    path: ''
    startLine: 37982
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nConvert a pascal case string to a sentence.\n"
  example: []
  syntax:
    content: public static string ToSentenceCase(this string source)
    parameters:
    - id: source
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function ToSentenceCase(source As String) As String
  overload: TetraCreations.Core.StringExtensions.ToSentenceCase*
  nameWithType.vb: StringExtensions.ToSentenceCase(String)
  fullName.vb: TetraCreations.Core.StringExtensions.ToSentenceCase(String)
  name.vb: ToSentenceCase(String)
- uid: TetraCreations.Core.StringExtensions.Log(System.String,TetraCreations.Core.DebugLevel,System.Boolean)
  commentId: M:TetraCreations.Core.StringExtensions.Log(System.String,TetraCreations.Core.DebugLevel,System.Boolean)
  id: Log(System.String,TetraCreations.Core.DebugLevel,System.Boolean)
  isExtensionMethod: true
  parent: TetraCreations.Core.StringExtensions
  langs:
  - csharp
  - vb
  name: Log(string, DebugLevel, bool)
  nameWithType: StringExtensions.Log(string, DebugLevel, bool)
  fullName: TetraCreations.Core.StringExtensions.Log(string, TetraCreations.Core.DebugLevel, bool)
  type: Method
  source:
    id: Log
    path: ''
    startLine: 37993
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nLog the string in the console.\n"
  example: []
  syntax:
    content: public static void Log(this string source, DebugLevel debugLevel = DebugLevel.None, bool debug = true)
    parameters:
    - id: source
      type: System.String
      description: The string to Log.
    - id: debugLevel
      type: TetraCreations.Core.DebugLevel
      description: Choose which Debug.Log method to call (Normal, Warning, Error)
    - id: debug
      type: System.Boolean
      description: Set to false to prevent log
    content.vb: Public Shared Sub Log(source As String, debugLevel As DebugLevel = DebugLevel.None, debug As Boolean = True)
  overload: TetraCreations.Core.StringExtensions.Log*
  nameWithType.vb: StringExtensions.Log(String, DebugLevel, Boolean)
  fullName.vb: TetraCreations.Core.StringExtensions.Log(String, TetraCreations.Core.DebugLevel, Boolean)
  name.vb: Log(String, DebugLevel, Boolean)
references:
- uid: TetraCreations.Core
  commentId: N:TetraCreations.Core
  name: TetraCreations.Core
  nameWithType: TetraCreations.Core
  fullName: TetraCreations.Core
  spec.csharp:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  spec.vb:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TetraCreations.Core.StringExtensions.IsNullOrEmpty*
  commentId: Overload:TetraCreations.Core.StringExtensions.IsNullOrEmpty
  name: IsNullOrEmpty
  nameWithType: StringExtensions.IsNullOrEmpty
  fullName: TetraCreations.Core.StringExtensions.IsNullOrEmpty
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TetraCreations.Core.StringExtensions.IsNnotNullOrEmpty*
  commentId: Overload:TetraCreations.Core.StringExtensions.IsNnotNullOrEmpty
  name: IsNnotNullOrEmpty
  nameWithType: StringExtensions.IsNnotNullOrEmpty
  fullName: TetraCreations.Core.StringExtensions.IsNnotNullOrEmpty
- uid: TetraCreations.Core.StringExtensions.Format*
  commentId: Overload:TetraCreations.Core.StringExtensions.Format
  name: Format
  nameWithType: StringExtensions.Format
  fullName: TetraCreations.Core.StringExtensions.Format
- uid: System.Object[]
  isExternal: true
  name: object[]
  nameWithType: object[]
  fullName: object[]
  nameWithType.vb: Object()
  fullName.vb: Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
- uid: TetraCreations.Core.StringExtensions.RemoveSpaces*
  commentId: Overload:TetraCreations.Core.StringExtensions.RemoveSpaces
  name: RemoveSpaces
  nameWithType: StringExtensions.RemoveSpaces
  fullName: TetraCreations.Core.StringExtensions.RemoveSpaces
- uid: TetraCreations.Core.StringExtensions.ParsePercentageToFloat*
  commentId: Overload:TetraCreations.Core.StringExtensions.ParsePercentageToFloat
  name: ParsePercentageToFloat
  nameWithType: StringExtensions.ParsePercentageToFloat
  fullName: TetraCreations.Core.StringExtensions.ParsePercentageToFloat
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TetraCreations.Core.StringExtensions.UppercaseFirst*
  commentId: Overload:TetraCreations.Core.StringExtensions.UppercaseFirst
  name: UppercaseFirst
  nameWithType: StringExtensions.UppercaseFirst
  fullName: TetraCreations.Core.StringExtensions.UppercaseFirst
- uid: TetraCreations.Core.StringExtensions.RemoveInvalidChars*
  commentId: Overload:TetraCreations.Core.StringExtensions.RemoveInvalidChars
  name: RemoveInvalidChars
  nameWithType: StringExtensions.RemoveInvalidChars
  fullName: TetraCreations.Core.StringExtensions.RemoveInvalidChars
- uid: TetraCreations.Core.StringExtensions.HasAnyInvalidChars*
  commentId: Overload:TetraCreations.Core.StringExtensions.HasAnyInvalidChars
  name: HasAnyInvalidChars
  nameWithType: StringExtensions.HasAnyInvalidChars
  fullName: TetraCreations.Core.StringExtensions.HasAnyInvalidChars
- uid: TetraCreations.Core.StringExtensions.GetInvalidFilenameCharacters*
  commentId: Overload:TetraCreations.Core.StringExtensions.GetInvalidFilenameCharacters
  name: GetInvalidFilenameCharacters
  nameWithType: StringExtensions.GetInvalidFilenameCharacters
  fullName: TetraCreations.Core.StringExtensions.GetInvalidFilenameCharacters
- uid: Global.IEnumerable{System.Char}
  commentId: '!:Global.IEnumerable{System.Char}'
  definition: Global.IEnumerable`1
  name: IEnumerable<char>
  nameWithType: IEnumerable<char>
  fullName: IEnumerable<char>
  nameWithType.vb: IEnumerable(Of Char)
  fullName.vb: IEnumerable(Of Char)
  name.vb: IEnumerable(Of Char)
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
  - name: )
- uid: Global.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.StringExtensions.GetInvalidPathCharacters*
  commentId: Overload:TetraCreations.Core.StringExtensions.GetInvalidPathCharacters
  name: GetInvalidPathCharacters
  nameWithType: StringExtensions.GetInvalidPathCharacters
  fullName: TetraCreations.Core.StringExtensions.GetInvalidPathCharacters
- uid: TetraCreations.Core.StringExtensions.GetAfter*
  commentId: Overload:TetraCreations.Core.StringExtensions.GetAfter
  name: GetAfter
  nameWithType: StringExtensions.GetAfter
  fullName: TetraCreations.Core.StringExtensions.GetAfter
- uid: TetraCreations.Core.StringExtensions.GetBefore*
  commentId: Overload:TetraCreations.Core.StringExtensions.GetBefore
  name: GetBefore
  nameWithType: StringExtensions.GetBefore
  fullName: TetraCreations.Core.StringExtensions.GetBefore
- uid: TetraCreations.Core.StringExtensions.GetBetween*
  commentId: Overload:TetraCreations.Core.StringExtensions.GetBetween
  name: GetBetween
  nameWithType: StringExtensions.GetBetween
  fullName: TetraCreations.Core.StringExtensions.GetBetween
- uid: TetraCreations.Core.StringExtensions.Extract*
  commentId: Overload:TetraCreations.Core.StringExtensions.Extract
  name: Extract
  nameWithType: StringExtensions.Extract
  fullName: TetraCreations.Core.StringExtensions.Extract
- uid: Global.Func{System.Char,System.Boolean}
  commentId: '!:Global.Func{System.Char,System.Boolean}'
  definition: Global.Func`2
  name: Func<char, bool>
  nameWithType: Func<char, bool>
  fullName: Func<char, bool>
  nameWithType.vb: Func(Of Char, Boolean)
  fullName.vb: Func(Of Char, Boolean)
  name.vb: Func(Of Char, Boolean)
  spec.csharp:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: )
- uid: TetraCreations.Core.StringExtensions.ExtractInt32*
  commentId: Overload:TetraCreations.Core.StringExtensions.ExtractInt32
  name: ExtractInt32
  nameWithType: StringExtensions.ExtractInt32
  fullName: TetraCreations.Core.StringExtensions.ExtractInt32
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TetraCreations.Core.StringExtensions.Concat*
  commentId: Overload:TetraCreations.Core.StringExtensions.Concat
  name: Concat
  nameWithType: StringExtensions.Concat
  fullName: TetraCreations.Core.StringExtensions.Concat
- uid: TetraCreations.Core.StringExtensions.ToIntOrNull*
  commentId: Overload:TetraCreations.Core.StringExtensions.ToIntOrNull
  name: ToIntOrNull
  nameWithType: StringExtensions.ToIntOrNull
  fullName: TetraCreations.Core.StringExtensions.ToIntOrNull
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TetraCreations.Core.StringExtensions.ToSentenceCase*
  commentId: Overload:TetraCreations.Core.StringExtensions.ToSentenceCase
  name: ToSentenceCase
  nameWithType: StringExtensions.ToSentenceCase
  fullName: TetraCreations.Core.StringExtensions.ToSentenceCase
- uid: TetraCreations.Core.StringExtensions.Log*
  commentId: Overload:TetraCreations.Core.StringExtensions.Log
  name: Log
  nameWithType: StringExtensions.Log
  fullName: TetraCreations.Core.StringExtensions.Log
- uid: TetraCreations.Core.DebugLevel
  commentId: T:TetraCreations.Core.DebugLevel
  parent: TetraCreations.Core
  name: DebugLevel
  nameWithType: DebugLevel
  fullName: TetraCreations.Core.DebugLevel
