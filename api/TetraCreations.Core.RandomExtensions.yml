### YamlMime:ManagedReference
items:
- uid: TetraCreations.Core.RandomExtensions
  commentId: T:TetraCreations.Core.RandomExtensions
  id: RandomExtensions
  parent: TetraCreations.Core
  children:
  - TetraCreations.Core.RandomExtensions.IsTrueWithProbability(System.Single)
  - TetraCreations.Core.RandomExtensions.RollDice(System.Int32)
  - TetraCreations.Core.RandomExtensions.RollDices(System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: RandomExtensions
  nameWithType: RandomExtensions
  fullName: TetraCreations.Core.RandomExtensions
  type: Class
  source:
    id: RandomExtensions
    path: ''
    startLine: 37556
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  syntax:
    content: public static class RandomExtensions
    content.vb: Public Module RandomExtensions
  inheritance:
  - System.Object
- uid: TetraCreations.Core.RandomExtensions.IsTrueWithProbability(System.Single)
  commentId: M:TetraCreations.Core.RandomExtensions.IsTrueWithProbability(System.Single)
  id: IsTrueWithProbability(System.Single)
  parent: TetraCreations.Core.RandomExtensions
  langs:
  - csharp
  - vb
  name: IsTrueWithProbability(float)
  nameWithType: RandomExtensions.IsTrueWithProbability(float)
  fullName: TetraCreations.Core.RandomExtensions.IsTrueWithProbability(float)
  type: Method
  source:
    id: IsTrueWithProbability
    path: ''
    startLine: 37562
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nGet a random number between 0f and 1f then check if the probility value is less or equals then the random number\n"
  example: []
  syntax:
    content: public static bool IsTrueWithProbability(float probability)
    parameters:
    - id: probability
      type: System.Single
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsTrueWithProbability(probability As Single) As Boolean
  overload: TetraCreations.Core.RandomExtensions.IsTrueWithProbability*
  nameWithType.vb: RandomExtensions.IsTrueWithProbability(Single)
  fullName.vb: TetraCreations.Core.RandomExtensions.IsTrueWithProbability(Single)
  name.vb: IsTrueWithProbability(Single)
- uid: TetraCreations.Core.RandomExtensions.RollDice(System.Int32)
  commentId: M:TetraCreations.Core.RandomExtensions.RollDice(System.Int32)
  id: RollDice(System.Int32)
  parent: TetraCreations.Core.RandomExtensions
  langs:
  - csharp
  - vb
  name: RollDice(int)
  nameWithType: RandomExtensions.RollDice(int)
  fullName: TetraCreations.Core.RandomExtensions.RollDice(int)
  type: Method
  source:
    id: RollDice
    path: ''
    startLine: 37585
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nVirtually roll a dice and returns the value of its uppermost\nside.\n"
  remarks: "\nA virtual dice consists of <code data-dev-comment-type=\"paramref\" class=\"paramref\">sideCount</code> number of\nsides. The sides are numbered from 1 to <code data-dev-comment-type=\"paramref\" class=\"paramref\">sideCount</code>.\n"
  example: []
  syntax:
    content: public static int RollDice(int sideCount = 6)
    parameters:
    - id: sideCount
      type: System.Int32
      description: >-
        The number of the dice sides. Could be omitted

        (default value is six).
    return:
      type: System.Int32
      description: "\nReturns random integer from 1 to <code data-dev-comment-type=\"paramref\" class=\"paramref\">sideCount</code>\nor 0 if provided with not valid (non-positive) value.\n"
    content.vb: Public Shared Function RollDice(sideCount As Integer = 6) As Integer
  overload: TetraCreations.Core.RandomExtensions.RollDice*
  nameWithType.vb: RandomExtensions.RollDice(Integer)
  fullName.vb: TetraCreations.Core.RandomExtensions.RollDice(Integer)
  name.vb: RollDice(Integer)
- uid: TetraCreations.Core.RandomExtensions.RollDices(System.Int32,System.Int32)
  commentId: M:TetraCreations.Core.RandomExtensions.RollDices(System.Int32,System.Int32)
  id: RollDices(System.Int32,System.Int32)
  parent: TetraCreations.Core.RandomExtensions
  langs:
  - csharp
  - vb
  name: RollDices(int, int)
  nameWithType: RandomExtensions.RollDices(int, int)
  fullName: TetraCreations.Core.RandomExtensions.RollDices(int, int)
  type: Method
  source:
    id: RollDices
    path: ''
    startLine: 37606
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nVirtually roll a dice and returns the value of its uppermost\nside.\n"
  remarks: "\nA virtual dice consists of <code data-dev-comment-type=\"paramref\" class=\"paramref\">sideCount</code> number of\nsides. The sides are numbered from 1 to <code data-dev-comment-type=\"paramref\" class=\"paramref\">sideCount</code>.\n"
  example: []
  syntax:
    content: public static int[] RollDices(int sideCount = 6, int diceCount = 2)
    parameters:
    - id: sideCount
      type: System.Int32
      description: >-
        The number of the dice sides. Could be omitted

        (default value is six).
    - id: diceCount
      type: System.Int32
    return:
      type: System.Int32[]
      description: "\nReturns random integer from 1 to <code data-dev-comment-type=\"paramref\" class=\"paramref\">sideCount</code>\nor 0 if provided with not valid (non-positive) value.\n"
    content.vb: Public Shared Function RollDices(sideCount As Integer = 6, diceCount As Integer = 2) As Integer()
  overload: TetraCreations.Core.RandomExtensions.RollDices*
  nameWithType.vb: RandomExtensions.RollDices(Integer, Integer)
  fullName.vb: TetraCreations.Core.RandomExtensions.RollDices(Integer, Integer)
  name.vb: RollDices(Integer, Integer)
references:
- uid: TetraCreations.Core
  commentId: N:TetraCreations.Core
  name: TetraCreations.Core
  nameWithType: TetraCreations.Core
  fullName: TetraCreations.Core
  spec.csharp:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  spec.vb:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TetraCreations.Core.RandomExtensions.IsTrueWithProbability*
  commentId: Overload:TetraCreations.Core.RandomExtensions.IsTrueWithProbability
  name: IsTrueWithProbability
  nameWithType: RandomExtensions.IsTrueWithProbability
  fullName: TetraCreations.Core.RandomExtensions.IsTrueWithProbability
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TetraCreations.Core.RandomExtensions.RollDice*
  commentId: Overload:TetraCreations.Core.RandomExtensions.RollDice
  name: RollDice
  nameWithType: RandomExtensions.RollDice
  fullName: TetraCreations.Core.RandomExtensions.RollDice
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TetraCreations.Core.RandomExtensions.RollDices*
  commentId: Overload:TetraCreations.Core.RandomExtensions.RollDices
  name: RollDices
  nameWithType: RandomExtensions.RollDices
  fullName: TetraCreations.Core.RandomExtensions.RollDices
- uid: System.Int32[]
  isExternal: true
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: (
  - name: )
