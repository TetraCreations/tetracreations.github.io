### YamlMime:ManagedReference
items:
- uid: TetraCreations.Core.TypeExtensions
  commentId: T:TetraCreations.Core.TypeExtensions
  id: TypeExtensions
  parent: TetraCreations.Core
  children:
  - TetraCreations.Core.TypeExtensions.GetMethod(Type,System.String)
  - TetraCreations.Core.TypeExtensions.GetTypeName(Type)
  - TetraCreations.Core.TypeExtensions.HasFlagsAttribute(Type)
  - TetraCreations.Core.TypeExtensions.Implements(Type,Type)
  - TetraCreations.Core.TypeExtensions.Implements``1(Type)
  - TetraCreations.Core.TypeExtensions.IsAnonymous(Type)
  - TetraCreations.Core.TypeExtensions.IsCompilerGenerated(Type)
  - TetraCreations.Core.TypeExtensions.IsEnum(Type)
  - TetraCreations.Core.TypeExtensions.IsFromUnity(Type)
  - TetraCreations.Core.TypeExtensions.IsFromUnityEditor(Type)
  - TetraCreations.Core.TypeExtensions.IsFromUnityEngine(Type)
  - TetraCreations.Core.TypeExtensions.IsImplementedBy(Type,Type)
  langs:
  - csharp
  - vb
  name: TypeExtensions
  nameWithType: TypeExtensions
  fullName: TetraCreations.Core.TypeExtensions
  type: Class
  source:
    id: TypeExtensions
    path: ''
    startLine: 38344
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  syntax:
    content: public static class TypeExtensions
    content.vb: Public Module TypeExtensions
  inheritance:
  - System.Object
- uid: TetraCreations.Core.TypeExtensions.IsEnum(Type)
  commentId: M:TetraCreations.Core.TypeExtensions.IsEnum(Type)
  id: IsEnum(Type)
  isExtensionMethod: true
  parent: TetraCreations.Core.TypeExtensions
  langs:
  - csharp
  - vb
  name: IsEnum(Type)
  nameWithType: TypeExtensions.IsEnum(Type)
  fullName: TetraCreations.Core.TypeExtensions.IsEnum(Type)
  type: Method
  source:
    id: IsEnum
    path: ''
    startLine: 38351
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines whether the Type is an enum\n"
  example: []
  syntax:
    content: public static bool IsEnum(this Type type)
    parameters:
    - id: type
      type: Global.Type
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsEnum(type As Type) As Boolean
  overload: TetraCreations.Core.TypeExtensions.IsEnum*
- uid: TetraCreations.Core.TypeExtensions.IsImplementedBy(Type,Type)
  commentId: M:TetraCreations.Core.TypeExtensions.IsImplementedBy(Type,Type)
  id: IsImplementedBy(Type,Type)
  isExtensionMethod: true
  parent: TetraCreations.Core.TypeExtensions
  langs:
  - csharp
  - vb
  name: IsImplementedBy(Type, Type)
  nameWithType: TypeExtensions.IsImplementedBy(Type, Type)
  fullName: TetraCreations.Core.TypeExtensions.IsImplementedBy(Type, Type)
  type: Method
  source:
    id: IsImplementedBy
    path: ''
    startLine: 38362
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines whether a type implements another\n"
  example: []
  syntax:
    content: public static bool IsImplementedBy(this Type type, Type other)
    parameters:
    - id: type
      type: Global.Type
      description: ''
    - id: other
      type: Global.Type
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsImplementedBy(type As Type, other As Type) As Boolean
  overload: TetraCreations.Core.TypeExtensions.IsImplementedBy*
- uid: TetraCreations.Core.TypeExtensions.Implements``1(Type)
  commentId: M:TetraCreations.Core.TypeExtensions.Implements``1(Type)
  id: Implements``1(Type)
  isExtensionMethod: true
  parent: TetraCreations.Core.TypeExtensions
  langs:
  - csharp
  - vb
  name: Implements<T>(Type)
  nameWithType: TypeExtensions.Implements<T>(Type)
  fullName: TetraCreations.Core.TypeExtensions.Implements<T>(Type)
  type: Method
  source:
    id: Implements
    path: ''
    startLine: 38377
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines whether a type implements an interface.\n"
  example: []
  syntax:
    content: public static bool Implements<T>(this Type source)
    parameters:
    - id: source
      type: Global.Type
      description: ''
    typeParameters:
    - id: T
      description: The interface Type
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function [Implements](Of T)(source As Type) As Boolean
  overload: TetraCreations.Core.TypeExtensions.Implements*
  nameWithType.vb: TypeExtensions.Implements(Of T)(Type)
  fullName.vb: TetraCreations.Core.TypeExtensions.Implements(Of T)(Type)
  name.vb: Implements(Of T)(Type)
- uid: TetraCreations.Core.TypeExtensions.Implements(Type,Type)
  commentId: M:TetraCreations.Core.TypeExtensions.Implements(Type,Type)
  id: Implements(Type,Type)
  isExtensionMethod: true
  parent: TetraCreations.Core.TypeExtensions
  langs:
  - csharp
  - vb
  name: Implements(Type, Type)
  nameWithType: TypeExtensions.Implements(Type, Type)
  fullName: TetraCreations.Core.TypeExtensions.Implements(Type, Type)
  type: Method
  source:
    id: Implements
    path: ''
    startLine: 38394
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines whether a type implements an interface.\n"
  example: []
  syntax:
    content: public static bool Implements(this Type source, Type interfaceType)
    parameters:
    - id: source
      type: Global.Type
      description: ''
    - id: interfaceType
      type: Global.Type
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function [Implements](source As Type, interfaceType As Type) As Boolean
  overload: TetraCreations.Core.TypeExtensions.Implements*
- uid: TetraCreations.Core.TypeExtensions.GetMethod(Type,System.String)
  commentId: M:TetraCreations.Core.TypeExtensions.GetMethod(Type,System.String)
  id: GetMethod(Type,System.String)
  isExtensionMethod: true
  parent: TetraCreations.Core.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetMethod(Type, string)
  nameWithType: TypeExtensions.GetMethod(Type, string)
  fullName: TetraCreations.Core.TypeExtensions.GetMethod(Type, string)
  type: Method
  source:
    id: GetMethod
    path: ''
    startLine: 38409
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nReturns the MethodInfo using the method name\n"
  example: []
  syntax:
    content: public static MethodInfo GetMethod(this Type type, string name)
    parameters:
    - id: type
      type: Global.Type
      description: ''
    - id: name
      type: System.String
      description: Method name
    return:
      type: Global.MethodInfo
      description: ''
    content.vb: Public Shared Function GetMethod(type As Type, name As String) As MethodInfo
  overload: TetraCreations.Core.TypeExtensions.GetMethod*
  nameWithType.vb: TypeExtensions.GetMethod(Type, String)
  fullName.vb: TetraCreations.Core.TypeExtensions.GetMethod(Type, String)
  name.vb: GetMethod(Type, String)
- uid: TetraCreations.Core.TypeExtensions.HasFlagsAttribute(Type)
  commentId: M:TetraCreations.Core.TypeExtensions.HasFlagsAttribute(Type)
  id: HasFlagsAttribute(Type)
  isExtensionMethod: true
  parent: TetraCreations.Core.TypeExtensions
  langs:
  - csharp
  - vb
  name: HasFlagsAttribute(Type)
  nameWithType: TypeExtensions.HasFlagsAttribute(Type)
  fullName: TetraCreations.Core.TypeExtensions.HasFlagsAttribute(Type)
  type: Method
  source:
    id: HasFlagsAttribute
    path: ''
    startLine: 38419
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines whether an Enum type has the [Flags] attribute\n"
  example: []
  syntax:
    content: public static bool HasFlagsAttribute(this Type type)
    parameters:
    - id: type
      type: Global.Type
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function HasFlagsAttribute(type As Type) As Boolean
  overload: TetraCreations.Core.TypeExtensions.HasFlagsAttribute*
- uid: TetraCreations.Core.TypeExtensions.IsAnonymous(Type)
  commentId: M:TetraCreations.Core.TypeExtensions.IsAnonymous(Type)
  id: IsAnonymous(Type)
  isExtensionMethod: true
  parent: TetraCreations.Core.TypeExtensions
  langs:
  - csharp
  - vb
  name: IsAnonymous(Type)
  nameWithType: TypeExtensions.IsAnonymous(Type)
  fullName: TetraCreations.Core.TypeExtensions.IsAnonymous(Type)
  type: Method
  source:
    id: IsAnonymous
    path: ''
    startLine: 38435
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines whether a Type is anonym, it means the type name is generated by the compiler and is not available at the source code level.\n<a cref=\"!:Anonymous types\" href=\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types\">https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types</a>\n"
  example: []
  syntax:
    content: public static bool IsAnonymous(this Type type)
    parameters:
    - id: type
      type: Global.Type
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsAnonymous(type As Type) As Boolean
  overload: TetraCreations.Core.TypeExtensions.IsAnonymous*
- uid: TetraCreations.Core.TypeExtensions.IsCompilerGenerated(Type)
  commentId: M:TetraCreations.Core.TypeExtensions.IsCompilerGenerated(Type)
  id: IsCompilerGenerated(Type)
  isExtensionMethod: true
  parent: TetraCreations.Core.TypeExtensions
  langs:
  - csharp
  - vb
  name: IsCompilerGenerated(Type)
  nameWithType: TypeExtensions.IsCompilerGenerated(Type)
  fullName: TetraCreations.Core.TypeExtensions.IsCompilerGenerated(Type)
  type: Method
  source:
    id: IsCompilerGenerated
    path: ''
    startLine: 38459
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines whether a Type is a compiler-generated element.\n"
  example: []
  syntax:
    content: public static bool IsCompilerGenerated(this Type type)
    parameters:
    - id: type
      type: Global.Type
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsCompilerGenerated(type As Type) As Boolean
  overload: TetraCreations.Core.TypeExtensions.IsCompilerGenerated*
- uid: TetraCreations.Core.TypeExtensions.IsFromUnityEngine(Type)
  commentId: M:TetraCreations.Core.TypeExtensions.IsFromUnityEngine(Type)
  id: IsFromUnityEngine(Type)
  isExtensionMethod: true
  parent: TetraCreations.Core.TypeExtensions
  langs:
  - csharp
  - vb
  name: IsFromUnityEngine(Type)
  nameWithType: TypeExtensions.IsFromUnityEngine(Type)
  fullName: TetraCreations.Core.TypeExtensions.IsFromUnityEngine(Type)
  type: Method
  source:
    id: IsFromUnityEngine
    path: ''
    startLine: 38479
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines if the type is from the UnityEngine namespace\n"
  example: []
  syntax:
    content: public static bool IsFromUnityEngine(this Type type)
    parameters:
    - id: type
      type: Global.Type
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsFromUnityEngine(type As Type) As Boolean
  overload: TetraCreations.Core.TypeExtensions.IsFromUnityEngine*
- uid: TetraCreations.Core.TypeExtensions.IsFromUnityEditor(Type)
  commentId: M:TetraCreations.Core.TypeExtensions.IsFromUnityEditor(Type)
  id: IsFromUnityEditor(Type)
  isExtensionMethod: true
  parent: TetraCreations.Core.TypeExtensions
  langs:
  - csharp
  - vb
  name: IsFromUnityEditor(Type)
  nameWithType: TypeExtensions.IsFromUnityEditor(Type)
  fullName: TetraCreations.Core.TypeExtensions.IsFromUnityEditor(Type)
  type: Method
  source:
    id: IsFromUnityEditor
    path: ''
    startLine: 38489
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines if the type is from the UnityEditor namespace\n"
  example: []
  syntax:
    content: public static bool IsFromUnityEditor(this Type type)
    parameters:
    - id: type
      type: Global.Type
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsFromUnityEditor(type As Type) As Boolean
  overload: TetraCreations.Core.TypeExtensions.IsFromUnityEditor*
- uid: TetraCreations.Core.TypeExtensions.IsFromUnity(Type)
  commentId: M:TetraCreations.Core.TypeExtensions.IsFromUnity(Type)
  id: IsFromUnity(Type)
  isExtensionMethod: true
  parent: TetraCreations.Core.TypeExtensions
  langs:
  - csharp
  - vb
  name: IsFromUnity(Type)
  nameWithType: TypeExtensions.IsFromUnity(Type)
  fullName: TetraCreations.Core.TypeExtensions.IsFromUnity(Type)
  type: Method
  source:
    id: IsFromUnity
    path: ''
    startLine: 38499
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nDetermines if the type is from the UnityEngine or UnityEditor namespaces\n"
  example: []
  syntax:
    content: public static bool IsFromUnity(this Type type)
    parameters:
    - id: type
      type: Global.Type
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsFromUnity(type As Type) As Boolean
  overload: TetraCreations.Core.TypeExtensions.IsFromUnity*
- uid: TetraCreations.Core.TypeExtensions.GetTypeName(Type)
  commentId: M:TetraCreations.Core.TypeExtensions.GetTypeName(Type)
  id: GetTypeName(Type)
  isExtensionMethod: true
  parent: TetraCreations.Core.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetTypeName(Type)
  nameWithType: TypeExtensions.GetTypeName(Type)
  fullName: TetraCreations.Core.TypeExtensions.GetTypeName(Type)
  type: Method
  source:
    id: GetTypeName
    path: ''
    startLine: 38509
  assemblies:
  - cs.temp.dll
  namespace: TetraCreations.Core
  summary: "\nGet the type name for the asset database if it&apos;s from the Engine, otherwise return the FullName\n"
  example: []
  syntax:
    content: public static string GetTypeName(this Type type)
    parameters:
    - id: type
      type: Global.Type
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function GetTypeName(type As Type) As String
  overload: TetraCreations.Core.TypeExtensions.GetTypeName*
references:
- uid: TetraCreations.Core
  commentId: N:TetraCreations.Core
  name: TetraCreations.Core
  nameWithType: TetraCreations.Core
  fullName: TetraCreations.Core
  spec.csharp:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
  spec.vb:
  - uid: TetraCreations
    name: TetraCreations
  - name: .
  - uid: TetraCreations.Core
    name: Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TetraCreations.Core.TypeExtensions.IsEnum*
  commentId: Overload:TetraCreations.Core.TypeExtensions.IsEnum
  name: IsEnum
  nameWithType: TypeExtensions.IsEnum
  fullName: TetraCreations.Core.TypeExtensions.IsEnum
- uid: Global.Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TetraCreations.Core.TypeExtensions.IsImplementedBy*
  commentId: Overload:TetraCreations.Core.TypeExtensions.IsImplementedBy
  name: IsImplementedBy
  nameWithType: TypeExtensions.IsImplementedBy
  fullName: TetraCreations.Core.TypeExtensions.IsImplementedBy
- uid: TetraCreations.Core.TypeExtensions.Implements*
  commentId: Overload:TetraCreations.Core.TypeExtensions.Implements
  name: Implements
  nameWithType: TypeExtensions.Implements
  fullName: TetraCreations.Core.TypeExtensions.Implements
- uid: TetraCreations.Core.TypeExtensions.GetMethod*
  commentId: Overload:TetraCreations.Core.TypeExtensions.GetMethod
  name: GetMethod
  nameWithType: TypeExtensions.GetMethod
  fullName: TetraCreations.Core.TypeExtensions.GetMethod
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.MethodInfo
  commentId: '!:Global.MethodInfo'
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: MethodInfo
- uid: TetraCreations.Core.TypeExtensions.HasFlagsAttribute*
  commentId: Overload:TetraCreations.Core.TypeExtensions.HasFlagsAttribute
  name: HasFlagsAttribute
  nameWithType: TypeExtensions.HasFlagsAttribute
  fullName: TetraCreations.Core.TypeExtensions.HasFlagsAttribute
- uid: TetraCreations.Core.TypeExtensions.IsAnonymous*
  commentId: Overload:TetraCreations.Core.TypeExtensions.IsAnonymous
  name: IsAnonymous
  nameWithType: TypeExtensions.IsAnonymous
  fullName: TetraCreations.Core.TypeExtensions.IsAnonymous
- uid: TetraCreations.Core.TypeExtensions.IsCompilerGenerated*
  commentId: Overload:TetraCreations.Core.TypeExtensions.IsCompilerGenerated
  name: IsCompilerGenerated
  nameWithType: TypeExtensions.IsCompilerGenerated
  fullName: TetraCreations.Core.TypeExtensions.IsCompilerGenerated
- uid: TetraCreations.Core.TypeExtensions.IsFromUnityEngine*
  commentId: Overload:TetraCreations.Core.TypeExtensions.IsFromUnityEngine
  name: IsFromUnityEngine
  nameWithType: TypeExtensions.IsFromUnityEngine
  fullName: TetraCreations.Core.TypeExtensions.IsFromUnityEngine
- uid: TetraCreations.Core.TypeExtensions.IsFromUnityEditor*
  commentId: Overload:TetraCreations.Core.TypeExtensions.IsFromUnityEditor
  name: IsFromUnityEditor
  nameWithType: TypeExtensions.IsFromUnityEditor
  fullName: TetraCreations.Core.TypeExtensions.IsFromUnityEditor
- uid: TetraCreations.Core.TypeExtensions.IsFromUnity*
  commentId: Overload:TetraCreations.Core.TypeExtensions.IsFromUnity
  name: IsFromUnity
  nameWithType: TypeExtensions.IsFromUnity
  fullName: TetraCreations.Core.TypeExtensions.IsFromUnity
- uid: TetraCreations.Core.TypeExtensions.GetTypeName*
  commentId: Overload:TetraCreations.Core.TypeExtensions.GetTypeName
  name: GetTypeName
  nameWithType: TypeExtensions.GetTypeName
  fullName: TetraCreations.Core.TypeExtensions.GetTypeName
