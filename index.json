{
  "api/TetraCreations.Core.AudioMixerExtensions.html": {
    "href": "api/TetraCreations.Core.AudioMixerExtensions.html",
    "title": "Class AudioMixerExtensions | Tetra Creations documentation",
    "keywords": "Class AudioMixerExtensions Contain several methods for easily converting the volume value in decibels to a linear or percentage value. Exposed volume parameters of an AudioMixer are in decibels, but when the volume is controlled using a slider from the user interface, the linear value must be converted. The convertion is done automatically when SetLinearVolume() is called. Inheritance object AudioMixerExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class AudioMixerExtensions Fields MaximumDecibelVolume Declaration public const float MaximumDecibelVolume = 20 Field Value Type Description float MaximumLinearVolume Declaration public const float MaximumLinearVolume = 10 Field Value Type Description float MaximumPercentageVolume Declaration public const float MaximumPercentageVolume = 1000 Field Value Type Description float MaximumSafeDecibelVolume Declaration public const float MaximumSafeDecibelVolume = 0 Field Value Type Description float MaximumSafeLinearVolume Declaration public const float MaximumSafeLinearVolume = 1 Field Value Type Description float MaximumSafePercentageVolume Declaration public const float MaximumSafePercentageVolume = 100 Field Value Type Description float MinimumDecibelVolume Declaration public const float MinimumDecibelVolume = -80 Field Value Type Description float MinimumLinearVolume Declaration public const float MinimumLinearVolume = 0.0001 Field Value Type Description float MinimumPercentageVolume Declaration public const float MinimumPercentageVolume = 0 Field Value Type Description float Methods ClampDecibelVolume(float, float, float) Clamp the decibel volume from -80f to 0f. Declaration public static float ClampDecibelVolume(float dB, float min = -80, float max = 0) Parameters Type Name Description float dB float min float max Returns Type Description float ClampLinearVolume(float, float, float) Clamp the linear volume from 0.0001f to 1f. Declaration public static float ClampLinearVolume(float linear, float min = 0.0001, float max = 1) Parameters Type Name Description float linear float min float max Returns Type Description float ClampPercentageVolume(float, float, float) Clamp the volume as percentage from 0% to 100%. Declaration public static float ClampPercentageVolume(float percentage, float min = 0, float max = 100) Parameters Type Name Description float percentage float min float max Returns Type Description float DecibelToString(float) Returns the decibel value as a string using the format : \"+0.## dbB\" Declaration public static string DecibelToString(float dB) Parameters Type Name Description float dB Value in decibel Returns Type Description string GetAudioMixerGroup(AudioMixer, string, string) Returns an AudioMixerGroup if it's name contains the word passed as parameter. For example GetAudioMixerGroup(\"MusicVolumeParam\") will find the group called \"Music\". Declaration public static AudioMixerGroup GetAudioMixerGroup(this AudioMixer audioMixer, string name, string mainGroupName = \"Master\") Parameters Type Name Description AudioMixer audioMixer string name The group name we are looking for. string mainGroupName The main group to search in, by default it's the \"Master\" group. Returns Type Description AudioMixerGroup GetDecibelValueFromLinear(float, bool) Returns the decibel value from a linear value. Declaration public static float GetDecibelValueFromLinear(float linearVolume, bool clamp = true) Parameters Type Name Description float linearVolume Volume as linear bool clamp Will prevent the value to exceed : -80f and 0f Returns Type Description float GetLinearValueFromDecibel(float, bool) Returns the linear value from a decibel value. Declaration public static float GetLinearValueFromDecibel(float decibel, bool clamp = true) Parameters Type Name Description float decibel Volume in decibel bool clamp Prevent the returned value to exceed : 0.0001f to 1f Returns Type Description float GetLinearValueFromPercentage(float, bool) Returns the linear value from a percentage value. Declaration public static float GetLinearValueFromPercentage(float percentage, bool clamp = true) Parameters Type Name Description float percentage Volume as a percentage bool clamp Prevent the returned value to exceed : 0.0001f to 1f Returns Type Description float GetLinearVolume(AudioMixer, string, out float, bool) Returns the linear value of an exposed parameter by it's name from an AudioMixer. We assume the parameter is a Volume. Declaration public static bool GetLinearVolume(this AudioMixer audioMixer, string parameterName, out float linearValue, bool clamp = true) Parameters Type Name Description AudioMixer audioMixer string parameterName Name of the exposed parameter float linearValue The current linear value of the volume bool clamp If true the returned value cannot exceed 0f and 1f Returns Type Description bool SetLinearVolume(AudioMixer, string, float, bool) Sets the value of an exposed parameter while automatically converting the linear value to decibel. Do NOT call it in Awake() it doesn't work ! (audioMixer.SetFloat() will return true even if the value does not change). https://forum.unity.com/threads/audiomixer-setfloat-doesnt-work-on-awake.323880/ Declaration public static bool SetLinearVolume(this AudioMixer audioMixer, string parameterName, float value, bool clamp = true) Parameters Type Name Description AudioMixer audioMixer string parameterName The name of the volume exposed parameter float value The linear value bool clamp Returns Type Description bool"
  },
  "api/TetraCreations.Core.CanvasGroupExtensions.html": {
    "href": "api/TetraCreations.Core.CanvasGroupExtensions.html",
    "title": "Class CanvasGroupExtensions | Tetra Creations documentation",
    "keywords": "Class CanvasGroupExtensions Inheritance object CanvasGroupExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class CanvasGroupExtensions Methods Hide(CanvasGroup) Hide a canvas group and prevent raycast collision Declaration public static void Hide(this CanvasGroup canvasGroup) Parameters Type Name Description CanvasGroup canvasGroup SetVisibility(CanvasGroup, bool) Show or Hide the canvas group using a boolean parameter Declaration public static void SetVisibility(this CanvasGroup canvasGroup, bool visible) Parameters Type Name Description CanvasGroup canvasGroup bool visible If it should be visible or not Show(CanvasGroup) Show a canvas group and allow raycast collision Declaration public static void Show(this CanvasGroup canvasGroup) Parameters Type Name Description CanvasGroup canvasGroup ToggleVisibility(CanvasGroup) Hide the canvas group if it's visible, otherwise show it. Declaration public static void ToggleVisibility(this CanvasGroup canvasGroup) Parameters Type Name Description CanvasGroup canvasGroup"
  },
  "api/TetraCreations.Core.CollectionExtensions.html": {
    "href": "api/TetraCreations.Core.CollectionExtensions.html",
    "title": "Class CollectionExtensions | Tetra Creations documentation",
    "keywords": "Class CollectionExtensions Inheritance object CollectionExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class CollectionExtensions Methods AddIf<T>(ICollection<T>, T, Func<T, bool>) Add an element to the collection depending on a predicate function Declaration public static bool AddIf<T>(this ICollection<T> collection, T element, Func<T, bool> predicate) Parameters Type Name Description ICollection<><T> collection T element The element to add Func<, ><T, bool> predicate Predicate function needs to return true to add the element Returns Type Description bool Type Parameters Name Description T AddIfNotContains<T>(ICollection<T>, T) Add the T value to the collection if it doesn't already exists inside Declaration public static bool AddIfNotContains<T>(this ICollection<T> collection, T value) Parameters Type Name Description ICollection<><T> collection T value Returns Type Description bool Type Parameters Name Description T AddIfNotNull<T>(ICollection<T>, T) Add the T element to the collection if it's not null Declaration public static bool AddIfNotNull<T>(this ICollection<T> collection, T element) Parameters Type Name Description ICollection<><T> collection T element Returns Type Description bool Type Parameters Name Description T AsString<T>(IList<T>, string) Return the list content as a string Declaration public static string AsString<T>(this IList<T> list, string separator = \", \") Parameters Type Name Description IList<><T> list string separator Returns Type Description string Type Parameters Name Description T GetOrDefault<T>(T[], int) Returns T from the index if it exist otherwise default(T) Declaration public static T GetOrDefault<T>(this T[] array, int index) Parameters Type Name Description T[] array int index Returns Type Description T Type Parameters Name Description T GetRandomElement<T>(IList<T>) Returns a random element from a list. Sampling with replacement. Declaration public static T GetRandomElement<T>(this IList<T> list) Parameters Type Name Description IList<><T> list Returns Type Description T Type Parameters Name Description T HasUniqueElements<T>(ICollection<T>, IEqualityComparer<T>) Determines if the collection contains only unique elements using a custom IEqualityComparer Declaration public static bool HasUniqueElements<T>(this ICollection<T> collection, IEqualityComparer<T> comparer) Parameters Type Name Description ICollection<><T> collection IEqualityComparer<><T> comparer Returns Type Description bool Type Parameters Name Description T HasUniqueElements<T>(ICollection<T>) Determines if the collection contains only unique elements Declaration public static bool HasUniqueElements<T>(this ICollection<T> collection) Parameters Type Name Description ICollection<><T> collection Returns Type Description bool Type Parameters Name Description T IndexInRange<T>(T[], int) Returns true if the index exist in the array Declaration public static bool IndexInRange<T>(this T[] array, int index) Parameters Type Name Description T[] array int index Returns Type Description bool Type Parameters Name Description T IsEmpty<T>(ICollection<T>) Determines if the collection is empty Declaration public static bool IsEmpty<T>(this ICollection<T> collection) Parameters Type Name Description ICollection<><T> collection Returns Type Description bool Type Parameters Name Description T IsNotEmpty<T>(ICollection<T>) Determines if the collection is not empty Declaration public static bool IsNotEmpty<T>(this ICollection<T> collection) Parameters Type Name Description ICollection<><T> collection Returns Type Description bool Type Parameters Name Description T IsNotNullOrEmpty<T>(ICollection<T>) Determines if the collection is not null or empty Declaration public static bool IsNotNullOrEmpty<T>(this ICollection<T> collection) Parameters Type Name Description ICollection<><T> collection Returns Type Description bool Type Parameters Name Description T IsNullOrEmpty<T>(ICollection<T>) Determines if the collection is null or empty Declaration public static bool IsNullOrEmpty<T>(this ICollection<T> collection) Parameters Type Name Description ICollection<><T> collection Returns Type Description bool Type Parameters Name Description T Log<T>(ICollection<T>) Displays the content of the Collection in the console Declaration public static void Log<T>(this ICollection<T> collection) Parameters Type Name Description ICollection<><T> collection Type Parameters Name Description T LogArray<T>(T[]) Debug.Log all elements from the array Declaration public static void LogArray<T>(T[] array) Parameters Type Name Description T[] array Type Parameters Name Description T RemoveRandomElement<T>(IList<T>) Removes a random element from a list, returning that item. Declaration public static T RemoveRandomElement<T>(this IList<T> list) Parameters Type Name Description IList<><T> list Returns Type Description T Type Parameters Name Description T ReverseLoop<T>(IList<T>) Loop backwards, useful to delete an element from the list. Declaration public static IEnumerable<T> ReverseLoop<T>(this IList<T> list) Parameters Type Name Description IList<><T> list Returns Type Description IEnumerable<><T> Type Parameters Name Description T Shuffle<T>(IList<T>) Shuffles the elements of a list randomly using fischer yates algorithm. The algorithm produces an unbiased permutation. Source: http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle Declaration public static void Shuffle<T>(this IList<T> list) Parameters Type Name Description IList<><T> list The list to Shuffle Type Parameters Name Description T WithoutDuplicates<T>(ICollection<T>) Declaration public static List<T> WithoutDuplicates<T>(this ICollection<T> list) Parameters Type Name Description ICollection<><T> list Returns Type Description List<><T> Type Parameters Name Description T"
  },
  "api/TetraCreations.Core.Collider2DExtensions.html": {
    "href": "api/TetraCreations.Core.Collider2DExtensions.html",
    "title": "Class Collider2DExtensions | Tetra Creations documentation",
    "keywords": "Class Collider2DExtensions Inheritance object Collider2DExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class Collider2DExtensions Methods ParentColliding(Collider2D, GameObject) Determines if the 2d collider set has a trigger is detecting it's parent Declaration public static bool ParentColliding(this Collider2D collider, GameObject gameObject) Parameters Type Name Description Collider2D collider GameObject gameObject Returns Type Description bool SelfOrParentColliding(Collider2D, GameObject) Determines if the 2d collider set has a trigger is detecting itself or it's parent Declaration public static bool SelfOrParentColliding(this Collider2D collider, GameObject gameObject) Parameters Type Name Description Collider2D collider GameObject gameObject Returns Type Description bool"
  },
  "api/TetraCreations.Core.ColliderExtensions.html": {
    "href": "api/TetraCreations.Core.ColliderExtensions.html",
    "title": "Class ColliderExtensions | Tetra Creations documentation",
    "keywords": "Class ColliderExtensions Inheritance object ColliderExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class ColliderExtensions Methods ParentColliding(Collider, GameObject) Determines if the collider set has a trigger is detecting it's parent Declaration public static bool ParentColliding(this Collider collider, GameObject gameObject) Parameters Type Name Description Collider collider GameObject gameObject Returns Type Description bool SelfOrParentColliding(Collider, GameObject) Determines if the collider set has a trigger is detecting itself or it's parent Declaration public static bool SelfOrParentColliding(this Collider collider, GameObject gameObject) Parameters Type Name Description Collider collider GameObject gameObject Returns Type Description bool"
  },
  "api/TetraCreations.Core.ColorExtentions.html": {
    "href": "api/TetraCreations.Core.ColorExtentions.html",
    "title": "Class ColorExtentions | Tetra Creations documentation",
    "keywords": "Class ColorExtentions Inheritance object ColorExtentions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class ColorExtentions Fields HTMLColorSymbol Declaration public const string HTMLColorSymbol = \"#\" Field Value Type Description string Methods GetBrighterColor(Color, float) Returns a brighter color by lerping to Color.white by a certain percentage Declaration public static Color GetBrighterColor(this Color color, float brightnessPercentage = 0.5) Parameters Type Name Description Color color float brightnessPercentage Returns Type Description Color GetDarkerColor(Color, float) Returns a darker color by lerping to Color.black by a certain percentage Declaration public static Color GetDarkerColor(this Color color, float darknessPercentage = 0.5) Parameters Type Name Description Color color float darknessPercentage Returns Type Description Color ToHtmlStringRGB(Color, bool) Converts the Color to it's hexadecimal representation (\"RRGGBB\"). Declaration public static string ToHtmlStringRGB(this Color color, bool includeSharp = true) Parameters Type Name Description Color color bool includeSharp True will return \"#RRGGBB\" Returns Type Description string ToHtmlStringRGBA(Color, bool) Converts the Color to it's hexadecimal representation (\"RRGGBBAA\"). Declaration public static string ToHtmlStringRGBA(this Color color, bool includeSharp = true) Parameters Type Name Description Color color bool includeSharp True will return \"#RRGGBBAA\" Returns Type Description string With(Color, float?, float?, float?, float?) Returns a new Color while chaning or keeping any value from the original Color (r, g, b, a). Declaration public static Color With(this Color color, float? r = null, float? g = null, float? b = null, float? a = null) Parameters Type Name Description Color color float? r float? g float? b float? a Returns Type Description Color"
  },
  "api/TetraCreations.Core.ComparableExtensions.html": {
    "href": "api/TetraCreations.Core.ComparableExtensions.html",
    "title": "Class ComparableExtensions | Tetra Creations documentation",
    "keywords": "Class ComparableExtensions Inheritance object ComparableExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class ComparableExtensions Methods InRange<T>(T, T, T, MatchInclusive) Checks if a value is in between a specific range, by default both lower and upper limit are inclusive. For example 10.InRange(0,10) will return true but 10.InRange(0,10, MatchInclusive.Lower) will return false. Declaration public static bool InRange<T>(this T actual, T lower, T upper, MatchInclusive matchInclusive = MatchInclusive.Both) where T : IComparable<T> Parameters Type Name Description T actual T lower T upper MatchInclusive matchInclusive Returns Type Description bool Type Parameters Name Description T"
  },
  "api/TetraCreations.Core.ConditionType.html": {
    "href": "api/TetraCreations.Core.ConditionType.html",
    "title": "Enum ConditionType | Tetra Creations documentation",
    "keywords": "Enum ConditionType Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public enum ConditionType Fields Name Description Between Equals Greater Lower"
  },
  "api/TetraCreations.Core.DebugLevel.html": {
    "href": "api/TetraCreations.Core.DebugLevel.html",
    "title": "Enum DebugLevel | Tetra Creations documentation",
    "keywords": "Enum DebugLevel Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public enum DebugLevel Fields Name Description Error None Warning"
  },
  "api/TetraCreations.Core.DictionaryExtensions.html": {
    "href": "api/TetraCreations.Core.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | Tetra Creations documentation",
    "keywords": "Class DictionaryExtensions Inheritance object DictionaryExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class DictionaryExtensions Methods Add<TKey, T>(IDictionary<TKey, object>, TKey, T) Adds T instance to the dictionary, so we can store any object. Declaration public static void Add<TKey, T>(this IDictionary<TKey, object> dictionary, TKey key, T value) where T : class Parameters Type Name Description IDictionary<, ><TKey, object> dictionary TKey key T value Type Parameters Name Description TKey T AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Tries to add if the key do not exist, otherwise it will replace its value. Declaration public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue value) Parameters Type Name Description IDictionary<, ><TKey, TValue> dictionary TKey key TValue value The value to add or replace Returns Type Description TValue The value added/updated Type Parameters Name Description TKey TValue Filter<TKey, TValue>(IDictionary<TKey, TValue>, Func<TKey, TValue, bool>) Filters the dictionary based on a predicate. Declaration public static IDictionary<TKey, TValue> Filter<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, Func<TKey, TValue, bool> predicate) Parameters Type Name Description IDictionary<, ><TKey, TValue> dictionary Func<, , ><TKey, TValue, bool> predicate Returns Type Description IDictionary<, ><TKey, TValue> Type Parameters Name Description TKey TValue FindKeysForValue<TKey, TValue>(IDictionary<TKey, TValue>, TValue) Finds all keys that have the given value. Declaration public static IEnumerable<TKey> FindKeysForValue<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TValue value) Parameters Type Name Description IDictionary<, ><TKey, TValue> dictionary TValue value Returns Type Description IEnumerable<><TKey> Type Parameters Name Description TKey TValue GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Tries to get the value by key, if it doesn't exist it will add it. Declaration public static TValue GetOrAdd<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue value) Parameters Type Name Description IDictionary<, ><TKey, TValue> dictionary TKey key TValue value Returns Type Description TValue The value Type Parameters Name Description TKey TValue GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Gets the value associated with the specified key. Returns a default value if the key is not found. Declaration public static TValue GetValueOrDefault<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue) Parameters Type Name Description IDictionary<, ><TKey, TValue> dictionary TKey key The key associated with the value TValue defaultValue The value to returns if key doesn't exist Returns Type Description TValue Type Parameters Name Description TKey TValue Log<TKey, TValue>(IDictionary<TKey, TValue>, string) Declaration public static void Log<TKey, TValue>(IDictionary<TKey, TValue> dictionary, string separator = \"|\") Parameters Type Name Description IDictionary<, ><TKey, TValue> dictionary string separator Type Parameters Name Description TKey TValue ReplaceValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Tries to replace a value inside the dictionary from the key. Declaration public static bool ReplaceValue<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue value) Parameters Type Name Description IDictionary<, ><TKey, TValue> dictionary TKey key TValue value Returns Type Description bool False if doesn't contain the key Type Parameters Name Description TKey TValue SortByKey<TKey, TValue>(IDictionary<TKey, TValue>) Sorts the dictionary by its keys. Declaration public static IDictionary<TKey, TValue> SortByKey<TKey, TValue>(this IDictionary<TKey, TValue> dictionary) Parameters Type Name Description IDictionary<, ><TKey, TValue> dictionary Returns Type Description IDictionary<, ><TKey, TValue> Type Parameters Name Description TKey TValue SortByValue<TKey, TValue>(IDictionary<TKey, TValue>) Sorts the dictionary by its values. Declaration public static IOrderedEnumerable<KeyValuePair<TKey, TValue>> SortByValue<TKey, TValue>(this IDictionary<TKey, TValue> dictionary) Parameters Type Name Description IDictionary<, ><TKey, TValue> dictionary Returns Type Description IOrderedEnumerable<><KeyValuePair<TKey, TValue>> Type Parameters Name Description TKey TValue"
  },
  "api/TetraCreations.Core.Editor.AssetDatabaseExtensions.html": {
    "href": "api/TetraCreations.Core.Editor.AssetDatabaseExtensions.html",
    "title": "Class AssetDatabaseExtensions | Tetra Creations documentation",
    "keywords": "Class AssetDatabaseExtensions Provides some generic static methods to simplify getting a specific asset or list of assets from one or more folders. In the AssetData aboslute path are invalid like this one for example : \"C:\\Unity\\MyProject\\Assets\\Game\\Data\\Sword.asset\", this is correct however \"Assets/Game/Data/Sword.asset\" We can search using the asset name or a predicate function. If an asset is not found, it returns null or an empty list depending on the method called. Inheritance object AssetDatabaseExtensions Namespace: TetraCreations.Core.Editor Assembly: cs.temp.dll.dll Syntax public static class AssetDatabaseExtensions Methods AssetExist(string, Type) Determine if an asset of a given type and name exist Declaration public static bool AssetExist(string name, Type assetType) Parameters Type Name Description string name The name of the asset, it can contains the extension (.asset) Type assetType The type of the asset to search for Returns Type Description bool AssetExistIn<T>(string, string[]) Determine if an asset exist inside any given folders path. Declaration public static bool AssetExistIn<T>(string assetName, string[] folders) where T : UnityEngine.Object Parameters Type Name Description string assetName The asset name to search string[] folders Returns Type Description bool Type Parameters Name Description T Object type CanAssetBeCreated(string, string, Type, bool) Verify if the asset name is not already taken or invalid, and if the path is not empty or null Declaration public static bool CanAssetBeCreated(string path, string name, Type assetType, bool debug = true) Parameters Type Name Description string path string name Type assetType bool debug Returns Type Description bool CreateAssetIn(Object, string, bool) Create an asset inside the given path, Debug.Log if it was successful or not. Declaration public static bool CreateAssetIn(UnityEngine.Object asset, string path, bool debug = true) Parameters Type Name Description UnityEngine.Object asset The asset to create string path The relative path to create the asset bool debug Show in the console any issue preventing saving the asset Returns Type Description bool GetAsset<T>(string) Returns the first asset by it's name. It will search inside the whole AssetDatabase. Declaration public static T GetAsset<T>(string assetName) where T : UnityEngine.Object Parameters Type Name Description string assetName Returns Type Description T null : Nothing found OR T : Any UnityEngine.Object Type Parameters Name Description T Object type GetAssetFrom<T>(string, Func<T, bool>) Returns the first asset matching the predicate from the given folder path. Declaration public static T GetAssetFrom<T>(string folderPath, Func<T, bool> predicate) where T : UnityEngine.Object Parameters Type Name Description string folderPath Relative folder path to search from Func<, ><T, bool> predicate Returns Type Description T Type Parameters Name Description T GetAssetFrom<T>(string, string) Returns the first asset by it's name, from the given relative folder path. Declaration public static T GetAssetFrom<T>(string assetName, string folderPath) where T : UnityEngine.Object Parameters Type Name Description string assetName string folderPath Relative folder path to search from Returns Type Description T null : Nothing found OR T : Any UnityEngine.Object Type Parameters Name Description T Object type GetAssetFrom<T>(string, string[]) Returns the first asset by it's name, from the given folders paths. Declaration public static T GetAssetFrom<T>(string assetName, string[] foldersPath) where T : UnityEngine.Object Parameters Type Name Description string assetName string[] foldersPath Returns Type Description T null : Nothing found OR T : Any UnityEngine.Object Type Parameters Name Description T Object type GetAssetFrom<T>(string[], Func<T, bool>) Returns the first asset matching the predicate from the given folders paths. Declaration public static T GetAssetFrom<T>(string[] foldersPath, Func<T, bool> predicate) where T : UnityEngine.Object Parameters Type Name Description string[] foldersPath Folders paths to search from Func<, ><T, bool> predicate Returns Type Description T Type Parameters Name Description T GetAssetGUIDs(string, Type) Returns all GUIDs of an asset by it's name and it's type. Declaration public static IEnumerable<string> GetAssetGUIDs(string assetName, Type assetType) Parameters Type Name Description string assetName Name of the asset Type assetType Type of the asset Returns Type Description IEnumerable<><string> GetAssetNameInvalidCharacters(string) Return the collection of invalid character(s) from a string Declaration public static IEnumerable<char> GetAssetNameInvalidCharacters(string filename) Parameters Type Name Description string filename Returns Type Description IEnumerable<><char> GetAssetsFrom<T>(string, Func<T, bool>) Returns the list of assets matching the predicate from the given folder path. Declaration public static List<T> GetAssetsFrom<T>(string folderPath, Func<T, bool> predicate) where T : UnityEngine.Object Parameters Type Name Description string folderPath Folder path to search from Func<, ><T, bool> predicate Returns Type Description List<><T> Type Parameters Name Description T GetAssetsFrom<T>(string) Returns the list of assets from the given folder path. Declaration public static List<T> GetAssetsFrom<T>(string folderPath) where T : UnityEngine.Object Parameters Type Name Description string folderPath Folder path to search from Returns Type Description List<><T> Type Parameters Name Description T Type of the asset GetAssetsFrom<T>(string[], Func<T, bool>) Returns the list of assets matching the predicate from the given folders path. Declaration public static List<T> GetAssetsFrom<T>(string[] foldersPath, Func<T, bool> predicate) where T : UnityEngine.Object Parameters Type Name Description string[] foldersPath Folders path to search from Func<, ><T, bool> predicate Returns Type Description List<><T> Type Parameters Name Description T GetAssetsFrom<T>(string[]) Returns the list of assets from the given folders path. Declaration public static List<T> GetAssetsFrom<T>(string[] foldersPath) where T : UnityEngine.Object Parameters Type Name Description string[] foldersPath Folders paths to search from Returns Type Description List<><T> Type Parameters Name Description T Type of the asset GetInvalidFilenameCharacters(string) Return an IEnumerable of char which are invalid for a file name. Declaration public static IEnumerable<char> GetInvalidFilenameCharacters(string source) Parameters Type Name Description string source Returns Type Description IEnumerable<><char> GetInvalidPathCharacters(string) Return an IEnumerable of char which are invalid for a file name. Declaration public static IEnumerable<char> GetInvalidPathCharacters(string source) Parameters Type Name Description string source Returns Type Description IEnumerable<><char> GetRelativePathWithExtension(string, string) Combine the name of the asset with its path to return a valid relative path ending by '.asset' For example : \"Assets/Game/Data/Sword.asset\" Declaration public static string GetRelativePathWithExtension(string assetName, string path) Parameters Type Name Description string assetName string path Returns Type Description string LoadMonoScriptsFrom(string[]) Returns the list of MonoScript assets, which represents C# files stored in the project, from the given folders. Declaration public static List<MonoScript> LoadMonoScriptsFrom(string[] folders) Parameters Type Name Description string[] folders Folders path to search from Returns Type Description List<><MonoScript> ToForwardSlashes(string) Converts any backslashes in the path to forward slashes, supported Unity Editor platforms: Windows, Mac, Linux. Declaration public static string ToForwardSlashes(string path) Parameters Type Name Description string path Returns Type Description string New string with forward slashes."
  },
  "api/TetraCreations.Core.Editor.AudioMixerExtensions.html": {
    "href": "api/TetraCreations.Core.Editor.AudioMixerExtensions.html",
    "title": "Class AudioMixerExtensions | Tetra Creations documentation",
    "keywords": "Class AudioMixerExtensions Inheritance object AudioMixerExtensions Namespace: TetraCreations.Core.Editor Assembly: cs.temp.dll.dll Syntax public static class AudioMixerExtensions Methods GetExposedParameterNames(AudioMixer, string) Return the list of Exposed parameters names from an AudioMixer, if contains is not empty or null, the name of the parameter must contains the string value. Declaration public static List<string> GetExposedParameterNames(this AudioMixer audioMixer, string contains = \"\") Parameters Type Name Description AudioMixer audioMixer string contains Returns Type Description List<><string>"
  },
  "api/TetraCreations.Core.Editor.EditorExtensions.html": {
    "href": "api/TetraCreations.Core.Editor.EditorExtensions.html",
    "title": "Class EditorExtensions | Tetra Creations documentation",
    "keywords": "Class EditorExtensions Inheritance object EditorExtensions Namespace: TetraCreations.Core.Editor Assembly: cs.temp.dll.dll Syntax public static class EditorExtensions Methods DrawUILine(Color, int, int, string, GUIStyle, float) Show a line with/without text in the center inside an editor. Declaration public static void DrawUILine(Color color, int thickness = 2, int padding = 10, string text = null, GUIStyle textStyle = null, float textSize = 130) Parameters Type Name Description Color color int thickness int padding string text GUIStyle textStyle float textSize RemoveAt(SerializedProperty, int) Remove the element at a specific index in a SerializedProperty Array Declaration public static bool RemoveAt(this SerializedProperty prop, int index) Parameters Type Name Description SerializedProperty prop int index Returns Type Description bool TryToFindSerializableProperty(string, SerializedProperty) Return SerializedProperty by it's name if it exists, it works for nested objects and array Declaration public static SerializedProperty TryToFindSerializableProperty(string propertyName, SerializedProperty property) Parameters Type Name Description string propertyName SerializedProperty property Returns Type Description SerializedProperty VerifyMissingUnityEventImplementation(MonoBehaviour, UnityEventBase, bool) Verify if an UnityEventBase is missing the required reference to another script or if the method doesn't exist anymore. Declaration public static void VerifyMissingUnityEventImplementation(MonoBehaviour controller, UnityEventBase unityEvent, bool requireHandler = false) Parameters Type Name Description MonoBehaviour controller UnityEventBase unityEvent bool requireHandler"
  },
  "api/TetraCreations.Core.Editor.html": {
    "href": "api/TetraCreations.Core.Editor.html",
    "title": "Namespace TetraCreations.Core.Editor | Tetra Creations documentation",
    "keywords": "Namespace TetraCreations.Core.Editor Classes AssetDatabaseExtensions Provides some generic static methods to simplify getting a specific asset or list of assets from one or more folders. In the AssetData aboslute path are invalid like this one for example : \"C:\\Unity\\MyProject\\Assets\\Game\\Data\\Sword.asset\", this is correct however \"Assets/Game/Data/Sword.asset\" We can search using the asset name or a predicate function. If an asset is not found, it returns null or an empty list depending on the method called. AudioMixerExtensions EditorExtensions MonoScriptExtensions PathReferenceExtensions"
  },
  "api/TetraCreations.Core.Editor.MonoScriptExtensions.html": {
    "href": "api/TetraCreations.Core.Editor.MonoScriptExtensions.html",
    "title": "Class MonoScriptExtensions | Tetra Creations documentation",
    "keywords": "Class MonoScriptExtensions Inheritance object MonoScriptExtensions Namespace: TetraCreations.Core.Editor Assembly: cs.temp.dll.dll Syntax public static class MonoScriptExtensions Methods CreateInstance(MonoScript) Create a new ScriptableObject instance based on the MonoScript Declaration public static ScriptableObject CreateInstance(this MonoScript monoScript) Parameters Type Name Description MonoScript monoScript Returns Type Description ScriptableObject GetEnumFields(MonoScript, string, out FieldInfo[]) Try to get the array of enum fields from a MonoScript, which needs to be an enum. Declaration public static bool GetEnumFields(this MonoScript monoScript, string assemblyName, out FieldInfo[] fieldInfos) Parameters Type Name Description MonoScript monoScript string assemblyName FieldInfo[] fieldInfos Returns Type Description bool TryToGetEnumType(string, string, out Type) Try to find the Enum script based on it's name and the Assembly. If the script was not found, it will try to look into the default C-Sharp Assembly. Then if the Type is still null, it means we can't find it. Declaration public static bool TryToGetEnumType(string enumScriptName, string assemblyName, out Type enumType) Parameters Type Name Description string enumScriptName string assemblyName Type enumType Returns Type Description bool TryToGetFieldsInfo(string, Type, out FieldInfo[]) Return bool if the array of FieldInfo is not empty. Declaration public static bool TryToGetFieldsInfo(string enumScriptName, Type enumType, out FieldInfo[] fieldInfos) Parameters Type Name Description string enumScriptName Type enumType FieldInfo[] fieldInfos Returns Type Description bool"
  },
  "api/TetraCreations.Core.Editor.PathReferenceExtensions.html": {
    "href": "api/TetraCreations.Core.Editor.PathReferenceExtensions.html",
    "title": "Class PathReferenceExtensions | Tetra Creations documentation",
    "keywords": "Class PathReferenceExtensions Inheritance object PathReferenceExtensions Namespace: TetraCreations.Core.Editor Assembly: cs.temp.dll.dll Syntax public static class PathReferenceExtensions Methods AssetExist<T>(PathReference, string) Determine if an asset exist inside the folder. Declaration public static bool AssetExist<T>(this PathReference pathReference, string assetName) where T : UnityEngine.Object Parameters Type Name Description PathReference pathReference string assetName The asset name to search Returns Type Description bool Type Parameters Name Description T Object type CreateAsset(PathReference, Object, bool) Create an asset inside the folder, Debug.Log if it was successful or not. Declaration public static bool CreateAsset(this PathReference pathReference, UnityEngine.Object asset, bool debug = true) Parameters Type Name Description PathReference pathReference Folder path reference UnityEngine.Object asset The asset to create bool debug If we want to Debug.Log issues during the asset creation Returns Type Description bool DeleteAssets<T>(PathReference, bool, Func<T, bool>) Delete every assets of the specified type inside the folder. Declaration public static bool DeleteAssets<T>(this PathReference pathReference, bool withConfirm = true, Func<T, bool> predicate = null) where T : UnityEngine.Object Parameters Type Name Description PathReference pathReference bool withConfirm If it open a Dialog box to confirm the suppression Func<, ><T, bool> predicate Used to delete asset matching the predicate function (Optional) Returns Type Description bool Type Parameters Name Description T GetAsset<T>(PathReference, string) Returns an asset of the specified type by its name inside the folder. Declaration public static T GetAsset<T>(this PathReference pathReference, string assetName) where T : UnityEngine.Object Parameters Type Name Description PathReference pathReference string assetName Returns Type Description T Type Parameters Name Description T GetAssets<T>(PathReference, Func<T, bool>) Return a list of all assets matching the predicate inside the folder. Declaration public static List<T> GetAssets<T>(this PathReference pathReference, Func<T, bool> predicate) where T : UnityEngine.Object Parameters Type Name Description PathReference pathReference Func<, ><T, bool> predicate Returns Type Description List<><T> Type Parameters Name Description T GetAssets<T>(PathReference) Returns a list of all assets of the specified type inside the folder. Declaration public static List<T> GetAssets<T>(this PathReference pathReference) where T : UnityEngine.Object Parameters Type Name Description PathReference pathReference Returns Type Description List<><T> Type Parameters Name Description T GetAssetsCount<T>(PathReference) Counts all assets of the specified type inside the folder. Declaration public static int GetAssetsCount<T>(this PathReference pathReference) where T : UnityEngine.Object Parameters Type Name Description PathReference pathReference Returns Type Description int Type Parameters Name Description T"
  },
  "api/TetraCreations.Core.EnumerableExtensions.html": {
    "href": "api/TetraCreations.Core.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | Tetra Creations documentation",
    "keywords": "Class EnumerableExtensions Inheritance object EnumerableExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class EnumerableExtensions Methods ChunkBy<T>(IList<T>, int) Chunk IEnumerable by size Declaration public static IEnumerable<IEnumerable<T>> ChunkBy<T>(this IList<T> source, int chunkSize) Parameters Type Name Description IList<><T> source int chunkSize Returns Type Description IEnumerable<><IEnumerable<><T>> Type Parameters Name Description T DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) Group elements using a predicate function Declaration public static IEnumerable<T> DistinctBy<T, TKey>(this IEnumerable<T> enumerable, Func<T, TKey> keySelector) Parameters Type Name Description IEnumerable<><T> enumerable Func<, ><T, TKey> keySelector The predicate for the group by Returns Type Description IEnumerable<><T> Type Parameters Name Description T TKey IsNullOrEmpty(IEnumerable) Returns true if the IEnumerable is empty or null Declaration public static bool IsNullOrEmpty(this IEnumerable enumerable) Parameters Type Name Description IEnumerable enumerable Returns Type Description bool RemoveDuplicates<T>(ICollection<T>, Func<T, int>) Declaration public static IEnumerable<T> RemoveDuplicates<T>(this ICollection<T> list, Func<T, int> predicate) Parameters Type Name Description ICollection<><T> list Func<, ><T, int> predicate Returns Type Description IEnumerable<><T> Type Parameters Name Description T ToNonNullList<T>(IEnumerable<T>) Returns an empty list if it is null. Declaration public static List<T> ToNonNullList<T>(this IEnumerable<T> enumerable) Parameters Type Name Description IEnumerable<><T> enumerable Returns Type Description List<><T> Type Parameters Name Description T"
  },
  "api/TetraCreations.Core.FieldInfoExtensions.html": {
    "href": "api/TetraCreations.Core.FieldInfoExtensions.html",
    "title": "Class FieldInfoExtensions | Tetra Creations documentation",
    "keywords": "Class FieldInfoExtensions Inheritance object FieldInfoExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class FieldInfoExtensions Methods GetRawValue(FieldInfo) Returns a long by default to cover both 32 bits and 64 bits enums. Declaration public static long GetRawValue(this FieldInfo fieldInfo) Parameters Type Name Description FieldInfo fieldInfo Returns Type Description long"
  },
  "api/TetraCreations.Core.FloatExtensions.html": {
    "href": "api/TetraCreations.Core.FloatExtensions.html",
    "title": "Class FloatExtensions | Tetra Creations documentation",
    "keywords": "Class FloatExtensions Inheritance object FloatExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class FloatExtensions Methods Clamp(ref float, float, float) Clamp the float value by reference. Declaration public static void Clamp(this ref float value, float minimum, float maximum) Parameters Type Name Description float value Value to clamp float minimum Minimum value float maximum Maximum value CountDigits(float, int, bool) Returns the number of digit of a floating number regardless of the current CultureInfo. Declaration public static int CountDigits(this float value, int precisionLimit = 7, bool countTrailingZeroes = true) Parameters Type Name Description float value int precisionLimit bool countTrailingZeroes Returns Type Description int GetPercentage(float, float) Get the percentage of the value for example : 50.GetPercentage(20) = 50 * 0.2 = 10 Declaration public static float GetPercentage(this float value, float percentage) Parameters Type Name Description float value float percentage Returns Type Description float IsApproximatelyEquals(float, float, float) Checks if two floating numbers are close enough Declaration public static bool IsApproximatelyEquals(float a, float b, float tolerance = 0.001) Parameters Type Name Description float a float b float tolerance How much difference we can have between the two floating value to consider them equals. Returns Type Description bool NormalizeEulerAngle(float) Normalize euler angle value from 0 to 360. Declaration public static float NormalizeEulerAngle(this float angle) Parameters Type Name Description float angle Returns Type Description float ParseToInt(float, RoundMethod) Converts a floating number to an int using one of the desired method : Ceiling, Floor, Round Declaration public static int ParseToInt(this float value, RoundMethod roundMethod = RoundMethod.Round) Parameters Type Name Description float value RoundMethod roundMethod Returns Type Description int PercentageOf(float, int) Returns the percentage represented by a number depending on a total for exemple 50 in 125 is 40%. Declaration public static float PercentageOf(this float portion, int total) Parameters Type Name Description float portion int total Returns Type Description float Round(float, int, MidpointRounding) Round a floating number to the desired amount of digit. Declaration public static float Round(this float value, int digitCount = 2, MidpointRounding midpointRounding = null) Parameters Type Name Description float value int digitCount MidpointRounding midpointRounding Returns Type Description float ToMultiplierPercentageBonus(float, int, bool) Returns a string representing a multiplier bonus percentage, asssuming 1f is 0%. So any value above 1f for example 1.25f will return +25%. And any value below 1f, like 0.25f will return -75%. Declaration public static string ToMultiplierPercentageBonus(this float value, int digit = 0, bool withPositiveSign = true) Parameters Type Name Description float value int digit Number of digit. bool withPositiveSign Add \"+\" sign in front of a positive percentage. Returns Type Description string ToStringPercentage(float, string) Converts the float to string percentage Example 0.45f ToPercentage() will return 45% Declaration public static string ToStringPercentage(this float value, string precision = \"0\") Parameters Type Name Description float value string precision Number of digit. Returns Type Description string"
  },
  "api/TetraCreations.Core.GameObjectExtensions.html": {
    "href": "api/TetraCreations.Core.GameObjectExtensions.html",
    "title": "Class GameObjectExtensions | Tetra Creations documentation",
    "keywords": "Class GameObjectExtensions Inheritance object GameObjectExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class GameObjectExtensions Methods DoesInstanceExist<T>() Determine if any instance of a specific game object type exist in the current scene Declaration public static bool DoesInstanceExist<T>() Returns Type Description bool Type Parameters Name Description T GetChildOrDefault(GameObject, int) Try to get the Transform at a specific index from the GameObject childs Declaration public static Transform GetChildOrDefault(this GameObject gameObject, int index) Parameters Type Name Description GameObject gameObject int index Returns Type Description Transform GetChildren(GameObject, List<GameObject>) Add children to a list from a gameObject recursively Declaration public static void GetChildren(this GameObject parent, List<GameObject> children) Parameters Type Name Description GameObject parent List<><GameObject> children GetComponentInChildren<T>(GameObject, ref T) Try to get a component from the GameObject children Declaration public static void GetComponentInChildren<T>(this GameObject gameObject, ref T component) where T : Component Parameters Type Name Description GameObject gameObject T component Type Parameters Name Description T GetComponentInChildren<T>(GameObject, int) Declaration public static T GetComponentInChildren<T>(this GameObject gameObject, int index) where T : Component Parameters Type Name Description GameObject gameObject int index Returns Type Description T Type Parameters Name Description T GetComponentInParent<T>(GameObject, ref T) Try to get a component from the GameObject parent Declaration public static void GetComponentInParent<T>(this GameObject gameObject, ref T component) where T : Component Parameters Type Name Description GameObject gameObject T component Type Parameters Name Description T GetComponentInParentOrChildren<T>(GameObject, ref T) Trie to get a component from the parent then from children if it wasn't found. Declaration public static void GetComponentInParentOrChildren<T>(this GameObject gameObject, ref T component) where T : Component Parameters Type Name Description GameObject gameObject T component Type Parameters Name Description T GetFirstChildren(GameObject) Returns children gameObject at the fist level in the hierarchy. Declaration public static List<GameObject> GetFirstChildren(this GameObject parent) Parameters Type Name Description GameObject parent Returns Type Description List<><GameObject> GetOrAddComponent<T>(GameObject) Returns a component if it exist otherwise add it. Declaration public static T GetOrAddComponent<T>(this GameObject gameObject) where T : Component Parameters Type Name Description GameObject gameObject Returns Type Description T Type Parameters Name Description T HasComponent<T>(GameObject) Determines whether the game object has the component Declaration public static bool HasComponent<T>(this GameObject gameObject) where T : Component Parameters Type Name Description GameObject gameObject Returns Type Description bool Type Parameters Name Description T IsActive(GameObject) Determine if the GameObject is active in the hierarchy Declaration public static bool IsActive(this GameObject gameObject) Parameters Type Name Description GameObject gameObject Returns Type Description bool Log(GameObject, string, string) Debug.Log the name of the GameObject followed by a message. Declaration public static void Log(this GameObject gameObject, string message, string separator = \" : \") Parameters Type Name Description GameObject gameObject string message string separator"
  },
  "api/TetraCreations.Core.html": {
    "href": "api/TetraCreations.Core.html",
    "title": "Namespace TetraCreations.Core | Tetra Creations documentation",
    "keywords": "Namespace TetraCreations.Core Classes AudioMixerExtensions Contain several methods for easily converting the volume value in decibels to a linear or percentage value. Exposed volume parameters of an AudioMixer are in decibels, but when the volume is controlled using a slider from the user interface, the linear value must be converted. The convertion is done automatically when SetLinearVolume() is called. CanvasGroupExtensions CollectionExtensions Collider2DExtensions ColliderExtensions ColorExtentions ComparableExtensions DictionaryExtensions EnumerableExtensions FieldInfoExtensions FloatExtensions GameObjectExtensions ImageExtensions IntegerExtensions LayerMaskExtensions ObjectExtensions QuaternionExtensions RandomExtensions RectTransformExtensions RendererExtensions StringExtensions TextureExtensions TransformExtensions TypeExtensions TypeUtility Vector2Extensions Vector3Extensions Enums ConditionType DebugLevel MatchInclusive RoundMethod"
  },
  "api/TetraCreations.Core.ImageExtensions.html": {
    "href": "api/TetraCreations.Core.ImageExtensions.html",
    "title": "Class ImageExtensions | Tetra Creations documentation",
    "keywords": "Class ImageExtensions Inheritance object ImageExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class ImageExtensions Methods Alpha(Image, float) Changes the transparency of the image color 0f is transparent, 1f is opaque Declaration public static void Alpha(this Image image, float transparency) Parameters Type Name Description Image image float transparency Color(Image, float?, float?, float?, float?) Changes the RGBA elements of the image color Declaration public static void Color(this Image image, float? r = null, float? g = null, float? b = null, float? a = null) Parameters Type Name Description Image image float? r float? g float? b float? a"
  },
  "api/TetraCreations.Core.IntegerExtensions.html": {
    "href": "api/TetraCreations.Core.IntegerExtensions.html",
    "title": "Class IntegerExtensions | Tetra Creations documentation",
    "keywords": "Class IntegerExtensions Inheritance object IntegerExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class IntegerExtensions Methods Clamp(ref int, int, int) Clamp the integer reference by a minimum and a maximum value Declaration public static void Clamp(this ref int integer, int minimum, int maximum) Parameters Type Name Description int integer int minimum int maximum IsEven(int) Determines if the integer is even or not Declaration public static bool IsEven(this int integer) Parameters Type Name Description int integer Returns Type Description bool true if even, false if not. IsOdd(int) Determines if the integer is odd or not Declaration public static bool IsOdd(this int integer) Parameters Type Name Description int integer Returns Type Description bool true if odd, false if not."
  },
  "api/TetraCreations.Core.LayerMaskExtensions.html": {
    "href": "api/TetraCreations.Core.LayerMaskExtensions.html",
    "title": "Class LayerMaskExtensions | Tetra Creations documentation",
    "keywords": "Class LayerMaskExtensions Inheritance object LayerMaskExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class LayerMaskExtensions Methods Contains(LayerMask, GameObject) Determines if the layer mask of a game object is set inside the mask source. Declaration public static bool Contains(this LayerMask mask, GameObject obj) Parameters Type Name Description LayerMask mask The mask containing the active/inactive layers. GameObject obj The GameObject layer to check for its existence in the mask. Returns Type Description bool Contains(LayerMask, int) Determines if a layer mask is set inside the mask source. Declaration public static bool Contains(this LayerMask mask, int layer) Parameters Type Name Description LayerMask mask The mask containing the active/inactive layers. int layer The layer we need to check for its existence in the mask. Returns Type Description bool"
  },
  "api/TetraCreations.Core.MatchInclusive.html": {
    "href": "api/TetraCreations.Core.MatchInclusive.html",
    "title": "Enum MatchInclusive | Tetra Creations documentation",
    "keywords": "Enum MatchInclusive Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public enum MatchInclusive Fields Name Description Both Lower Neither Upper"
  },
  "api/TetraCreations.Core.ObjectExtensions.html": {
    "href": "api/TetraCreations.Core.ObjectExtensions.html",
    "title": "Class ObjectExtensions | Tetra Creations documentation",
    "keywords": "Class ObjectExtensions Inheritance object ObjectExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class ObjectExtensions Methods As<T>(object) Casts anonymous type to the specified type. Declaration public static T As<T>(this object source) where T : class Parameters Type Name Description object source The object Returns Type Description T The object as the specified type. Type Parameters Name Description T Generic type parameter. The specified type. GetTypeAndName(Object, string) Returns the type and the object name. Declaration public static string GetTypeAndName(this UnityEngine.Object source, string separator = \" : \") Parameters Type Name Description UnityEngine.Object source string separator Returns Type Description string IsAssignableFrom(object, Type) Determines if an object is assignable from a targeted type. Declaration public static bool IsAssignableFrom(this object source, Type targetType) Parameters Type Name Description object source The object Type targetType Type of the target. Returns Type Description bool true if assignable from, false if not. IsAssignableFrom<T>(object) Determines if an object is assignable from. Declaration public static bool IsAssignableFrom<T>(this object source) Parameters Type Name Description object source The object Returns Type Description bool true if assignable from, false if not. Type Parameters Name Description T Generic type parameter. IsIn<T>(T, params T[]) Declaration public static bool IsIn<T>(this T source, params T[] list) Parameters Type Name Description T source T[] list Returns Type Description bool Type Parameters Name Description T IsNotNull<T>(T) Returns true if the object is not null, false otherwise. Declaration public static bool IsNotNull<T>(this T source) where T : class Parameters Type Name Description T source Returns Type Description bool Type Parameters Name Description T IsNull<T>(T) Returns true if the object is null, false otherwise. Declaration public static bool IsNull<T>(this T source) where T : class Parameters Type Name Description T source Returns Type Description bool Type Parameters Name Description T Null<T>(T) Returns the object itself if it exists, null otherwise. Declaration public static T Null<T>(this T self) where T : UnityEngine.Object Parameters Type Name Description T self Returns Type Description T Type Parameters Name Description T"
  },
  "api/TetraCreations.Core.QuaternionExtensions.html": {
    "href": "api/TetraCreations.Core.QuaternionExtensions.html",
    "title": "Class QuaternionExtensions | Tetra Creations documentation",
    "keywords": "Class QuaternionExtensions Inheritance object QuaternionExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class QuaternionExtensions Methods Add(Quaternion, float, float, float, float) Add any point to the value in original Quaternion (x, y, z, w). Declaration public static Quaternion Add(this Quaternion quaternion, float x = 0, float y = 0, float z = 0, float w = 0) Parameters Type Name Description Quaternion quaternion float x float y float z float w Returns Type Description Quaternion EulerWith(Quaternion, float?, float?, float?) Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis; applied in that order. Identical to Quaternion.Euler however we can specify which axes to rotate. Declaration public static Quaternion EulerWith(this Quaternion quaternion, float? x = null, float? y = null, float? z = null) Parameters Type Name Description Quaternion quaternion float? x float? y float? z Returns Type Description Quaternion With(Quaternion, float?, float?, float?, float?) Return a new Quaternion while changing any value in original Quaternion (x, y, z, w). Declaration public static Quaternion With(this Quaternion quaternion, float? x = null, float? y = null, float? z = null, float? w = null) Parameters Type Name Description Quaternion quaternion float? x float? y float? z float? w Returns Type Description Quaternion"
  },
  "api/TetraCreations.Core.RandomExtensions.html": {
    "href": "api/TetraCreations.Core.RandomExtensions.html",
    "title": "Class RandomExtensions | Tetra Creations documentation",
    "keywords": "Class RandomExtensions Inheritance object RandomExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class RandomExtensions Methods IsTrueWithProbability(float) Get a random number between 0f and 1f then check if the probility value is less or equals then the random number Declaration public static bool IsTrueWithProbability(float probability) Parameters Type Name Description float probability Returns Type Description bool RollDice(int) Virtually roll a dice and returns the value of its uppermost side. Declaration public static int RollDice(int sideCount = 6) Parameters Type Name Description int sideCount The number of the dice sides. Could be omitted (default value is six). Returns Type Description int Returns random integer from 1 to sideCount or 0 if provided with not valid (non-positive) value. Remarks A virtual dice consists of sideCount number of sides. The sides are numbered from 1 to sideCount. RollDices(int, int) Virtually roll a dice and returns the value of its uppermost side. Declaration public static int[] RollDices(int sideCount = 6, int diceCount = 2) Parameters Type Name Description int sideCount The number of the dice sides. Could be omitted (default value is six). int diceCount Returns Type Description int[] Returns random integer from 1 to sideCount or 0 if provided with not valid (non-positive) value. Remarks A virtual dice consists of sideCount number of sides. The sides are numbered from 1 to sideCount."
  },
  "api/TetraCreations.Core.RectTransformExtensions.html": {
    "href": "api/TetraCreations.Core.RectTransformExtensions.html",
    "title": "Class RectTransformExtensions | Tetra Creations documentation",
    "keywords": "Class RectTransformExtensions Inheritance object RectTransformExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class RectTransformExtensions Methods Bottom(RectTransform, float) Declaration public static RectTransform Bottom(this RectTransform rt, float y) Parameters Type Name Description RectTransform rt float y Returns Type Description RectTransform GetBottomOffset(RectTransform) Declaration public static float GetBottomOffset(this RectTransform rt) Parameters Type Name Description RectTransform rt Returns Type Description float GetHeight(RectTransform) Declaration public static float GetHeight(this RectTransform rt) Parameters Type Name Description RectTransform rt Returns Type Description float GetLeftOffset(RectTransform) Declaration public static float GetLeftOffset(this RectTransform rt) Parameters Type Name Description RectTransform rt Returns Type Description float GetRightOffset(RectTransform) Declaration public static float GetRightOffset(this RectTransform rt) Parameters Type Name Description RectTransform rt Returns Type Description float GetTopOffset(RectTransform) Declaration public static float GetTopOffset(this RectTransform rt) Parameters Type Name Description RectTransform rt Returns Type Description float GetWidth(RectTransform) Declaration public static float GetWidth(this RectTransform rt) Parameters Type Name Description RectTransform rt Returns Type Description float Height(RectTransform, float) Declaration public static RectTransform Height(this RectTransform rt, float height) Parameters Type Name Description RectTransform rt float height Returns Type Description RectTransform Left(RectTransform, float) Declaration public static RectTransform Left(this RectTransform rt, float x) Parameters Type Name Description RectTransform rt float x Returns Type Description RectTransform Offset(RectTransform, float, float, float, float) Declaration public static RectTransform Offset(this RectTransform rt, float left, float bottom, float right, float top) Parameters Type Name Description RectTransform rt float left float bottom float right float top Returns Type Description RectTransform Right(RectTransform, float) Declaration public static RectTransform Right(this RectTransform rt, float x) Parameters Type Name Description RectTransform rt float x Returns Type Description RectTransform Size(RectTransform, float, float) Declaration public static RectTransform Size(this RectTransform rt, float width, float height) Parameters Type Name Description RectTransform rt float width float height Returns Type Description RectTransform Top(RectTransform, float) Declaration public static RectTransform Top(this RectTransform rt, float y) Parameters Type Name Description RectTransform rt float y Returns Type Description RectTransform Width(RectTransform, float) Declaration public static RectTransform Width(this RectTransform rt, float width) Parameters Type Name Description RectTransform rt float width Returns Type Description RectTransform"
  },
  "api/TetraCreations.Core.RendererExtensions.html": {
    "href": "api/TetraCreations.Core.RendererExtensions.html",
    "title": "Class RendererExtensions | Tetra Creations documentation",
    "keywords": "Class RendererExtensions Inheritance object RendererExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class RendererExtensions Methods IsVisibleFrom(Renderer, Camera) Determines if the Renderer can be seen by a camera Declaration public static bool IsVisibleFrom(this Renderer renderer, Camera camera) Parameters Type Name Description Renderer renderer Camera camera Returns Type Description bool"
  },
  "api/TetraCreations.Core.RoundMethod.html": {
    "href": "api/TetraCreations.Core.RoundMethod.html",
    "title": "Enum RoundMethod | Tetra Creations documentation",
    "keywords": "Enum RoundMethod Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public enum RoundMethod Fields Name Description Ceiling Floor Round"
  },
  "api/TetraCreations.Core.StringExtensions.html": {
    "href": "api/TetraCreations.Core.StringExtensions.html",
    "title": "Class StringExtensions | Tetra Creations documentation",
    "keywords": "Class StringExtensions Inheritance object StringExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class StringExtensions Methods Concat(string, string, string) Concatenates three string Declaration public static string Concat(this string str0, string str1, string str2) Parameters Type Name Description string str0 The first string to concatenate. string str1 The second string to concatenate. string str2 The third string to concatenate. Returns Type Description string Concat(string, string) Concatenates two string Declaration public static string Concat(this string str0, string str1) Parameters Type Name Description string str0 The first string to concatenate. string str1 The second string to concatenate. Returns Type Description string Extract(string, Func<char, bool>) Extract the portion of the string which match the predicate Declaration public static string Extract(this string source, Func<char, bool> predicate) Parameters Type Name Description string source The string to act on. Func<, ><char, bool> predicate Returns Type Description string A string. ExtractInt32(string) Extracts the integer from the string. Declaration public static int ExtractInt32(this string source) Parameters Type Name Description string source The string to act on. Returns Type Description int Format(string, params object[]) Allow to use string.Format directly from the string like \"Hello {0}\".Format(\"World\"), output => Hello World Declaration public static string Format(this string format, params object[] args) Parameters Type Name Description string format object[] args Returns Type Description string GetAfter(string, string) Get the string after the specified string. Declaration public static string GetAfter(this string source, string value) Parameters Type Name Description string source The string to act on. string value The value to search. Returns Type Description string The string after the specified value. GetBefore(string, string) Get the string before the specified string. Declaration public static string GetBefore(this string source, string value) Parameters Type Name Description string source The string to act on. string value The value to search. Returns Type Description string The string before the specified value. GetBetween(string, string, string) Get the string between the two specified string. Declaration public static string GetBetween(this string source, string before, string after) Parameters Type Name Description string source The string to act on. string before The string before to search. string after The string after to search. Returns Type Description string The string between the two specified string. GetInvalidFilenameCharacters(string) Return an IEnumerable of char which are invalid for a file name. Declaration public static IEnumerable<char> GetInvalidFilenameCharacters(this string source) Parameters Type Name Description string source Returns Type Description IEnumerable<><char> GetInvalidPathCharacters(string) Return an IEnumerable of char which are invalid for a file name. Declaration public static IEnumerable<char> GetInvalidPathCharacters(this string source) Parameters Type Name Description string source Returns Type Description IEnumerable<><char> HasAnyInvalidChars(string) Determine if a string has any invalid character as a file name. Declaration public static bool HasAnyInvalidChars(this string source) Parameters Type Name Description string source Returns Type Description bool IsNnotNullOrEmpty(string) Returns true if the string is Not null or empty Declaration public static bool IsNnotNullOrEmpty(this string value) Parameters Type Name Description string value Returns Type Description bool IsNullOrEmpty(string) Allow to use string.IsNullOrEmpty directly from the string Declaration public static bool IsNullOrEmpty(this string value) Parameters Type Name Description string value Returns Type Description bool Log(string, DebugLevel, bool) Log the string in the console. Declaration public static void Log(this string source, DebugLevel debugLevel = DebugLevel.None, bool debug = true) Parameters Type Name Description string source The string to Log. DebugLevel debugLevel Choose which Debug.Log method to call (Normal, Warning, Error) bool debug Set to false to prevent log ParsePercentageToFloat(string) Converts the string formated as a percentage to float value, for example '10.2%'.ParsePercentageString() returns 10.2f Declaration public static float ParsePercentageToFloat(this string value) Parameters Type Name Description string value Returns Type Description float RemoveInvalidChars(string) Return a string without any invalid character as a file name. Declaration public static string RemoveInvalidChars(this string source) Parameters Type Name Description string source Returns Type Description string RemoveSpaces(string) Return the string without any spaces. Declaration public static string RemoveSpaces(this string source) Parameters Type Name Description string source Returns Type Description string ToIntOrNull(string) Try to parse the string to an int Declaration public static int? ToIntOrNull(this string source) Parameters Type Name Description string source Returns Type Description int? ToSentenceCase(string) Convert a pascal case string to a sentence. Declaration public static string ToSentenceCase(this string source) Parameters Type Name Description string source Returns Type Description string UppercaseFirst(string) Set the first character to upper case. Declaration public static string UppercaseFirst(this string source) Parameters Type Name Description string source Returns Type Description string"
  },
  "api/TetraCreations.Core.TextureExtensions.html": {
    "href": "api/TetraCreations.Core.TextureExtensions.html",
    "title": "Class TextureExtensions | Tetra Creations documentation",
    "keywords": "Class TextureExtensions Inheritance object TextureExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class TextureExtensions Methods MakeTexture(int, int, Color) Declaration public static Texture2D MakeTexture(int width, int height, Color col) Parameters Type Name Description int width int height Color col Returns Type Description Texture2D"
  },
  "api/TetraCreations.Core.TransformExtensions.html": {
    "href": "api/TetraCreations.Core.TransformExtensions.html",
    "title": "Class TransformExtensions | Tetra Creations documentation",
    "keywords": "Class TransformExtensions Inheritance object TransformExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class TransformExtensions Methods AddScale(Transform, float, float, float) Add values to curent local scale of the transform. Declaration public static void AddScale(this Transform transform, float x = 0, float y = 0, float z = 0) Parameters Type Name Description Transform transform float x float y float z AddToPosition(Transform, float, float, float) Add values to the current position of the transform. Declaration public static void AddToPosition(this Transform transform, float x = 0, float y = 0, float z = 0) Parameters Type Name Description Transform transform float x float y float z AddToRotation(Transform, float, float, float) Add values to the current local rotation of the transform. Declaration public static void AddToRotation(this Transform transform, float x = 0, float y = 0, float z = 0) Parameters Type Name Description Transform transform float x float y float z DestroyChildren(Transform, Func<Transform, bool>) Destroy all children of the transform. If we pass a predicate, it needs to be true to actually destroy the child. Declaration public static void DestroyChildren(this Transform transform, Func<Transform, bool> predicate = null) Parameters Type Name Description Transform transform Func<, ><Transform, bool> predicate Predicate function to exclude some children from being destroyed (If false). DestroyChildrenImmediately(Transform, Func<Transform, bool>) Destroy immediately all children of the transform inside the editor. If we pass a predicate, it needs to be true to actually destroy the child. Declaration public static void DestroyChildrenImmediately(this Transform transform, Func<Transform, bool> predicate = null) Parameters Type Name Description Transform transform Func<, ><Transform, bool> predicate Predicate function to exclude some children from being destroyed (If false). DisableChildren(Transform) Disables all child game objects of the given transform. Declaration public static void DisableChildren(this Transform parent) Parameters Type Name Description Transform parent The Transform whose child game objects are to be disabled. EnableChildren(Transform) Enables all child game objects of the given transform. Declaration public static void EnableChildren(this Transform parent) Parameters Type Name Description Transform parent The Transform whose child game objects are to be enabled. ForEachChild(Transform, Action<Transform>) Executes an action for each child of a given transform. Declaration public static void ForEachChild(this Transform parent, Action<Transform> action) Parameters Type Name Description Transform parent The transform Action<><Transform> action The action to be performed on each child Remarks This method iterates over all child transforms in reverse order and executes a given action on them. The action is a delegate that takes a Transform as parameter. GetChild(Transform, int) Get child Transform by index, return null if the index is out of range. Declaration public static Transform GetChild(this Transform transform, int index) Parameters Type Name Description Transform transform int index Returns Type Description Transform GetChildrenTransforms(Transform, List<Transform>) Get every childreen transforms recursively Declaration public static void GetChildrenTransforms(this Transform parent, List<Transform> children) Parameters Type Name Description Transform parent List<><Transform> children GetComponentInChildren<T>(Transform, int) Declaration public static T GetComponentInChildren<T>(this Transform transform, int index) Parameters Type Name Description Transform transform int index Returns Type Description T Type Parameters Name Description T GetFirstChildrenTransforms(Transform) Get children transforms at the fist level in the hierarchy. Declaration public static List<Transform> GetFirstChildrenTransforms(this Transform parent) Parameters Type Name Description Transform parent Returns Type Description List<><Transform> Log(Transform) Show all the transform values in the console (Position, LocalRotation, Scale) Declaration public static void Log(this Transform transform) Parameters Type Name Description Transform transform LogEulerAngles(Transform) Show the transform local rotation euler angles values in the console Declaration public static void LogEulerAngles(this Transform transform) Parameters Type Name Description Transform transform LogPosition(Transform) Show the transform position values in the console Declaration public static void LogPosition(this Transform transform) Parameters Type Name Description Transform transform LogScale(Transform) Show the transform local scale values in the console Declaration public static void LogScale(this Transform transform) Parameters Type Name Description Transform transform LookAt2D(Transform, Transform) Makes the transform look at a 2D target object by rotating its Up-axis towards the target position. Declaration public static void LookAt2D(this Transform transform, Transform target) Parameters Type Name Description Transform transform The transform to look at the target. Transform target The target transform to look at. Reset(Transform) Set position (0,0,0), localRotation to Quaternion.identity and localeScale to (1,1,1). Declaration public static void Reset(this Transform transform) Parameters Type Name Description Transform transform ResetLocalRotation(Transform) Set the local rotation to \"no rotation\" - the object is perfectly aligned with the world or parent axes. Declaration public static void ResetLocalRotation(this Transform transform) Parameters Type Name Description Transform transform ResetPosition(Transform) Set position to (0,0,0) Declaration public static void ResetPosition(this Transform transform) Parameters Type Name Description Transform transform ResetScale(Transform) Set the local scale to (1,1,1) Declaration public static void ResetScale(this Transform transform) Parameters Type Name Description Transform transform SetPosition(Transform, float?, float?, float?) Set position values of the transform. Declaration public static void SetPosition(this Transform transform, float? x = null, float? y = null, float? z = null) Parameters Type Name Description Transform transform float? x float? y float? z SetRotation(Transform, float?, float?, float?) Set rotation values of the transform. Declaration public static void SetRotation(this Transform transform, float? x = null, float? y = null, float? z = null) Parameters Type Name Description Transform transform float? x float? y float? z SetScale(Transform, float?, float?, float?) Set scale values of the transform. Declaration public static void SetScale(this Transform transform, float? x = null, float? y = null, float? z = null) Parameters Type Name Description Transform transform float? x float? y float? z SetScaleAllAxes(Transform, float) Set the local scale for all axes. Declaration public static void SetScaleAllAxes(this Transform transform, float scaling) Parameters Type Name Description Transform transform float scaling"
  },
  "api/TetraCreations.Core.TypeExtensions.html": {
    "href": "api/TetraCreations.Core.TypeExtensions.html",
    "title": "Class TypeExtensions | Tetra Creations documentation",
    "keywords": "Class TypeExtensions Inheritance object TypeExtensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class TypeExtensions Methods GetMethod(Type, string) Returns the MethodInfo using the method name Declaration public static MethodInfo GetMethod(this Type type, string name) Parameters Type Name Description Type type string name Method name Returns Type Description MethodInfo GetTypeName(Type) Get the type name for the asset database if it's from the Engine, otherwise return the FullName Declaration public static string GetTypeName(this Type type) Parameters Type Name Description Type type Returns Type Description string HasFlagsAttribute(Type) Determines whether an Enum type has the [Flags] attribute Declaration public static bool HasFlagsAttribute(this Type type) Parameters Type Name Description Type type Returns Type Description bool Implements(Type, Type) Determines whether a type implements an interface. Declaration public static bool Implements(this Type source, Type interfaceType) Parameters Type Name Description Type source Type interfaceType Returns Type Description bool Implements<T>(Type) Determines whether a type implements an interface. Declaration public static bool Implements<T>(this Type source) Parameters Type Name Description Type source Returns Type Description bool Type Parameters Name Description T The interface Type IsAnonymous(Type) Determines whether a Type is anonym, it means the type name is generated by the compiler and is not available at the source code level. https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types Declaration public static bool IsAnonymous(this Type type) Parameters Type Name Description Type type Returns Type Description bool IsCompilerGenerated(Type) Determines whether a Type is a compiler-generated element. Declaration public static bool IsCompilerGenerated(this Type type) Parameters Type Name Description Type type Returns Type Description bool IsEnum(Type) Determines whether the Type is an enum Declaration public static bool IsEnum(this Type type) Parameters Type Name Description Type type Returns Type Description bool IsFromUnity(Type) Determines if the type is from the UnityEngine or UnityEditor namespaces Declaration public static bool IsFromUnity(this Type type) Parameters Type Name Description Type type Returns Type Description bool IsFromUnityEditor(Type) Determines if the type is from the UnityEditor namespace Declaration public static bool IsFromUnityEditor(this Type type) Parameters Type Name Description Type type Returns Type Description bool IsFromUnityEngine(Type) Determines if the type is from the UnityEngine namespace Declaration public static bool IsFromUnityEngine(this Type type) Parameters Type Name Description Type type Returns Type Description bool IsImplementedBy(Type, Type) Determines whether a type implements another Declaration public static bool IsImplementedBy(this Type type, Type other) Parameters Type Name Description Type type Type other Returns Type Description bool"
  },
  "api/TetraCreations.Core.TypeUtility.html": {
    "href": "api/TetraCreations.Core.TypeUtility.html",
    "title": "Class TypeUtility | Tetra Creations documentation",
    "keywords": "Class TypeUtility Inheritance object TypeUtility Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class TypeUtility Methods GetAssembly(string, bool) Returns an assembly by it's name Declaration public static Assembly GetAssembly(string name, bool ignoreCase = false) Parameters Type Name Description string name The assembly name bool ignoreCase If we ignore the case during string comparison Returns Type Description Assembly ParseType(string, string) Tries to return a Type by it's name from a given assembly name. Declaration public static Type ParseType(string assembName, string typeName) Parameters Type Name Description string assembName The assembly name to search from string typeName The type name we want Returns Type Description System.Type"
  },
  "api/TetraCreations.Core.Utility.CountdownTimer.html": {
    "href": "api/TetraCreations.Core.Utility.CountdownTimer.html",
    "title": "Class CountdownTimer | Tetra Creations documentation",
    "keywords": "Class CountdownTimer Typically used as a cooldown timer. When calling Tick method the time is reduced until it reach 0, then the timer is finished. Inheritance object Timer CountdownTimer Inherited Members Timer._timeFormat Timer._resetOnStop Timer._loop Timer._time Timer._initialTime Timer._previousTimeInSeconds Timer.TimeFormat Timer.ResetOnStop Timer.Loop Timer.Time Timer.InitialTime Timer.TimeInSeconds Timer.IsRunning Timer.TimeAsString Timer.InitialTimeAsString Timer.OnTimerStart Timer.OnTimerStop Timer.OnSecondElapsed Timer.OnTimerLooped Timer.Start() Timer.Stop() Timer.Resume() Timer.Pause() Timer.SetInitialTime(float) Timer.ToString() Namespace: TetraCreations.Core.Utility Assembly: cs.temp.dll.dll Syntax public class CountdownTimer : Timer Constructors CountdownTimer(float, bool, bool, string) Declaration public CountdownTimer(float value, bool resetOnStop = true, bool loop = false, string timeFormat = \"F1\") Parameters Type Name Description float value bool resetOnStop bool loop string timeFormat Properties IsDone Declaration public override bool IsDone { get; } Property Value Type Description bool Overrides Timer.IsDone Progress The progression of a CountdownTimer is reversed because we decrease the current Time. Declaration public override float Progress { get; } Property Value Type Description float Overrides Timer.Progress Methods Reset() Declaration public override void Reset() Overrides Timer.Reset() Tick(float) Decrease the current time until it reach 0. Declaration public override void Tick(float deltaTime) Parameters Type Name Description float deltaTime Overrides Timer.Tick(float)"
  },
  "api/TetraCreations.Core.Utility.FloatValueCondition.ConditionIsMet.html": {
    "href": "api/TetraCreations.Core.Utility.FloatValueCondition.ConditionIsMet.html",
    "title": "Delegate FloatValueCondition.ConditionIsMet | Tetra Creations documentation",
    "keywords": "Delegate FloatValueCondition.ConditionIsMet Namespace: TetraCreations.Core.Utility Assembly: cs.temp.dll.dll Syntax public delegate void FloatValueCondition.ConditionIsMet(object sender, EventArgs e) Parameters Type Name Description object sender EventArgs e"
  },
  "api/TetraCreations.Core.Utility.FloatValueCondition.html": {
    "href": "api/TetraCreations.Core.Utility.FloatValueCondition.html",
    "title": "Class FloatValueCondition | Tetra Creations documentation",
    "keywords": "Class FloatValueCondition Inheritance object FloatValueCondition Namespace: TetraCreations.Core.Utility Assembly: cs.temp.dll.dll Syntax public class FloatValueCondition Constructors FloatValueCondition(float, float, bool, float) Declaration public FloatValueCondition(float value, float maximum, bool orEquals = true, float equalityPrecision = 0.01) Parameters Type Name Description float value float maximum bool orEquals float equalityPrecision FloatValueCondition(float, ConditionType, bool, float) Declaration public FloatValueCondition(float value, ConditionType conditionType, bool orEquals = true, float equalityPrecision = 0.01) Parameters Type Name Description float value ConditionType conditionType bool orEquals float equalityPrecision Properties ConditionType Declaration public ConditionType ConditionType { get; set; } Property Value Type Description ConditionType EqualityPrecision Declaration public float EqualityPrecision { get; set; } Property Value Type Description float EventRaised Declaration public bool EventRaised { get; } Property Value Type Description bool IsMet Declaration public bool IsMet { get; } Property Value Type Description bool Maximum Declaration public float Maximum { get; set; } Property Value Type Description float OrEquals Declaration public bool OrEquals { get; set; } Property Value Type Description bool RaiseEventOnce Declaration public bool RaiseEventOnce { get; set; } Property Value Type Description bool ResetEventRaisedWhenNotMet Declaration public bool ResetEventRaisedWhenNotMet { get; set; } Property Value Type Description bool Value Declaration public float Value { get; set; } Property Value Type Description float Methods Evaluate(float) Determines if the condition is satisfied depending on the ConditionType selected. Declaration public bool Evaluate(float value) Parameters Type Name Description float value Returns Type Description bool IsBetween(float) Determines if the passed value is between than the condition's values Declaration protected bool IsBetween(float value) Parameters Type Name Description float value Returns Type Description bool IsEquals(float) Determines if the passed value is equals to the condition's value Declaration protected bool IsEquals(float value) Parameters Type Name Description float value Returns Type Description bool IsGreater(float) Determines if the passed value is greater than the condition's value Declaration protected bool IsGreater(float value) Parameters Type Name Description float value Returns Type Description bool IsLower(float) Determines if the passed value is lower than the condition's value Declaration protected bool IsLower(float value) Parameters Type Name Description float value Returns Type Description bool TriggerEvent() Invokes OnMet event unless TriggerEventOnlyOnce and it has been invoked already. Declaration protected virtual void TriggerEvent() Events OnMet Declaration public event FloatValueCondition.ConditionIsMet OnMet Event Type Type Description FloatValueCondition.ConditionIsMet"
  },
  "api/TetraCreations.Core.Utility.html": {
    "href": "api/TetraCreations.Core.Utility.html",
    "title": "Namespace TetraCreations.Core.Utility | Tetra Creations documentation",
    "keywords": "Namespace TetraCreations.Core.Utility Classes CountdownTimer Typically used as a cooldown timer. When calling Tick method the time is reduced until it reach 0, then the timer is finished. FloatValueCondition LayerMaskFilter Used to filter GameObjects by their LayerMask, we can use an inclusive layer so the GameObject need at least one layer from it to be accepted. We can also exlude a GameObject when it has at least one layer set inside the ExcludedLayerMask. Or we can use a combination of both for example you may have objects using the layer 'Enemy' and others that use 'Enemy' and 'Boss'. And if you want to detect 'Enemy' only, you set the bit in the Inclusive mask, and set the 'Boss' bit inside the exclusive layer mask. Singleton Singleton<T> Timer Used to increment the time until it reach the initial time passed in the constructor. Then the Timer either stops or it loop until we call the Stop() method. See TimerManager to start a new timer. TimerManager Trigger2DCollider Simple script which define a zone by a 2D collider or a radius in which it will detect any object. It holds a layer bit mask, to ignore specific layers TriggerCollider Simple script which define a zone by a collider or a radius in which it will detect any object. It holds a layer bit mask, to ignore specific layers Delegates FloatValueCondition.ConditionIsMet"
  },
  "api/TetraCreations.Core.Utility.LayerMaskFilter.html": {
    "href": "api/TetraCreations.Core.Utility.LayerMaskFilter.html",
    "title": "Class LayerMaskFilter | Tetra Creations documentation",
    "keywords": "Class LayerMaskFilter Used to filter GameObjects by their LayerMask, we can use an inclusive layer so the GameObject need at least one layer from it to be accepted. We can also exlude a GameObject when it has at least one layer set inside the ExcludedLayerMask. Or we can use a combination of both for example you may have objects using the layer 'Enemy' and others that use 'Enemy' and 'Boss'. And if you want to detect 'Enemy' only, you set the bit in the Inclusive mask, and set the 'Boss' bit inside the exclusive layer mask. Inheritance object LayerMaskFilter Namespace: TetraCreations.Core.Utility Assembly: cs.temp.dll.dll Syntax [Serializable] public class LayerMaskFilter Fields ExcludedLayerMask Declaration public LayerMask ExcludedLayerMask Field Value Type Description LayerMask Exclusive Declaration public bool Exclusive Field Value Type Description bool IncludedLayerMask Declaration public LayerMask IncludedLayerMask Field Value Type Description LayerMask Inclusive Declaration public bool Inclusive Field Value Type Description bool Methods AcceptedLayer(int) Determines if a layer is included and not excluded Declaration public bool AcceptedLayer(int layer) Parameters Type Name Description int layer Returns Type Description bool IsExcluded(int) Determines if a layer is set inside the ExcludedLayerMask. Always returns false when Exclusive option is false. Declaration public bool IsExcluded(int layer) Parameters Type Name Description int layer Returns Type Description bool IsIncluded(int) Determines if a layer is set inside the IncludedLayerMask. Always returns true when Inclusive option is false. Declaration public bool IsIncluded(int layer) Parameters Type Name Description int layer Returns Type Description bool"
  },
  "api/TetraCreations.Core.Utility.Singleton-1.html": {
    "href": "api/TetraCreations.Core.Utility.Singleton-1.html",
    "title": "Class Singleton<T> | Tetra Creations documentation",
    "keywords": "Class Singleton<T> Inheritance object Singleton Singleton<T> TimerManager Inherited Members Singleton.Quitting Singleton.OnQuitting() Namespace: TetraCreations.Core.Utility Assembly: cs.temp.dll.dll Syntax public abstract class Singleton<T> : Singleton where T : MonoBehaviour Type Parameters Name Description T Fields _automaticInstanciation Declaration public static bool _automaticInstanciation Field Value Type Description bool OnAwakeEvent Declaration public UnityEvent OnAwakeEvent Field Value Type Description UnityEvent Properties Instance Declaration public static T Instance { get; } Property Value Type Description T IsAwake Declaration public bool IsAwake { get; protected set; } Property Value Type Description bool Methods OnAwake() Override this, instead of overriding Awake() ! or if you use Awake() dont forget to call base.Awake(); Declaration protected virtual void OnAwake()"
  },
  "api/TetraCreations.Core.Utility.Singleton.html": {
    "href": "api/TetraCreations.Core.Utility.Singleton.html",
    "title": "Class Singleton | Tetra Creations documentation",
    "keywords": "Class Singleton Inheritance object Singleton Singleton<T> Namespace: TetraCreations.Core.Utility Assembly: cs.temp.dll.dll Syntax public abstract class Singleton : MonoBehaviour Properties Quitting Declaration public static bool Quitting { get; } Property Value Type Description bool Methods OnQuitting() Declaration protected virtual void OnQuitting()"
  },
  "api/TetraCreations.Core.Utility.Timer.html": {
    "href": "api/TetraCreations.Core.Utility.Timer.html",
    "title": "Class Timer | Tetra Creations documentation",
    "keywords": "Class Timer Used to increment the time until it reach the initial time passed in the constructor. Then the Timer either stops or it loop until we call the Stop() method. See TimerManager to start a new timer. Inheritance object Timer CountdownTimer Namespace: TetraCreations.Core.Utility Assembly: cs.temp.dll.dll Syntax public class Timer Constructors Timer(float, bool, bool, string) Create a new timer ready to be started Declaration public Timer(float initialTime, bool resetOnStop = true, bool loop = false, string timeFormat = \"F1\") Parameters Type Name Description float initialTime Time to reach before it stops. bool resetOnStop Determines if we reset the Time to the initial time when the timer stops. bool loop Determines if the timer will Tick then Reset unless we manually call Stop() string timeFormat How do we format the Time and the Initial time as strings. Fields _initialTime Declaration protected float _initialTime Field Value Type Description float _loop Declaration protected bool _loop Field Value Type Description bool _previousTimeInSeconds Declaration protected int _previousTimeInSeconds Field Value Type Description int _resetOnStop Declaration protected bool _resetOnStop Field Value Type Description bool _time Declaration protected float _time Field Value Type Description float _timeFormat Declaration protected string _timeFormat Field Value Type Description string OnSecondElapsed Occurs every second. Declaration public Action OnSecondElapsed Field Value Type Description Action OnTimerLooped Invoked when the Timer looped Declaration public Action OnTimerLooped Field Value Type Description Action OnTimerStart Invoked when the Timer starts Declaration public Action OnTimerStart Field Value Type Description Action OnTimerStop Invoked when the Timer stops Declaration public Action OnTimerStop Field Value Type Description Action Properties InitialTime The Time when the timer was instancied. Declaration public float InitialTime { get; } Property Value Type Description float InitialTimeAsString Declaration public virtual string InitialTimeAsString { get; } Property Value Type Description string IsDone Declaration public virtual bool IsDone { get; } Property Value Type Description bool IsRunning Indicates if the Timer has been started Declaration public bool IsRunning { get; protected set; } Property Value Type Description bool Loop Determines if the timer will Tick then Reset unless we manually call Stop() Declaration public bool Loop { get; } Property Value Type Description bool Progress Returns the timer current progression until it is finished Declaration public virtual float Progress { get; } Property Value Type Description float ResetOnStop Set the Time to the InitialTime when the timer stops. Declaration public bool ResetOnStop { get; set; } Property Value Type Description bool Time The current time in seconds as float Declaration public float Time { get; } Property Value Type Description float TimeAsString Declaration public virtual string TimeAsString { get; } Property Value Type Description string TimeFormat The string format used to display the time Declaration public string TimeFormat { get; set; } Property Value Type Description string TimeInSeconds The current time in seconds as integer, it can be useful to display the remaining time in the UI. Declaration public int TimeInSeconds { get; } Property Value Type Description int Methods Pause() Pause the timer Declaration public virtual void Pause() Reset() Set the time to 0f Declaration public virtual void Reset() Resume() Unpause the timer Declaration public virtual void Resume() SetInitialTime(float) Set the initial time then reset the timer. Declaration public virtual void SetInitialTime(float time) Parameters Type Name Description float time Start() Start the timer with it's initial time, invoke OnTimerStart Declaration public virtual void Start() Stop() Stop the timer, invoke OnTimerStop Declaration public virtual void Stop() Tick(float) Update the current time, inside an Update method Declaration public virtual void Tick(float deltaTime) Parameters Type Name Description float deltaTime ToString() Returns a string representing the current time elapsed for example \"2/5\". Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/TetraCreations.Core.Utility.TimerManager.html": {
    "href": "api/TetraCreations.Core.Utility.TimerManager.html",
    "title": "Class TimerManager | Tetra Creations documentation",
    "keywords": "Class TimerManager Inheritance object Singleton Singleton<TimerManager> TimerManager Inherited Members Singleton<TimerManager>._automaticInstanciation Singleton<TimerManager>.OnAwakeEvent Singleton<TimerManager>.Instance Singleton<TimerManager>.IsAwake Singleton.Quitting Singleton.OnQuitting() Namespace: TetraCreations.Core.Utility Assembly: cs.temp.dll.dll Syntax public class TimerManager : Singleton<TimerManager> Properties ActiveCountdownTimerCount Declaration public int ActiveCountdownTimerCount { get; } Property Value Type Description int ActiveTimerCount Declaration public int ActiveTimerCount { get; } Property Value Type Description int HasAnyActiveCountdownTimer Declaration public bool HasAnyActiveCountdownTimer { get; } Property Value Type Description bool HasAnyActiveTimer Declaration public bool HasAnyActiveTimer { get; } Property Value Type Description bool Methods OnAwake() Declaration protected override void OnAwake() Overrides TetraCreations.Core.Utility.Singleton<TetraCreations.Core.Utility.TimerManager>.OnAwake() StartTimer(CountdownTimer) Declaration public void StartTimer(CountdownTimer timer) Parameters Type Name Description CountdownTimer timer StartTimer(Timer) Declaration public void StartTimer(Timer timer) Parameters Type Name Description Timer timer"
  },
  "api/TetraCreations.Core.Utility.Trigger2DCollider.html": {
    "href": "api/TetraCreations.Core.Utility.Trigger2DCollider.html",
    "title": "Class Trigger2DCollider | Tetra Creations documentation",
    "keywords": "Class Trigger2DCollider Simple script which define a zone by a 2D collider or a radius in which it will detect any object. It holds a layer bit mask, to ignore specific layers Inheritance object Trigger2DCollider Namespace: TetraCreations.Core.Utility Assembly: cs.temp.dll.dll Syntax public class Trigger2DCollider : MonoBehaviour Fields Collider Declaration public Collider2D Collider Field Value Type Description Collider2D LayerMaskFilter Declaration public LayerMaskFilter LayerMaskFilter Field Value Type Description LayerMaskFilter OnColliderEnter Declaration public UnityEvent<Collider2D> OnColliderEnter Field Value Type Description UnityEvent<><Collider2D> OnColliderExit Declaration public UnityEvent<Collider2D> OnColliderExit Field Value Type Description UnityEvent<><Collider2D> Properties Active Declaration public bool Active { get; set; } Property Value Type Description bool PreventSelfDetection Declaration public bool PreventSelfDetection { get; set; } Property Value Type Description bool"
  },
  "api/TetraCreations.Core.Utility.TriggerCollider.html": {
    "href": "api/TetraCreations.Core.Utility.TriggerCollider.html",
    "title": "Class TriggerCollider | Tetra Creations documentation",
    "keywords": "Class TriggerCollider Simple script which define a zone by a collider or a radius in which it will detect any object. It holds a layer bit mask, to ignore specific layers Inheritance object TriggerCollider Namespace: TetraCreations.Core.Utility Assembly: cs.temp.dll.dll Syntax public class TriggerCollider : MonoBehaviour Fields Collider Declaration public Collider Collider Field Value Type Description Collider LayerMaskFilter Declaration public LayerMaskFilter LayerMaskFilter Field Value Type Description LayerMaskFilter OnDetectedColliderEnter Declaration public UnityEvent<Collider> OnDetectedColliderEnter Field Value Type Description UnityEvent<><Collider> OnDetectedColliderExit Declaration public UnityEvent<Collider> OnDetectedColliderExit Field Value Type Description UnityEvent<><Collider> Properties Active Declaration public bool Active { get; set; } Property Value Type Description bool CollidersDetected Declaration protected List<Collider> CollidersDetected { get; set; } Property Value Type Description List<><Collider> CollidersDetectedReadOnly Declaration public IReadOnlyList<Collider> CollidersDetectedReadOnly { get; } Property Value Type Description IReadOnlyList<><Collider> PreventSelfDetection Declaration public bool PreventSelfDetection { get; set; } Property Value Type Description bool Methods Enter(Collider) Declaration protected virtual void Enter(Collider collider) Parameters Type Name Description Collider collider Exit(Collider) Declaration protected virtual void Exit(Collider collider) Parameters Type Name Description Collider collider"
  },
  "api/TetraCreations.Core.Vector2Extensions.html": {
    "href": "api/TetraCreations.Core.Vector2Extensions.html",
    "title": "Class Vector2Extensions | Tetra Creations documentation",
    "keywords": "Class Vector2Extensions Inheritance object Vector2Extensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class Vector2Extensions Methods Add(Vector2, float, float) Increase/Decrease any point in the vector (x, y). Declaration public static Vector2 Add(this Vector2 vector, float x = 0, float y = 0) Parameters Type Name Description Vector2 vector float x float y Returns Type Description Vector2 Copy(Vector2) Create a copy of the Vector2 Declaration public static Vector2 Copy(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector2 Log(Vector2) Show the Vector2 values in the console Declaration public static void Log(this Vector2 vector) Parameters Type Name Description Vector2 vector SetX(Vector2, float) Set the X axis value Declaration public static Vector2 SetX(this Vector2 vector, float x) Parameters Type Name Description Vector2 vector float x Returns Type Description Vector2 SetY(Vector2, float) Set the Y axis value Declaration public static Vector2 SetY(this Vector2 vector, float y) Parameters Type Name Description Vector2 vector float y Returns Type Description Vector2 ToString(Vector2) Converts a Vector2 to a string in X, Y format Declaration public static string ToString(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description string With(Vector2, float?, float?) Returns a new Vector2 while changing/keeping any value from the original vector (x, y). Declaration public static Vector2 With(this Vector2 vector, float? x = null, float? y = null) Parameters Type Name Description Vector2 vector float? x float? y Returns Type Description Vector2"
  },
  "api/TetraCreations.Core.Vector3Extensions.html": {
    "href": "api/TetraCreations.Core.Vector3Extensions.html",
    "title": "Class Vector3Extensions | Tetra Creations documentation",
    "keywords": "Class Vector3Extensions Inheritance object Vector3Extensions Namespace: TetraCreations.Core Assembly: cs.temp.dll.dll Syntax public static class Vector3Extensions Methods Add(Vector3, float, float, float) Increase/Decrease any point in the vector (x, y, z) without changing the others. Declaration public static Vector3 Add(this Vector3 vector, float x = 0, float y = 0, float z = 0) Parameters Type Name Description Vector3 vector float x float y float z Returns Type Description Vector3 Copy(Vector3) Returns a copy of the Vector3 Declaration public static Vector3 Copy(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3 GetPointOnUnitSphereCap(Quaternion, float) Get a random point on a sphare cap, limited by an angle Declaration public static Vector3 GetPointOnUnitSphereCap(Quaternion targetDirection, float angle) Parameters Type Name Description Quaternion targetDirection float angle Returns Type Description Vector3 GetPointOnUnitSphereCap(Vector3, float) Get a random point on a sphare cap, limited by an angle using Quaternion.LookRotation(targetDirection) as target direction Declaration public static Vector3 GetPointOnUnitSphereCap(Vector3 targetDirection, float angle) Parameters Type Name Description Vector3 targetDirection float angle Returns Type Description Vector3 Log(Vector3, string) Show the Vector3 values in the console Declaration public static void Log(this Vector3 vector, string prefix = \"Vector3\") Parameters Type Name Description Vector3 vector string prefix Text to show before the values ToString(Vector3) Converts a Vector3 to a string in X, Y, Z format Declaration public static string ToString(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description string With(Vector3, float?, float?, float?) Returns a new Vector3 while changing/keeping any value from the original vector (x, y, z). Declaration public static Vector3 With(this Vector3 vector, float? x = null, float? y = null, float? z = null) Parameters Type Name Description Vector3 vector float? x float? y float? z Returns Type Description Vector3"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Tetra Creations documentation",
    "keywords": "Getting Started Runtime To access all the extension methods, import the library at the top of your script. using TetraCreations.Core; To access all utility scripts : using TetraCreations.Core.Utility; Which include : A generic Singleton pattern implementation. A TimerManager to create and run timer in a single Update method. A simple TriggerCollider script to detect Rigidbodies entering/leaving a trigger collider. An example of how to manage audio settings, using the AudioManager component to generate volume sliders at runtime. FloatValueCondition to evaluate whether a float value is lower than, Greater than, equals to or between other values to trigger methods from different listeners. Editor using TetraCreations.Core.Editor; Then you can access to : AssetDatabaseExtensions : Get assets by their type inside one or multiple folders. Verify if an asset exists. Create an asset at a specific path. Verify the path and the asset name before its creation. AudioMixerExtensions : Get the list of exposed parameters MonoScriptExtensions : Create scriptable object instance using the reference of the MonoScript. PathReferenceExtensions : Extend PathReference from TetraAttributes to create/load/delete/count assets directly from the folder reference. Warning Remember that you need to move all your editor scripts to an Editor folder or to use #if UNITY_EDITOR / #endif otherwise your build will not compile ! Extensions examples 1. AudioMixer A recurring issue in Unity is managing the audio settings using an AudioMixer where we expose volume parameters. However, it's a floating number representing the sound level in decibels. To modify it using a slider from the UI, we have to convert the linear value to a decibel value. That's why I've got an audio mixer extension method that does the conversion automatically : AudioMixer.SetLinearVolume(\"MusicVolume\", 0.8f); The first parameter is the name of the Exposed Parameter from the AudioMixer. The second parameter is the linear volume value, here 0.8f is equals to -1.94 dB. The third parameter determines if we clamp the linear volume to not exceed the safe audio limit in decibel which is defined as -80 dB to +0 dB, it is set to true by default. See the AudioManager example scene for more details. 2. Canvas Group There are plenty of extension methods that makes the code easier to read and avoid repetition, another example is how to show or hide UI elements using CanvasGroup. /// <summary> /// Show a canvas group while blocking raycasts /// </summary> /// <param name=\"canvasGroup\"></param> public static void Show(this CanvasGroup canvasGroup) { canvasGroup.alpha = 1; canvasGroup.blocksRaycasts = true; } /// <summary> /// Hide a canvas group while disable blocking raycasts /// </summary> /// <param name=\"canvasGroup\"></param> public static void Hide(this CanvasGroup canvasGroup) { canvasGroup.alpha = 0; canvasGroup.blocksRaycasts = false; } This is something I do all the time in every project. It's recommended using a CanvasGroup instead of enabling/disabling the entire gameObject which is generally more costly. 3. List You can find a few examples inside the package, another common one is list and collection's extensions : _numbers = new List<int>{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; // Shuffle all elements using Fisher-Yates algorithm which produces an unbiased permutation _numbers.Shuffle(); // Debug.Log all elements Debug.Log(\"Numbers : \"); _numbers.Log(); // Add an element if it's not already in the list _numbers.AddItNotContains(5); // Loop backwards Debug.Log(\"Reverse loop : \"); foreach(var number in _numbers.ReverseLoop()) { Debug.Log(number); } // Adding existing numbers _numbers.AddRange(new List<int> { 1,5,8 }); // Determine if the list contains unique elements Debug.Log(\"Contains unique elements : \" + _numbers.HasUniqueElements()); // Create a new list without the duplicates var withoutDuplicates = _numbers.RemoveDuplicates(); Debug.Log(\"Wihout duplicates : \"); withoutDuplicates.Log(); Utilities examples 1. Generic Singleton Pattern To change any MonoBehaviour script to a Singleton simply extend from Singleton<T> where T is the type of your script. For example, I have a Singleton to start/update all timers in my game : public class TimerManager : Singleton<TimerManager> { [Title(\"Active Timer\")] [SerializeField] [ReadOnly] private bool _hasTimers = false; [SerializeField] [ReadOnly] private int _activeTimerCount = 0; [SerializeField] [ReadOnly] private List<CountdownTimer> _activeTimers; protected override void OnAwake() { base.OnAwake(); _activeTimers = new List<CountdownTimer>(); } } The important thing to notice is the override of the OnAwake() method, by default all MonoBehaviour use Awake() when the scene starts. However, the generic abstract class Singleton already calls Awake() to initialize itself, it checks for any duplicated instances in the current scene, and then it calls a protected virtual method OnAwake() that you can override. If you call Awake() instead then the Singleton won't be initialized and it will not work. When using the Singleton pattern, one common issue is trying to call a method from the Singleton inside the Awake method of another Singleton, we don't know which one is initialized first. To avoid dealing with script execution order, we can the other script as a dependency inside the inspector. In the example screen below it will wait until TimerManager is initialized. 2. AssetDatabase Inside Editors or Scriptable Object I often need to load assets, let's imagine that I have imported 200 Sprites in my project, and I want to create a scriptable object for each one of them and directly assign the sprite to it. Warning Remember that you need to move all your editor scripts to an Editor folder or to use #if UNITY_EDITOR / #endif otherwise your build will not compile ! I can use the AssetDataExtensions to get every sprite from a specific folder: var spritesPath = \"Assets/Example/Sprites\"; var sprites = AssetDatabaseExtensions.GetAssetsFrom<Sprite>(new string[]{ spritesPath }); foreach (var sprite in sprites) { /// Do something with each sprite } Using PathReference class from TetraAttributes makes it even easier : [SerializeField] private PathReference _audioClipFolder; void LoadAudioClip() { // We could also use the GetAssets<T>() extension method directly from the PathReference, which does the same thing. var audioClips = _audioClipFolder.GetAssets<AudioClip>(); foreach(var audioClip in audioClips) { /// Do something with each sprite } } Without the extension method the code to get assets is not generic and can be difficult to remember : var assets = AssetDatabase.FindAssets($\"t:sprite\", new string[] { folderPath }.ToList() .Select(AssetDatabase.GUIDToAssetPath) .Select(AssetDatabase.LoadAssetAtPath<Sprite>) .ToList()); Using a generic method accepting any UnityEngine.Object is extremely useful. We can also load an asset by its name, this however will search in the entire AssetDatase as we don't specify a folder. 3. Trigger Collider Another utility that I use in every project : The TriggerCollider component detects colliders and filters them depending on their layers (See LayerMaskFilter). It is used to call methods from other scripts by invoking OnDetectedColliderEnter and OnDetectedColliderExist events. Note Inactive GameObjects in the scene are not detected. In this example, I have setup a GameObject with a Sphere Collider set as a Trigger. When other GameObjects with Rigidbody enter it, a method is called using the event OnDetectedColliderEnter to change the local scale of the object using the Scaling component. When exiting the Trigger the scale is reset back to 1f. You can use Trigger2DCollider for 2D projects, you can also create a component inheriting from Trigger2DCollider or TriggerCollider and override the Enter and Exit methods if you need to modify the filtering system. I didn't make a Tag filtering system because I personally don't like string comparison. 4. Float Value Condition It's very common to call several methods from different scripts when a float value reaches a particular value. For example, we can play a sound effect and turn the screen red when the player's health falls below a certain percentage. This is done using the FloatValueCondition class, which evaluates whether the condition is met when the health value changes. By using events, the components are decoupled and we can reuse the FloatValueCondition class in many scenarios. FloatValueConditionExample will check if the value is lower or equals than 0.3 which represents the player's health percentage. RaiseEventOnce means that if the condition is already met and the player's health drops below 0.3f, we won't re-raise the event, because the condition is still true. We set ResetEventRaisedWhenNotMet to true, so if the player's health percentage exceeds 0.3f, we want to raise the event if it drops below 0.3f. By setting the ConditonType to Equals, we can specify the precision of the equality since we're using floating-point numbers, for example we can consider 99.96 to be equal to 100. 5. Timer Manager We often need to raise an event after some time is elapsed by using Coroutine with WaitForSeconds or by incrementing a timer in the Update method of a MonoBehaviour. This is why I created two simple class Timer and CountdownTimer responsible for this. These are simple C# classes, they depend on the TimerManager to be started and to update their time. Here's an example to prevent the player from spamming an attack with their character: [SerializeField] private Animator _animator; [SerializeField] private Button _attackButton; [SerializeField] private CountdownTimerUI _countdownTimerUI; [SerializeField] private float _attackRate; [SerializeField] private bool _autoAttack; private CountdownTimer _countdownTimer; public bool IsOnCooldown => _countdownTimer.IsRunning; public CountdownTimer CountdownTimer { get => _countdownTimer; protected set => _countdownTimer = value; } private void Start() { _countdownTimer = new CountdownTimer(_attackRate, loop: _autoAttack); _countdownTimerUI.Initialize(_countdownTimer); // We have to manually click on the button to Start the timer _countdownTimer.OnTimerStart += DisableAttackButton; _countdownTimer.OnTimerStop += EnableAttackButton; } // This is called when clicking the 'Attack' button public void Attack() { if (IsOnCooldown) { return; } TimerManager.Instance.StartTimer(_countdownTimer); _animator.SetTrigger(\"Attack\"); } private void AutoAttack() { _animator.SetTrigger(\"Attack\"); } private void DisableAttackButton() { _attackButton.interactable = false; } private void EnableAttackButton() { _attackButton.interactable = true; } When the CountdownTimer starts, we disable the attack button and enable it when the timer stops. We call TimerManager.Instance.StartTimer to add our countdown to as an active timer, The TimerManager will update each timer every frame, which is more efficient than using one MonoBehaviour per timer. Here, the countdown starts with an initial time of 2 seconds (the attack rate) and stops automatically when its time reaches 0. We can also set AutoAttack to true so the timer loops indefinitely, the OnTimerLooped event is raised and our character executes the attack animation. We need to change the Start method to use the AutoAttack system: private void Start() { _countdownTimer = new CountdownTimer(_attackRate, loop: _autoAttack); _countdownTimerUI.Initialize(_countdownTimer); if (_autoAttack) { DisableAttackButton(); // Every time the count down timer is done it will reset and start again automatically _countdownTimer.OnTimerLooped += AutoAttack; // Perform the attack, start the count down timer _attackButton.onClick.Invoke(); TimerManager.Instance.StartTimer(_countdownTimer); return; } // We have to manually click on the button to Start the timer _countdownTimer.OnTimerStart += DisableAttackButton; _countdownTimer.OnTimerStop += EnableAttackButton; } We don't need to use the Button, and we start the timer only once, it will stay inside the TimerManager and loop forever. Let's see how we update the UI to display the remaining time of the timer and to update the progress bar. [Header(\"Update Text/Progress Bar\")] [SerializeField] private bool _enableTextUpdate = true; [SerializeField] private bool _changeTextInUpdateMethod = true; [SerializeField] private bool _enableProgressBarUpdate = true; [Header(\"References\")] [SerializeField] private TextMeshProUGUI _timeInSeconds; [SerializeField] private Image _progressBarImage; [Header(\"Countdown Timer\")] [SerializeField] private CountdownTimer _countdownTimer; public bool ChangeTextInUpdateMethod { get => _changeTextInUpdateMethod; set => _changeTextInUpdateMethod = value; } public bool EnableTextUpdate { get => _enableTextUpdate; set => _enableTextUpdate = value; } public bool EnableProgressBarUpdate { get => _enableProgressBarUpdate; set => _enableProgressBarUpdate = value; } public void Initialize(CountdownTimer countdownTimer) { _countdownTimer = countdownTimer; /* Normally we verify if the TextMeshProUGUI and Image are set */ if (_enableTextUpdate) { // We use the countdown timer event to update the text value every second instead of every frame if (_changeTextInUpdateMethod == false) { // We don't need any decimal because we display the time in second _countdownTimer.TimeFormat = \"F0\"; _countdownTimer.OnSecondElapsed += UpdateText; } _timeInSeconds.text = _countdownTimer.TimeAsString; _countdownTimer.OnTimerStop += UpdateText; } if (_enableProgressBarUpdate) { _countdownTimer.OnTimerStop += UpdateProgressBar; } } /// <summary> /// Set the text value using the current Time left on the countdown timer. /// </summary> public void UpdateText() { if(EnableTextUpdate == false) { return; } _timeInSeconds.text = _countdownTimer.TimeAsString; } /// <summary> /// Set the fill amount of the progress bar image using the current Progress on the countdown timer. /// </summary> public void UpdateProgressBar() { if(EnableProgressBarUpdate == false) { return; } _progressBarImage.fillAmount = _countdownTimer.Progress; } private void Update() { if (_changeTextInUpdateMethod) { UpdateText(); } UpdateProgressBar(); } Here, we can either update the text to show the time remaining in the update method, but this runs every frame. Instead, we can set _changeTextInUpdateMethod to false, to use the OnSecondElapsed event to update it every second."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Dependency | Tetra Creations documentation",
    "keywords": "Dependency This package has a dependency on the other asset : Tetra Attributes which is free. You need to download and import it in your project so you don't have any missing assembly reference when importing Tetra Core. Importing the Asset If you not familiar on how to install an asset, once you have purchased it, click on Window → Package Manager to reveal a window with all your available assets. Type in the search field Tetra Core to download and install the last version. Follow the steps and wait till Unity finishes compiling your project. Introduction TetraCore is a collection of C# extension methods and utility scripts for Unity. I've made this library to avoid writing the same block of code for each project, here is a few examples : Checking whether a GameObject entering a trigger collider has the expected LayerMask. Trying to Add an item to a list if isn't already there. Change the transparency of an image color. Show/Hide a CanvasGroup. Shuffle a list, get a random item from it. Destroy all children from a transform. Package structure ├─ Tetra Creations │ ├─ Tetra Core │ │ ├─ Examples │ │ │ ├─ Audio Manager │ │ │ ├─ Collections │ │ │ ├─ Float Value Condition │ │ │ ├─ Loading Assets │ │ │ ├─ Scenes │ │ │ ├─ Timer Manager │ │ │ ├─ Vector3 │ │ ├─ Scripts │ │ │ ├─ Runtime │ │ │ │ ├─ Enums │ │ │ │ ├─ Extensions │ │ │ │ ├─ Utilities │ │ │ ├─ Editor │ │ ├─ Third Party Assets Audio Manager : Using TetraAttributes and TetraCore to simplify the management of audio parameters. Collections : Extensions methods for ICollection and IList Float Value Condition : Trigger some code when a float reaches a certain value. Loading Assets : Using AssetDatabaseExtensions to get all assets from a folder. Scenes : All examples scenes Vector3 : Move and scale an object along a path using Vector3 extensions. Note I don't have an example for every extension method you'll have to explore on your own."
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction | Tetra Creations documentation",
    "keywords": "Introduction Welcome to the scripting API documentation for Tetra Creations Unity Assets. For the moment, only the Tetra Creations Core API is available. You can also consult the documentation of all my other assets on my website Tetra Core 1.0.0 : Documentation Introduction API Reference"
  }
}